Search.setIndex({"docnames": ["_autosummary/eta", "_autosummary/eta.config", "_autosummary/eta.config.lissa_gpt", "_autosummary/eta.config.lissa_gpt.config", "_autosummary/eta.config.lissa_rule", "_autosummary/eta.config.lissa_rule.config", "_autosummary/eta.config.sophie_gpt", "_autosummary/eta.config.sophie_gpt.config", "_autosummary/eta.config.sophie_offline", "_autosummary/eta.config.sophie_offline.config", "_autosummary/eta.config.test", "_autosummary/eta.config.test.config", "_autosummary/eta.constants", "_autosummary/eta.constants.ANSWER", "_autosummary/eta.constants.ARTICULATE_TO", "_autosummary/eta.constants.ASK", "_autosummary/eta.constants.CERTAINTY_THRESHOLD", "_autosummary/eta.constants.COREFERENCE_MODE", "_autosummary/eta.constants.DEFAULT_IMPORTANCE", "_autosummary/eta.constants.DEFAULT_START", "_autosummary/eta.constants.EMBEDDING_DEFAULT_API", "_autosummary/eta.constants.EMBEDDING_DEFAULT_MODEL", "_autosummary/eta.constants.EMOTIONS_LIST", "_autosummary/eta.constants.EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT", "_autosummary/eta.constants.HERE", "_autosummary/eta.constants.IO_PATH", "_autosummary/eta.constants.KEY_PATH", "_autosummary/eta.constants.ME", "_autosummary/eta.constants.NOOP", "_autosummary/eta.constants.NOOP_GEN", "_autosummary/eta.constants.NOOP_YOU", "_autosummary/eta.constants.NOW", "_autosummary/eta.constants.PARAPHRASE_TO", "_autosummary/eta.constants.REACT_TO", "_autosummary/eta.constants.REASONING_DEPTH_LIMIT", "_autosummary/eta.constants.RECENCY_CUTOFF", "_autosummary/eta.constants.REPLY_TO", "_autosummary/eta.constants.RESPOND_TO", "_autosummary/eta.constants.SAY_BYE", "_autosummary/eta.constants.SAY_TO", "_autosummary/eta.constants.SLEEPTIME", "_autosummary/eta.constants.SPEECH_ACTS", "_autosummary/eta.constants.SYMTAB_PATH", "_autosummary/eta.constants.TELIC_VERBS", "_autosummary/eta.constants.YOU", "_autosummary/eta.core", "_autosummary/eta.core.eta", "_autosummary/eta.core.eta.DialogueState", "_autosummary/eta.core.eta.ProcessManager", "_autosummary/eta.core.eta.eta", "_autosummary/eta.core.eta.main", "_autosummary/eta.core.execution", "_autosummary/eta.core.execution.execute_say_bye", "_autosummary/eta.core.execution.execute_say_to", "_autosummary/eta.core.execution.execution_loop", "_autosummary/eta.core.execution.fail_curr_step", "_autosummary/eta.core.execution.get_action", "_autosummary/eta.core.execution.inquire_truth_of_curr_step", "_autosummary/eta.core.execution.me_pred", "_autosummary/eta.core.execution.process_condition_step", "_autosummary/eta.core.execution.process_expected_step", "_autosummary/eta.core.execution.process_intended_step", "_autosummary/eta.core.execution.process_repetition_step", "_autosummary/eta.core.execution.say_bye_step", "_autosummary/eta.core.execution.say_to_step", "_autosummary/eta.core.execution.you_pred", "_autosummary/eta.core.perception", "_autosummary/eta.core.perception.observe", "_autosummary/eta.core.perception.perception_loop", "_autosummary/eta.core.perception.process_observations", "_autosummary/eta.core.perception.process_utterances", "_autosummary/eta.core.planning", "_autosummary/eta.core.planning.add_possible_actions_to_plan", "_autosummary/eta.core.planning.answer_step", "_autosummary/eta.core.planning.ask_step", "_autosummary/eta.core.planning.equivalent_speech_acts", "_autosummary/eta.core.planning.expand_condition_step", "_autosummary/eta.core.planning.expand_plan_steps", "_autosummary/eta.core.planning.expand_primitive_step", "_autosummary/eta.core.planning.expand_repetition_step", "_autosummary/eta.core.planning.merge_plan_steps", "_autosummary/eta.core.planning.paraphrase_step", "_autosummary/eta.core.planning.plan_answer", "_autosummary/eta.core.planning.plan_ask", "_autosummary/eta.core.planning.plan_paraphrase", "_autosummary/eta.core.planning.plan_react", "_autosummary/eta.core.planning.plan_respond", "_autosummary/eta.core.planning.planning_loop", "_autosummary/eta.core.planning.react_step", "_autosummary/eta.core.planning.relative_speech_act_step", "_autosummary/eta.core.planning.reorder_plan_steps", "_autosummary/eta.core.planning.reply_step", "_autosummary/eta.core.planning.respond_step", "_autosummary/eta.core.planning.say_to_step_from_utt", "_autosummary/eta.core.planning.say_to_step_from_utts", "_autosummary/eta.core.planning.schema_step", "_autosummary/eta.core.planning.split_schema_step", "_autosummary/eta.core.reasoning", "_autosummary/eta.core.reasoning.infer_bottom_up", "_autosummary/eta.core.reasoning.infer_top_down", "_autosummary/eta.core.reasoning.reasoning_loop", "_autosummary/eta.core.reasoning.suggest_possible_actions", "_autosummary/eta.discourse", "_autosummary/eta.discourse.DialogueTurn", "_autosummary/eta.discourse.Utterance", "_autosummary/eta.discourse.compress", "_autosummary/eta.discourse.decompress", "_autosummary/eta.discourse.get_prior_turn", "_autosummary/eta.discourse.parse_utt_str", "_autosummary/eta.discourse.presubst", "_autosummary/eta.discourse.swap_duals", "_autosummary/eta.embedding", "_autosummary/eta.embedding.DummyEmbedder", "_autosummary/eta.embedding.Embedder", "_autosummary/eta.embedding.HFEmbedder", "_autosummary/eta.embedding.STEmbedder", "_autosummary/eta.embedding.sim", "_autosummary/eta.lf", "_autosummary/eta.lf.Condition", "_autosummary/eta.lf.Domain", "_autosummary/eta.lf.ELF", "_autosummary/eta.lf.Eventuality", "_autosummary/eta.lf.Individual", "_autosummary/eta.lf.KEYWORDS", "_autosummary/eta.lf.KEYWORDS_R", "_autosummary/eta.lf.LF", "_autosummary/eta.lf.Repetition", "_autosummary/eta.lf.ULF", "_autosummary/eta.lf.Var", "_autosummary/eta.lf.and_prop_p", "_autosummary/eta.lf.characterizes_prop_p", "_autosummary/eta.lf.equal_prop_p", "_autosummary/eta.lf.expectation_p", "_autosummary/eta.lf.extract_set", "_autosummary/eta.lf.from_lisp_dirs", "_autosummary/eta.lf.from_lisp_file", "_autosummary/eta.lf.is_set", "_autosummary/eta.lf.make_set", "_autosummary/eta.lf.not_prop_p", "_autosummary/eta.lf.or_prop_p", "_autosummary/eta.lf.parse_condition", "_autosummary/eta.lf.parse_eventuality", "_autosummary/eta.lf.parse_eventuality_list", "_autosummary/eta.lf.parse_repetition", "_autosummary/eta.lf.remove_type", "_autosummary/eta.lf.set_union", "_autosummary/eta.memory", "_autosummary/eta.memory.Memory", "_autosummary/eta.memory.MemoryStorage", "_autosummary/eta.plan", "_autosummary/eta.plan.PlanNode", "_autosummary/eta.plan.PlanStep", "_autosummary/eta.plan.expand_plan_node", "_autosummary/eta.plan.get_first_plan_node", "_autosummary/eta.plan.get_last_plan_node", "_autosummary/eta.plan.init_plan_from_eventualities", "_autosummary/eta.plan.insert_before_plan_node", "_autosummary/eta.plan.merge_plan_nodes", "_autosummary/eta.plan.visualize_plan", "_autosummary/eta.schema", "_autosummary/eta.schema.DialSchema", "_autosummary/eta.schema.EpiSchema", "_autosummary/eta.schema.ObjSchema", "_autosummary/eta.schema.Schema", "_autosummary/eta.schema.SchemaLibrary", "_autosummary/eta.transducers", "_autosummary/eta.transducers.base", "_autosummary/eta.transducers.base.AffectTransducer", "_autosummary/eta.transducers.base.AnswerTransducer", "_autosummary/eta.transducers.base.AskTransducer", "_autosummary/eta.transducers.base.GistTransducer", "_autosummary/eta.transducers.base.ParaphraseTransducer", "_autosummary/eta.transducers.base.PragmaticTransducer", "_autosummary/eta.transducers.base.ReactionTransducer", "_autosummary/eta.transducers.base.ReasonBottomUpTransducer", "_autosummary/eta.transducers.base.ReasonTopDownTransducer", "_autosummary/eta.transducers.base.ResponseTransducer", "_autosummary/eta.transducers.base.SemanticTransducer", "_autosummary/eta.transducers.base.SubplanTransducer", "_autosummary/eta.transducers.base.Transducer", "_autosummary/eta.transducers.gpt", "_autosummary/eta.transducers.gpt.GPTAffectTransducer", "_autosummary/eta.transducers.gpt.GPTAnswerTransducer", "_autosummary/eta.transducers.gpt.GPTAskTransducer", "_autosummary/eta.transducers.gpt.GPTGistTransducer", "_autosummary/eta.transducers.gpt.GPTParaphraseTransducer", "_autosummary/eta.transducers.gpt.GPTPragmaticTransducer", "_autosummary/eta.transducers.gpt.GPTReactionTransducer", "_autosummary/eta.transducers.gpt.GPTReasonBottomUpTransducer", "_autosummary/eta.transducers.gpt.GPTReasonTopDownTransducer", "_autosummary/eta.transducers.gpt.GPTResponseTransducer", "_autosummary/eta.transducers.gpt.GPTSemanticTransducer", "_autosummary/eta.transducers.gpt.GPTSubplanTransducer", "_autosummary/eta.transducers.gpt.GPTTransducer", "_autosummary/eta.transducers.gpt.PROMPTS", "_autosummary/eta.transducers.gpt.VALIDATORS", "_autosummary/eta.transducers.tt", "_autosummary/eta.transducers.tt.TTAffectTransducer", "_autosummary/eta.transducers.tt.TTAnswerTransducer", "_autosummary/eta.transducers.tt.TTAskTransducer", "_autosummary/eta.transducers.tt.TTGistTransducer", "_autosummary/eta.transducers.tt.TTParaphraseTransducer", "_autosummary/eta.transducers.tt.TTPragmaticTransducer", "_autosummary/eta.transducers.tt.TTReactionTransducer", "_autosummary/eta.transducers.tt.TTReasonBottomUpTransducer", "_autosummary/eta.transducers.tt.TTReasonTopDownTransducer", "_autosummary/eta.transducers.tt.TTResponseTransducer", "_autosummary/eta.transducers.tt.TTSemanticTransducer", "_autosummary/eta.transducers.tt.TTSubplanTransducer", "_autosummary/eta.transducers.tt.TTTransducer", "_autosummary/eta.util", "_autosummary/eta.util.buffer", "_autosummary/eta.util.buffer.clear", "_autosummary/eta.util.buffer.enqueue", "_autosummary/eta.util.buffer.enqueue_ordered", "_autosummary/eta.util.buffer.get_item", "_autosummary/eta.util.buffer.is_empty", "_autosummary/eta.util.buffer.iterate", "_autosummary/eta.util.buffer.max_importance", "_autosummary/eta.util.buffer.pop_all", "_autosummary/eta.util.buffer.pop_item", "_autosummary/eta.util.file", "_autosummary/eta.util.file.append_file", "_autosummary/eta.util.file.clear", "_autosummary/eta.util.file.ensure_dir_exists", "_autosummary/eta.util.file.ensure_file_exists", "_autosummary/eta.util.file.exists", "_autosummary/eta.util.file.load_json", "_autosummary/eta.util.file.read_file", "_autosummary/eta.util.file.read_lines", "_autosummary/eta.util.file.remove", "_autosummary/eta.util.file.write_file", "_autosummary/eta.util.file.write_json", "_autosummary/eta.util.general", "_autosummary/eta.util.general.append", "_autosummary/eta.util.general.argmax", "_autosummary/eta.util.general.atom", "_autosummary/eta.util.general.clear_symtab", "_autosummary/eta.util.general.cons", "_autosummary/eta.util.general.cons_dict", "_autosummary/eta.util.general.dict_get", "_autosummary/eta.util.general.dict_rem", "_autosummary/eta.util.general.dict_rem_val", "_autosummary/eta.util.general.dict_substall_keys", "_autosummary/eta.util.general.dual_var", "_autosummary/eta.util.general.duplicate_var", "_autosummary/eta.util.general.episode_name", "_autosummary/eta.util.general.episode_var", "_autosummary/eta.util.general.escaped_symbol_p", "_autosummary/eta.util.general.flatten", "_autosummary/eta.util.general.gentemp", "_autosummary/eta.util.general.get_keyword_contents", "_autosummary/eta.util.general.indent", "_autosummary/eta.util.general.isquote", "_autosummary/eta.util.general.linsum", "_autosummary/eta.util.general.listp", "_autosummary/eta.util.general.normalize", "_autosummary/eta.util.general.push", "_autosummary/eta.util.general.random_element", "_autosummary/eta.util.general.rec_remove", "_autosummary/eta.util.general.rec_replace", "_autosummary/eta.util.general.remove_duplicates", "_autosummary/eta.util.general.remove_nil", "_autosummary/eta.util.general.replaceall", "_autosummary/eta.util.general.squash", "_autosummary/eta.util.general.standardize", "_autosummary/eta.util.general.subst", "_autosummary/eta.util.general.substall", "_autosummary/eta.util.general.symbolp", "_autosummary/eta.util.general.to_key", "_autosummary/eta.util.general.variablep", "_autosummary/eta.util.gpt", "_autosummary/eta.util.gpt.apply_zip", "_autosummary/eta.util.gpt.cost_gpt", "_autosummary/eta.util.gpt.cost_tokens", "_autosummary/eta.util.gpt.generate_gpt", "_autosummary/eta.util.gpt.subst_examples", "_autosummary/eta.util.gpt.subst_kwargs", "_autosummary/eta.util.sexpr", "_autosummary/eta.util.sexpr.balanced_substr", "_autosummary/eta.util.sexpr.clean_lisp", "_autosummary/eta.util.sexpr.clean_s_expr", "_autosummary/eta.util.sexpr.convert_quotes", "_autosummary/eta.util.sexpr.list_to_s_expr", "_autosummary/eta.util.sexpr.list_to_str", "_autosummary/eta.util.sexpr.parse_s_expr", "_autosummary/eta.util.sexpr.read_lisp", "_autosummary/eta.util.sexpr.standardize_symbols", "_autosummary/eta.util.sexpr.write_lisp", "_autosummary/eta.util.time", "_autosummary/eta.util.time.TimePoint", "_autosummary/eta.util.time.certainty_to_period", "_autosummary/eta.util.time.has_elapsed_certainty_period", "_autosummary/eta.util.time.now", "_autosummary/eta.util.tt", "_autosummary/eta.util.tt.choice", "_autosummary/eta.util.tt.choice.choose_result_for", "_autosummary/eta.util.tt.choice.is_tree_root", "_autosummary/eta.util.tt.choice.is_tree_root_clause", "_autosummary/eta.util.tt.choice.is_tree_root_list", "_autosummary/eta.util.tt.match", "_autosummary/eta.util.tt.match.check_position_index_syntax", "_autosummary/eta.util.tt.match.dec_num_var", "_autosummary/eta.util.tt.match.dot_atom", "_autosummary/eta.util.tt.match.e_var", "_autosummary/eta.util.tt.match.fill_template", "_autosummary/eta.util.tt.match.flatten_sequences", "_autosummary/eta.util.tt.match.hard_atom", "_autosummary/eta.util.tt.match.indexed_element_of", "_autosummary/eta.util.tt.match.isa", "_autosummary/eta.util.tt.match.match", "_autosummary/eta.util.tt.match.match_var", "_autosummary/eta.util.tt.match.num_var", "_autosummary/eta.util.tt.match.ok", "_autosummary/eta.util.tt.match.p_var", "_autosummary/eta.util.tt.match.position_index", "_autosummary/eta.util.tt.match.pred_var_any", "_autosummary/eta.util.tt.match.q_var", "_autosummary/eta.util.tt.match.s_var", "_autosummary/eta.util.tt.match.s_variant_of_p_var", "_autosummary/eta.util.tt.match.seq_var", "_autosummary/eta.util.tt.match.soft_var", "_autosummary/eta.util.tt.match.spec_function", "_autosummary/eta.util.tt.match.underlying_feat", "_autosummary/eta.util.tt.match.val", "_autosummary/eta.util.tt.parse", "_autosummary/eta.util.tt.parse.attachfeat", "_autosummary/eta.util.tt.parse.from_lisp_dirs", "_autosummary/eta.util.tt.parse.from_lisp_file", "_autosummary/eta.util.tt.parse.init_node", "_autosummary/eta.util.tt.parse.merge_feats", "_autosummary/eta.util.tt.parse.merge_trees", "_autosummary/eta.util.tt.parse.readrules", "_autosummary/eta.util.tt.preds", "_autosummary/eta.util.tt.preds.affirm_adv", "_autosummary/eta.util.tt.preds.atom", "_autosummary/eta.util.tt.preds.comma", "_autosummary/eta.util.tt.preds.expr", "_autosummary/eta.util.tt.preds.lex_ulf", "_autosummary/eta.util.tt.preds.lst", "_autosummary/eta.util.tt.preds.modal", "_autosummary/eta.util.tt.preds.non_neg", "_autosummary/eta.util.tt.preds.non_neg_mod", "_autosummary/eta.util.tt.preds.not_medicine_gen", "_autosummary/eta.util.tt.preds.not_non_alcoholic", "_autosummary/eta.util.tt.preds.prefix_each", "_autosummary/eta.util.tt.preds.quote_to_list", "_autosummary/eta.util.tt.preds.split_sentences", "_autosummary/eta.util.tt.preds.test", "_autosummary/eta.util.tt.preds.zero", "_autosummary/eta.util.ulf", "_autosummary/eta.util.ulf.lex", "_autosummary/eta.util.ulf.lex.stem_superlative", "_autosummary/eta.util.ulf.lex.to_ulf", "api", "index"], "filenames": ["_autosummary/eta.rst", "_autosummary/eta.config.rst", "_autosummary/eta.config.lissa_gpt.rst", "_autosummary/eta.config.lissa_gpt.config.rst", "_autosummary/eta.config.lissa_rule.rst", "_autosummary/eta.config.lissa_rule.config.rst", "_autosummary/eta.config.sophie_gpt.rst", "_autosummary/eta.config.sophie_gpt.config.rst", "_autosummary/eta.config.sophie_offline.rst", "_autosummary/eta.config.sophie_offline.config.rst", "_autosummary/eta.config.test.rst", "_autosummary/eta.config.test.config.rst", "_autosummary/eta.constants.rst", "_autosummary/eta.constants.ANSWER.rst", "_autosummary/eta.constants.ARTICULATE_TO.rst", "_autosummary/eta.constants.ASK.rst", "_autosummary/eta.constants.CERTAINTY_THRESHOLD.rst", "_autosummary/eta.constants.COREFERENCE_MODE.rst", "_autosummary/eta.constants.DEFAULT_IMPORTANCE.rst", "_autosummary/eta.constants.DEFAULT_START.rst", "_autosummary/eta.constants.EMBEDDING_DEFAULT_API.rst", "_autosummary/eta.constants.EMBEDDING_DEFAULT_MODEL.rst", "_autosummary/eta.constants.EMOTIONS_LIST.rst", "_autosummary/eta.constants.EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT.rst", "_autosummary/eta.constants.HERE.rst", "_autosummary/eta.constants.IO_PATH.rst", "_autosummary/eta.constants.KEY_PATH.rst", "_autosummary/eta.constants.ME.rst", "_autosummary/eta.constants.NOOP.rst", "_autosummary/eta.constants.NOOP_GEN.rst", "_autosummary/eta.constants.NOOP_YOU.rst", "_autosummary/eta.constants.NOW.rst", "_autosummary/eta.constants.PARAPHRASE_TO.rst", "_autosummary/eta.constants.REACT_TO.rst", "_autosummary/eta.constants.REASONING_DEPTH_LIMIT.rst", "_autosummary/eta.constants.RECENCY_CUTOFF.rst", "_autosummary/eta.constants.REPLY_TO.rst", "_autosummary/eta.constants.RESPOND_TO.rst", "_autosummary/eta.constants.SAY_BYE.rst", "_autosummary/eta.constants.SAY_TO.rst", "_autosummary/eta.constants.SLEEPTIME.rst", "_autosummary/eta.constants.SPEECH_ACTS.rst", "_autosummary/eta.constants.SYMTAB_PATH.rst", "_autosummary/eta.constants.TELIC_VERBS.rst", "_autosummary/eta.constants.YOU.rst", "_autosummary/eta.core.rst", "_autosummary/eta.core.eta.rst", "_autosummary/eta.core.eta.DialogueState.rst", "_autosummary/eta.core.eta.ProcessManager.rst", "_autosummary/eta.core.eta.eta.rst", "_autosummary/eta.core.eta.main.rst", "_autosummary/eta.core.execution.rst", "_autosummary/eta.core.execution.execute_say_bye.rst", "_autosummary/eta.core.execution.execute_say_to.rst", "_autosummary/eta.core.execution.execution_loop.rst", "_autosummary/eta.core.execution.fail_curr_step.rst", "_autosummary/eta.core.execution.get_action.rst", "_autosummary/eta.core.execution.inquire_truth_of_curr_step.rst", "_autosummary/eta.core.execution.me_pred.rst", "_autosummary/eta.core.execution.process_condition_step.rst", "_autosummary/eta.core.execution.process_expected_step.rst", "_autosummary/eta.core.execution.process_intended_step.rst", "_autosummary/eta.core.execution.process_repetition_step.rst", "_autosummary/eta.core.execution.say_bye_step.rst", "_autosummary/eta.core.execution.say_to_step.rst", "_autosummary/eta.core.execution.you_pred.rst", "_autosummary/eta.core.perception.rst", "_autosummary/eta.core.perception.observe.rst", "_autosummary/eta.core.perception.perception_loop.rst", "_autosummary/eta.core.perception.process_observations.rst", "_autosummary/eta.core.perception.process_utterances.rst", "_autosummary/eta.core.planning.rst", "_autosummary/eta.core.planning.add_possible_actions_to_plan.rst", "_autosummary/eta.core.planning.answer_step.rst", "_autosummary/eta.core.planning.ask_step.rst", "_autosummary/eta.core.planning.equivalent_speech_acts.rst", "_autosummary/eta.core.planning.expand_condition_step.rst", "_autosummary/eta.core.planning.expand_plan_steps.rst", "_autosummary/eta.core.planning.expand_primitive_step.rst", "_autosummary/eta.core.planning.expand_repetition_step.rst", "_autosummary/eta.core.planning.merge_plan_steps.rst", "_autosummary/eta.core.planning.paraphrase_step.rst", "_autosummary/eta.core.planning.plan_answer.rst", "_autosummary/eta.core.planning.plan_ask.rst", "_autosummary/eta.core.planning.plan_paraphrase.rst", "_autosummary/eta.core.planning.plan_react.rst", "_autosummary/eta.core.planning.plan_respond.rst", "_autosummary/eta.core.planning.planning_loop.rst", "_autosummary/eta.core.planning.react_step.rst", "_autosummary/eta.core.planning.relative_speech_act_step.rst", "_autosummary/eta.core.planning.reorder_plan_steps.rst", "_autosummary/eta.core.planning.reply_step.rst", "_autosummary/eta.core.planning.respond_step.rst", "_autosummary/eta.core.planning.say_to_step_from_utt.rst", "_autosummary/eta.core.planning.say_to_step_from_utts.rst", "_autosummary/eta.core.planning.schema_step.rst", "_autosummary/eta.core.planning.split_schema_step.rst", "_autosummary/eta.core.reasoning.rst", "_autosummary/eta.core.reasoning.infer_bottom_up.rst", "_autosummary/eta.core.reasoning.infer_top_down.rst", "_autosummary/eta.core.reasoning.reasoning_loop.rst", "_autosummary/eta.core.reasoning.suggest_possible_actions.rst", "_autosummary/eta.discourse.rst", "_autosummary/eta.discourse.DialogueTurn.rst", "_autosummary/eta.discourse.Utterance.rst", "_autosummary/eta.discourse.compress.rst", "_autosummary/eta.discourse.decompress.rst", "_autosummary/eta.discourse.get_prior_turn.rst", "_autosummary/eta.discourse.parse_utt_str.rst", "_autosummary/eta.discourse.presubst.rst", "_autosummary/eta.discourse.swap_duals.rst", "_autosummary/eta.embedding.rst", "_autosummary/eta.embedding.DummyEmbedder.rst", "_autosummary/eta.embedding.Embedder.rst", "_autosummary/eta.embedding.HFEmbedder.rst", "_autosummary/eta.embedding.STEmbedder.rst", "_autosummary/eta.embedding.sim.rst", "_autosummary/eta.lf.rst", "_autosummary/eta.lf.Condition.rst", "_autosummary/eta.lf.Domain.rst", "_autosummary/eta.lf.ELF.rst", "_autosummary/eta.lf.Eventuality.rst", "_autosummary/eta.lf.Individual.rst", "_autosummary/eta.lf.KEYWORDS.rst", "_autosummary/eta.lf.KEYWORDS_R.rst", "_autosummary/eta.lf.LF.rst", "_autosummary/eta.lf.Repetition.rst", "_autosummary/eta.lf.ULF.rst", "_autosummary/eta.lf.Var.rst", "_autosummary/eta.lf.and_prop_p.rst", "_autosummary/eta.lf.characterizes_prop_p.rst", "_autosummary/eta.lf.equal_prop_p.rst", "_autosummary/eta.lf.expectation_p.rst", "_autosummary/eta.lf.extract_set.rst", "_autosummary/eta.lf.from_lisp_dirs.rst", "_autosummary/eta.lf.from_lisp_file.rst", "_autosummary/eta.lf.is_set.rst", "_autosummary/eta.lf.make_set.rst", "_autosummary/eta.lf.not_prop_p.rst", "_autosummary/eta.lf.or_prop_p.rst", "_autosummary/eta.lf.parse_condition.rst", "_autosummary/eta.lf.parse_eventuality.rst", "_autosummary/eta.lf.parse_eventuality_list.rst", "_autosummary/eta.lf.parse_repetition.rst", "_autosummary/eta.lf.remove_type.rst", "_autosummary/eta.lf.set_union.rst", "_autosummary/eta.memory.rst", "_autosummary/eta.memory.Memory.rst", "_autosummary/eta.memory.MemoryStorage.rst", "_autosummary/eta.plan.rst", "_autosummary/eta.plan.PlanNode.rst", "_autosummary/eta.plan.PlanStep.rst", "_autosummary/eta.plan.expand_plan_node.rst", "_autosummary/eta.plan.get_first_plan_node.rst", "_autosummary/eta.plan.get_last_plan_node.rst", "_autosummary/eta.plan.init_plan_from_eventualities.rst", "_autosummary/eta.plan.insert_before_plan_node.rst", "_autosummary/eta.plan.merge_plan_nodes.rst", "_autosummary/eta.plan.visualize_plan.rst", "_autosummary/eta.schema.rst", "_autosummary/eta.schema.DialSchema.rst", "_autosummary/eta.schema.EpiSchema.rst", "_autosummary/eta.schema.ObjSchema.rst", "_autosummary/eta.schema.Schema.rst", "_autosummary/eta.schema.SchemaLibrary.rst", "_autosummary/eta.transducers.rst", "_autosummary/eta.transducers.base.rst", "_autosummary/eta.transducers.base.AffectTransducer.rst", "_autosummary/eta.transducers.base.AnswerTransducer.rst", "_autosummary/eta.transducers.base.AskTransducer.rst", "_autosummary/eta.transducers.base.GistTransducer.rst", "_autosummary/eta.transducers.base.ParaphraseTransducer.rst", "_autosummary/eta.transducers.base.PragmaticTransducer.rst", "_autosummary/eta.transducers.base.ReactionTransducer.rst", "_autosummary/eta.transducers.base.ReasonBottomUpTransducer.rst", "_autosummary/eta.transducers.base.ReasonTopDownTransducer.rst", "_autosummary/eta.transducers.base.ResponseTransducer.rst", "_autosummary/eta.transducers.base.SemanticTransducer.rst", "_autosummary/eta.transducers.base.SubplanTransducer.rst", "_autosummary/eta.transducers.base.Transducer.rst", "_autosummary/eta.transducers.gpt.rst", "_autosummary/eta.transducers.gpt.GPTAffectTransducer.rst", "_autosummary/eta.transducers.gpt.GPTAnswerTransducer.rst", "_autosummary/eta.transducers.gpt.GPTAskTransducer.rst", "_autosummary/eta.transducers.gpt.GPTGistTransducer.rst", "_autosummary/eta.transducers.gpt.GPTParaphraseTransducer.rst", "_autosummary/eta.transducers.gpt.GPTPragmaticTransducer.rst", "_autosummary/eta.transducers.gpt.GPTReactionTransducer.rst", "_autosummary/eta.transducers.gpt.GPTReasonBottomUpTransducer.rst", "_autosummary/eta.transducers.gpt.GPTReasonTopDownTransducer.rst", "_autosummary/eta.transducers.gpt.GPTResponseTransducer.rst", "_autosummary/eta.transducers.gpt.GPTSemanticTransducer.rst", "_autosummary/eta.transducers.gpt.GPTSubplanTransducer.rst", "_autosummary/eta.transducers.gpt.GPTTransducer.rst", "_autosummary/eta.transducers.gpt.PROMPTS.rst", "_autosummary/eta.transducers.gpt.VALIDATORS.rst", "_autosummary/eta.transducers.tt.rst", "_autosummary/eta.transducers.tt.TTAffectTransducer.rst", "_autosummary/eta.transducers.tt.TTAnswerTransducer.rst", "_autosummary/eta.transducers.tt.TTAskTransducer.rst", "_autosummary/eta.transducers.tt.TTGistTransducer.rst", "_autosummary/eta.transducers.tt.TTParaphraseTransducer.rst", "_autosummary/eta.transducers.tt.TTPragmaticTransducer.rst", "_autosummary/eta.transducers.tt.TTReactionTransducer.rst", "_autosummary/eta.transducers.tt.TTReasonBottomUpTransducer.rst", "_autosummary/eta.transducers.tt.TTReasonTopDownTransducer.rst", "_autosummary/eta.transducers.tt.TTResponseTransducer.rst", "_autosummary/eta.transducers.tt.TTSemanticTransducer.rst", "_autosummary/eta.transducers.tt.TTSubplanTransducer.rst", "_autosummary/eta.transducers.tt.TTTransducer.rst", "_autosummary/eta.util.rst", "_autosummary/eta.util.buffer.rst", "_autosummary/eta.util.buffer.clear.rst", "_autosummary/eta.util.buffer.enqueue.rst", "_autosummary/eta.util.buffer.enqueue_ordered.rst", "_autosummary/eta.util.buffer.get_item.rst", "_autosummary/eta.util.buffer.is_empty.rst", "_autosummary/eta.util.buffer.iterate.rst", "_autosummary/eta.util.buffer.max_importance.rst", "_autosummary/eta.util.buffer.pop_all.rst", "_autosummary/eta.util.buffer.pop_item.rst", "_autosummary/eta.util.file.rst", "_autosummary/eta.util.file.append_file.rst", "_autosummary/eta.util.file.clear.rst", "_autosummary/eta.util.file.ensure_dir_exists.rst", "_autosummary/eta.util.file.ensure_file_exists.rst", "_autosummary/eta.util.file.exists.rst", "_autosummary/eta.util.file.load_json.rst", "_autosummary/eta.util.file.read_file.rst", "_autosummary/eta.util.file.read_lines.rst", "_autosummary/eta.util.file.remove.rst", "_autosummary/eta.util.file.write_file.rst", "_autosummary/eta.util.file.write_json.rst", "_autosummary/eta.util.general.rst", "_autosummary/eta.util.general.append.rst", "_autosummary/eta.util.general.argmax.rst", "_autosummary/eta.util.general.atom.rst", "_autosummary/eta.util.general.clear_symtab.rst", "_autosummary/eta.util.general.cons.rst", "_autosummary/eta.util.general.cons_dict.rst", "_autosummary/eta.util.general.dict_get.rst", "_autosummary/eta.util.general.dict_rem.rst", "_autosummary/eta.util.general.dict_rem_val.rst", "_autosummary/eta.util.general.dict_substall_keys.rst", "_autosummary/eta.util.general.dual_var.rst", "_autosummary/eta.util.general.duplicate_var.rst", "_autosummary/eta.util.general.episode_name.rst", "_autosummary/eta.util.general.episode_var.rst", "_autosummary/eta.util.general.escaped_symbol_p.rst", "_autosummary/eta.util.general.flatten.rst", "_autosummary/eta.util.general.gentemp.rst", "_autosummary/eta.util.general.get_keyword_contents.rst", "_autosummary/eta.util.general.indent.rst", "_autosummary/eta.util.general.isquote.rst", "_autosummary/eta.util.general.linsum.rst", "_autosummary/eta.util.general.listp.rst", "_autosummary/eta.util.general.normalize.rst", "_autosummary/eta.util.general.push.rst", "_autosummary/eta.util.general.random_element.rst", "_autosummary/eta.util.general.rec_remove.rst", "_autosummary/eta.util.general.rec_replace.rst", "_autosummary/eta.util.general.remove_duplicates.rst", "_autosummary/eta.util.general.remove_nil.rst", "_autosummary/eta.util.general.replaceall.rst", "_autosummary/eta.util.general.squash.rst", "_autosummary/eta.util.general.standardize.rst", "_autosummary/eta.util.general.subst.rst", "_autosummary/eta.util.general.substall.rst", "_autosummary/eta.util.general.symbolp.rst", "_autosummary/eta.util.general.to_key.rst", "_autosummary/eta.util.general.variablep.rst", "_autosummary/eta.util.gpt.rst", "_autosummary/eta.util.gpt.apply_zip.rst", "_autosummary/eta.util.gpt.cost_gpt.rst", "_autosummary/eta.util.gpt.cost_tokens.rst", "_autosummary/eta.util.gpt.generate_gpt.rst", "_autosummary/eta.util.gpt.subst_examples.rst", "_autosummary/eta.util.gpt.subst_kwargs.rst", "_autosummary/eta.util.sexpr.rst", "_autosummary/eta.util.sexpr.balanced_substr.rst", "_autosummary/eta.util.sexpr.clean_lisp.rst", "_autosummary/eta.util.sexpr.clean_s_expr.rst", "_autosummary/eta.util.sexpr.convert_quotes.rst", "_autosummary/eta.util.sexpr.list_to_s_expr.rst", "_autosummary/eta.util.sexpr.list_to_str.rst", "_autosummary/eta.util.sexpr.parse_s_expr.rst", "_autosummary/eta.util.sexpr.read_lisp.rst", "_autosummary/eta.util.sexpr.standardize_symbols.rst", "_autosummary/eta.util.sexpr.write_lisp.rst", "_autosummary/eta.util.time.rst", "_autosummary/eta.util.time.TimePoint.rst", "_autosummary/eta.util.time.certainty_to_period.rst", "_autosummary/eta.util.time.has_elapsed_certainty_period.rst", "_autosummary/eta.util.time.now.rst", "_autosummary/eta.util.tt.rst", "_autosummary/eta.util.tt.choice.rst", "_autosummary/eta.util.tt.choice.choose_result_for.rst", "_autosummary/eta.util.tt.choice.is_tree_root.rst", "_autosummary/eta.util.tt.choice.is_tree_root_clause.rst", "_autosummary/eta.util.tt.choice.is_tree_root_list.rst", "_autosummary/eta.util.tt.match.rst", "_autosummary/eta.util.tt.match.check_position_index_syntax.rst", "_autosummary/eta.util.tt.match.dec_num_var.rst", "_autosummary/eta.util.tt.match.dot_atom.rst", "_autosummary/eta.util.tt.match.e_var.rst", "_autosummary/eta.util.tt.match.fill_template.rst", "_autosummary/eta.util.tt.match.flatten_sequences.rst", "_autosummary/eta.util.tt.match.hard_atom.rst", "_autosummary/eta.util.tt.match.indexed_element_of.rst", "_autosummary/eta.util.tt.match.isa.rst", "_autosummary/eta.util.tt.match.match.rst", "_autosummary/eta.util.tt.match.match_var.rst", "_autosummary/eta.util.tt.match.num_var.rst", "_autosummary/eta.util.tt.match.ok.rst", "_autosummary/eta.util.tt.match.p_var.rst", "_autosummary/eta.util.tt.match.position_index.rst", "_autosummary/eta.util.tt.match.pred_var_any.rst", "_autosummary/eta.util.tt.match.q_var.rst", "_autosummary/eta.util.tt.match.s_var.rst", "_autosummary/eta.util.tt.match.s_variant_of_p_var.rst", "_autosummary/eta.util.tt.match.seq_var.rst", "_autosummary/eta.util.tt.match.soft_var.rst", "_autosummary/eta.util.tt.match.spec_function.rst", "_autosummary/eta.util.tt.match.underlying_feat.rst", "_autosummary/eta.util.tt.match.val.rst", "_autosummary/eta.util.tt.parse.rst", "_autosummary/eta.util.tt.parse.attachfeat.rst", "_autosummary/eta.util.tt.parse.from_lisp_dirs.rst", "_autosummary/eta.util.tt.parse.from_lisp_file.rst", "_autosummary/eta.util.tt.parse.init_node.rst", "_autosummary/eta.util.tt.parse.merge_feats.rst", "_autosummary/eta.util.tt.parse.merge_trees.rst", "_autosummary/eta.util.tt.parse.readrules.rst", "_autosummary/eta.util.tt.preds.rst", "_autosummary/eta.util.tt.preds.affirm_adv.rst", "_autosummary/eta.util.tt.preds.atom.rst", "_autosummary/eta.util.tt.preds.comma.rst", "_autosummary/eta.util.tt.preds.expr.rst", "_autosummary/eta.util.tt.preds.lex_ulf.rst", "_autosummary/eta.util.tt.preds.lst.rst", "_autosummary/eta.util.tt.preds.modal.rst", "_autosummary/eta.util.tt.preds.non_neg.rst", "_autosummary/eta.util.tt.preds.non_neg_mod.rst", "_autosummary/eta.util.tt.preds.not_medicine_gen.rst", "_autosummary/eta.util.tt.preds.not_non_alcoholic.rst", "_autosummary/eta.util.tt.preds.prefix_each.rst", "_autosummary/eta.util.tt.preds.quote_to_list.rst", "_autosummary/eta.util.tt.preds.split_sentences.rst", "_autosummary/eta.util.tt.preds.test.rst", "_autosummary/eta.util.tt.preds.zero.rst", "_autosummary/eta.util.ulf.rst", "_autosummary/eta.util.ulf.lex.rst", "_autosummary/eta.util.ulf.lex.stem_superlative.rst", "_autosummary/eta.util.ulf.lex.to_ulf.rst", "api.rst", "index.rst"], "titles": ["eta", "eta.config", "eta.config.lissa_gpt", "eta.config.lissa_gpt.config", "eta.config.lissa_rule", "eta.config.lissa_rule.config", "eta.config.sophie_gpt", "eta.config.sophie_gpt.config", "eta.config.sophie_offline", "eta.config.sophie_offline.config", "eta.config.test", "eta.config.test.config", "eta.constants", "eta.constants.ANSWER", "eta.constants.ARTICULATE_TO", "eta.constants.ASK", "eta.constants.CERTAINTY_THRESHOLD", "eta.constants.COREFERENCE_MODE", "eta.constants.DEFAULT_IMPORTANCE", "eta.constants.DEFAULT_START", "eta.constants.EMBEDDING_DEFAULT_API", "eta.constants.EMBEDDING_DEFAULT_MODEL", "eta.constants.EMOTIONS_LIST", "eta.constants.EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT", "eta.constants.HERE", "eta.constants.IO_PATH", "eta.constants.KEY_PATH", "eta.constants.ME", "eta.constants.NOOP", "eta.constants.NOOP_GEN", "eta.constants.NOOP_YOU", "eta.constants.NOW", "eta.constants.PARAPHRASE_TO", "eta.constants.REACT_TO", "eta.constants.REASONING_DEPTH_LIMIT", "eta.constants.RECENCY_CUTOFF", "eta.constants.REPLY_TO", "eta.constants.RESPOND_TO", "eta.constants.SAY_BYE", "eta.constants.SAY_TO", "eta.constants.SLEEPTIME", "eta.constants.SPEECH_ACTS", "eta.constants.SYMTAB_PATH", "eta.constants.TELIC_VERBS", "eta.constants.YOU", "eta.core", "eta.core.eta", "eta.core.eta.DialogueState", "eta.core.eta.ProcessManager", "eta.core.eta.eta", "eta.core.eta.main", "eta.core.execution", "eta.core.execution.execute_say_bye", "eta.core.execution.execute_say_to", "eta.core.execution.execution_loop", "eta.core.execution.fail_curr_step", "eta.core.execution.get_action", "eta.core.execution.inquire_truth_of_curr_step", "eta.core.execution.me_pred", "eta.core.execution.process_condition_step", "eta.core.execution.process_expected_step", "eta.core.execution.process_intended_step", "eta.core.execution.process_repetition_step", "eta.core.execution.say_bye_step", "eta.core.execution.say_to_step", "eta.core.execution.you_pred", "eta.core.perception", "eta.core.perception.observe", "eta.core.perception.perception_loop", "eta.core.perception.process_observations", "eta.core.perception.process_utterances", "eta.core.planning", "eta.core.planning.add_possible_actions_to_plan", "eta.core.planning.answer_step", "eta.core.planning.ask_step", "eta.core.planning.equivalent_speech_acts", "eta.core.planning.expand_condition_step", "eta.core.planning.expand_plan_steps", "eta.core.planning.expand_primitive_step", "eta.core.planning.expand_repetition_step", "eta.core.planning.merge_plan_steps", "eta.core.planning.paraphrase_step", "eta.core.planning.plan_answer", "eta.core.planning.plan_ask", "eta.core.planning.plan_paraphrase", "eta.core.planning.plan_react", "eta.core.planning.plan_respond", "eta.core.planning.planning_loop", "eta.core.planning.react_step", "eta.core.planning.relative_speech_act_step", "eta.core.planning.reorder_plan_steps", "eta.core.planning.reply_step", "eta.core.planning.respond_step", "eta.core.planning.say_to_step_from_utt", "eta.core.planning.say_to_step_from_utts", "eta.core.planning.schema_step", "eta.core.planning.split_schema_step", "eta.core.reasoning", "eta.core.reasoning.infer_bottom_up", "eta.core.reasoning.infer_top_down", "eta.core.reasoning.reasoning_loop", "eta.core.reasoning.suggest_possible_actions", "eta.discourse", "eta.discourse.DialogueTurn", "eta.discourse.Utterance", "eta.discourse.compress", "eta.discourse.decompress", "eta.discourse.get_prior_turn", "eta.discourse.parse_utt_str", "eta.discourse.presubst", "eta.discourse.swap_duals", "eta.embedding", "eta.embedding.DummyEmbedder", "eta.embedding.Embedder", "eta.embedding.HFEmbedder", "eta.embedding.STEmbedder", "eta.embedding.sim", "eta.lf", "eta.lf.Condition", "eta.lf.Domain", "eta.lf.ELF", "eta.lf.Eventuality", "eta.lf.Individual", "eta.lf.KEYWORDS", "eta.lf.KEYWORDS_R", "eta.lf.LF", "eta.lf.Repetition", "eta.lf.ULF", "eta.lf.Var", "eta.lf.and_prop_p", "eta.lf.characterizes_prop_p", "eta.lf.equal_prop_p", "eta.lf.expectation_p", "eta.lf.extract_set", "eta.lf.from_lisp_dirs", "eta.lf.from_lisp_file", "eta.lf.is_set", "eta.lf.make_set", "eta.lf.not_prop_p", "eta.lf.or_prop_p", "eta.lf.parse_condition", "eta.lf.parse_eventuality", "eta.lf.parse_eventuality_list", "eta.lf.parse_repetition", "eta.lf.remove_type", "eta.lf.set_union", "eta.memory", "eta.memory.Memory", "eta.memory.MemoryStorage", "eta.plan", "eta.plan.PlanNode", "eta.plan.PlanStep", "eta.plan.expand_plan_node", "eta.plan.get_first_plan_node", "eta.plan.get_last_plan_node", "eta.plan.init_plan_from_eventualities", "eta.plan.insert_before_plan_node", "eta.plan.merge_plan_nodes", "eta.plan.visualize_plan", "eta.schema", "eta.schema.DialSchema", "eta.schema.EpiSchema", "eta.schema.ObjSchema", "eta.schema.Schema", "eta.schema.SchemaLibrary", "eta.transducers", "eta.transducers.base", "eta.transducers.base.AffectTransducer", "eta.transducers.base.AnswerTransducer", "eta.transducers.base.AskTransducer", "eta.transducers.base.GistTransducer", "eta.transducers.base.ParaphraseTransducer", "eta.transducers.base.PragmaticTransducer", "eta.transducers.base.ReactionTransducer", "eta.transducers.base.ReasonBottomUpTransducer", "eta.transducers.base.ReasonTopDownTransducer", "eta.transducers.base.ResponseTransducer", "eta.transducers.base.SemanticTransducer", "eta.transducers.base.SubplanTransducer", "eta.transducers.base.Transducer", "eta.transducers.gpt", "eta.transducers.gpt.GPTAffectTransducer", "eta.transducers.gpt.GPTAnswerTransducer", "eta.transducers.gpt.GPTAskTransducer", "eta.transducers.gpt.GPTGistTransducer", "eta.transducers.gpt.GPTParaphraseTransducer", "eta.transducers.gpt.GPTPragmaticTransducer", "eta.transducers.gpt.GPTReactionTransducer", "eta.transducers.gpt.GPTReasonBottomUpTransducer", "eta.transducers.gpt.GPTReasonTopDownTransducer", "eta.transducers.gpt.GPTResponseTransducer", "eta.transducers.gpt.GPTSemanticTransducer", "eta.transducers.gpt.GPTSubplanTransducer", "eta.transducers.gpt.GPTTransducer", "eta.transducers.gpt.PROMPTS", "eta.transducers.gpt.VALIDATORS", "eta.transducers.tt", "eta.transducers.tt.TTAffectTransducer", "eta.transducers.tt.TTAnswerTransducer", "eta.transducers.tt.TTAskTransducer", "eta.transducers.tt.TTGistTransducer", "eta.transducers.tt.TTParaphraseTransducer", "eta.transducers.tt.TTPragmaticTransducer", "eta.transducers.tt.TTReactionTransducer", "eta.transducers.tt.TTReasonBottomUpTransducer", "eta.transducers.tt.TTReasonTopDownTransducer", "eta.transducers.tt.TTResponseTransducer", "eta.transducers.tt.TTSemanticTransducer", "eta.transducers.tt.TTSubplanTransducer", "eta.transducers.tt.TTTransducer", "eta.util", "eta.util.buffer", "eta.util.buffer.clear", "eta.util.buffer.enqueue", "eta.util.buffer.enqueue_ordered", "eta.util.buffer.get_item", "eta.util.buffer.is_empty", "eta.util.buffer.iterate", "eta.util.buffer.max_importance", "eta.util.buffer.pop_all", "eta.util.buffer.pop_item", "eta.util.file", "eta.util.file.append_file", "eta.util.file.clear", "eta.util.file.ensure_dir_exists", "eta.util.file.ensure_file_exists", "eta.util.file.exists", "eta.util.file.load_json", "eta.util.file.read_file", "eta.util.file.read_lines", "eta.util.file.remove", "eta.util.file.write_file", "eta.util.file.write_json", "eta.util.general", "eta.util.general.append", "eta.util.general.argmax", "eta.util.general.atom", "eta.util.general.clear_symtab", "eta.util.general.cons", "eta.util.general.cons_dict", "eta.util.general.dict_get", "eta.util.general.dict_rem", "eta.util.general.dict_rem_val", "eta.util.general.dict_substall_keys", "eta.util.general.dual_var", "eta.util.general.duplicate_var", "eta.util.general.episode_name", "eta.util.general.episode_var", "eta.util.general.escaped_symbol_p", "eta.util.general.flatten", "eta.util.general.gentemp", "eta.util.general.get_keyword_contents", "eta.util.general.indent", "eta.util.general.isquote", "eta.util.general.linsum", "eta.util.general.listp", "eta.util.general.normalize", "eta.util.general.push", "eta.util.general.random_element", "eta.util.general.rec_remove", "eta.util.general.rec_replace", "eta.util.general.remove_duplicates", "eta.util.general.remove_nil", "eta.util.general.replaceall", "eta.util.general.squash", "eta.util.general.standardize", "eta.util.general.subst", "eta.util.general.substall", "eta.util.general.symbolp", "eta.util.general.to_key", "eta.util.general.variablep", "eta.util.gpt", "eta.util.gpt.apply_zip", "eta.util.gpt.cost_gpt", "eta.util.gpt.cost_tokens", "eta.util.gpt.generate_gpt", "eta.util.gpt.subst_examples", "eta.util.gpt.subst_kwargs", "eta.util.sexpr", "eta.util.sexpr.balanced_substr", "eta.util.sexpr.clean_lisp", "eta.util.sexpr.clean_s_expr", "eta.util.sexpr.convert_quotes", "eta.util.sexpr.list_to_s_expr", "eta.util.sexpr.list_to_str", "eta.util.sexpr.parse_s_expr", "eta.util.sexpr.read_lisp", "eta.util.sexpr.standardize_symbols", "eta.util.sexpr.write_lisp", "eta.util.time", "eta.util.time.TimePoint", "eta.util.time.certainty_to_period", "eta.util.time.has_elapsed_certainty_period", "eta.util.time.now", "eta.util.tt", "eta.util.tt.choice", "eta.util.tt.choice.choose_result_for", "eta.util.tt.choice.is_tree_root", "eta.util.tt.choice.is_tree_root_clause", "eta.util.tt.choice.is_tree_root_list", "eta.util.tt.match", "eta.util.tt.match.check_position_index_syntax", "eta.util.tt.match.dec_num_var", "eta.util.tt.match.dot_atom", "eta.util.tt.match.e_var", "eta.util.tt.match.fill_template", "eta.util.tt.match.flatten_sequences", "eta.util.tt.match.hard_atom", "eta.util.tt.match.indexed_element_of", "eta.util.tt.match.isa", "eta.util.tt.match.match", "eta.util.tt.match.match_var", "eta.util.tt.match.num_var", "eta.util.tt.match.ok", "eta.util.tt.match.p_var", "eta.util.tt.match.position_index", "eta.util.tt.match.pred_var_any", "eta.util.tt.match.q_var", "eta.util.tt.match.s_var", "eta.util.tt.match.s_variant_of_p_var", "eta.util.tt.match.seq_var", "eta.util.tt.match.soft_var", "eta.util.tt.match.spec_function", "eta.util.tt.match.underlying_feat", "eta.util.tt.match.val", "eta.util.tt.parse", "eta.util.tt.parse.attachfeat", "eta.util.tt.parse.from_lisp_dirs", "eta.util.tt.parse.from_lisp_file", "eta.util.tt.parse.init_node", "eta.util.tt.parse.merge_feats", "eta.util.tt.parse.merge_trees", "eta.util.tt.parse.readrules", "eta.util.tt.preds", "eta.util.tt.preds.affirm_adv", "eta.util.tt.preds.atom", "eta.util.tt.preds.comma", "eta.util.tt.preds.expr", "eta.util.tt.preds.lex_ulf", "eta.util.tt.preds.lst", "eta.util.tt.preds.modal", "eta.util.tt.preds.non_neg", "eta.util.tt.preds.non_neg_mod", "eta.util.tt.preds.not_medicine_gen", "eta.util.tt.preds.not_non_alcoholic", "eta.util.tt.preds.prefix_each", "eta.util.tt.preds.quote_to_list", "eta.util.tt.preds.split_sentences", "eta.util.tt.preds.test", "eta.util.tt.preds.zero", "eta.util.ulf", "eta.util.ulf.lex", "eta.util.ulf.lex.stem_superlative", "eta.util.ulf.lex.to_ulf", "&lt;no title&gt;", "Eta Dialogue Manager Documentation"], "terms": {"The": [0, 12, 17, 18, 19, 23, 25, 35, 40, 45, 46, 47, 51, 52, 53, 55, 57, 59, 60, 61, 62, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 97, 102, 103, 104, 107, 108, 111, 112, 113, 114, 115, 117, 120, 121, 122, 125, 126, 127, 128, 135, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 271, 273, 275, 278, 286, 288, 289, 291, 292, 295, 296, 300, 305, 310, 325, 327, 328, 332, 351, 352, 353], "top": [0, 71, 72, 87, 97, 99, 100, 117, 121, 146, 148, 211, 215, 220, 233, 235, 300, 306, 325, 332, 351, 353], "level": [0, 12, 17, 71, 87, 117, 118, 121, 126, 146, 148, 233, 252, 300, 306, 325, 332], "packag": [0, 196, 294], "dialogu": [0, 45, 46, 47, 49, 51, 52, 53, 54, 57, 60, 61, 66, 68, 70, 71, 87, 95, 97, 100, 102, 103, 107, 117, 121, 149, 151, 159, 160, 164], "manag": [0, 45, 46, 48], "configur": 1, "support": [1, 12, 17, 22, 41, 46, 47, 71, 77, 78, 102, 104, 166, 173, 295, 296], "agent": [1, 2, 4, 6, 8, 10, 12, 19, 46, 47, 49, 50, 102, 103, 107, 166, 173], "gpt": [2, 6, 8, 46, 165], "base": [2, 4, 6, 46, 47, 48, 51, 54, 102, 103, 104, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 165, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 271, 273, 289, 290, 333, 355], "lissa": [2, 4], "todo": [2, 4, 12, 43, 46, 47, 71, 72, 77, 79, 80, 90, 97, 98, 101, 117, 119, 120, 122, 125, 127, 128, 146, 148, 149, 151, 155, 157, 158, 159, 160, 166, 173, 355], "untest": [2, 4], "function": [2, 4, 6, 8, 10, 12, 23, 46, 47, 51, 66, 71, 80, 97, 102, 109, 111, 117, 125, 146, 148, 149, 158, 159, 160, 166, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 211, 217, 221, 233, 271, 273, 275, 278, 289, 293, 295, 300, 322, 324, 325, 333, 351], "sourc": [3, 5, 7, 9, 11, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353], "rule": [4, 166, 300, 310, 325, 328, 332, 333], "sophi": [6, 8], "offlin": 8, "version": [8, 146, 148, 149, 151, 233, 240, 241, 242, 294, 351, 353], "test": [8, 333], "purpos": [8, 10, 159, 162], "i": [8, 12, 14, 17, 19, 20, 21, 22, 23, 32, 43, 46, 47, 51, 53, 54, 57, 60, 62, 66, 68, 71, 72, 77, 78, 80, 87, 90, 97, 100, 102, 109, 110, 117, 118, 121, 126, 128, 129, 130, 131, 132, 136, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 152, 155, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 171, 176, 178, 180, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 219, 220, 233, 236, 240, 248, 250, 253, 255, 261, 263, 265, 268, 270, 271, 273, 275, 278, 282, 285, 289, 291, 295, 296, 300, 301, 305, 306, 309, 310, 315, 322, 324, 325, 326, 332, 351, 352, 353, 355], "e": [8, 12, 14, 17, 32, 43, 46, 47, 51, 60, 71, 78, 80, 97, 101, 102, 106, 108, 117, 118, 121, 123, 124, 128, 132, 141, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 176, 178, 196, 233, 244, 265, 268, 270, 278, 282, 283, 284, 285, 295, 296, 300, 305, 306, 309, 310, 322, 325, 326, 351, 353], "simpli": [8, 12, 17, 71, 111, 112, 295, 296, 300, 310], "output": [8, 12, 25, 46, 47, 51, 52, 53, 60, 102, 109, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 295, 296, 325, 332], "text": [8, 111, 112, 113, 114, 115, 271], "instead": [8, 71, 80, 117, 141, 149, 151], "us": [8, 12, 16, 17, 20, 21, 23, 24, 27, 29, 30, 31, 40, 42, 44, 46, 47, 51, 53, 55, 60, 71, 72, 77, 80, 82, 83, 84, 85, 86, 87, 97, 98, 99, 100, 101, 111, 112, 113, 114, 115, 117, 141, 142, 146, 148, 149, 151, 152, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 233, 237, 250, 271, 273, 275, 289, 290, 295, 296, 325, 332, 333, 351, 353], "simpl": [10, 97, 101, 351, 352], "global": [12, 289, 291], "other": [12, 20, 21, 46, 47, 71, 77, 117, 118, 121, 126, 128, 146, 147, 148, 149, 151, 159, 160, 161, 162, 163, 295, 296, 300, 310, 325, 332], "modul": [12, 35, 46, 117, 166, 180], "thi": [12, 16, 23, 35, 43, 46, 47, 48, 51, 52, 53, 54, 57, 60, 66, 68, 71, 72, 77, 79, 80, 87, 90, 94, 102, 103, 109, 117, 118, 120, 121, 122, 125, 126, 127, 128, 141, 142, 146, 147, 148, 149, 150, 151, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 196, 209, 233, 250, 270, 271, 275, 278, 289, 290, 294, 295, 296, 300, 309, 333, 351, 352, 353, 355], "contain": [12, 46, 47, 51, 54, 71, 76, 79, 102, 103, 104, 111, 113, 117, 125, 140, 141, 143, 146, 148, 149, 150, 151, 159, 160, 161, 162, 163, 166, 180, 193, 196, 209, 278, 284, 285, 294, 295, 296, 300, 305, 306, 310, 325, 327, 328], "definit": [12, 300, 324, 325, 328, 333], "varieti": 12, "ar": [12, 28, 43, 46, 47, 51, 53, 54, 59, 61, 66, 68, 71, 80, 87, 97, 100, 102, 109, 117, 123, 146, 148, 149, 151, 157, 159, 160, 161, 162, 163, 164, 166, 178, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 233, 263, 271, 278, 295, 296, 300, 301, 305, 306, 310, 325, 326, 333, 351, 353], "gener": [12, 46, 47, 71, 80, 82, 83, 84, 85, 86, 93, 94, 97, 98, 117, 128, 141, 146, 148, 149, 151, 158, 159, 160, 161, 162, 163, 164, 166, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 211, 214, 271, 273, 275, 333, 343, 351, 353], "can": [12, 71, 72, 97, 100, 149, 151, 166, 173, 180, 196, 295, 296, 300, 301], "import": [12, 18, 146, 147, 148, 211, 213, 214, 215, 218, 219, 220], "from": [12, 17, 25, 34, 46, 47, 51, 53, 54, 66, 67, 68, 69, 70, 71, 76, 79, 87, 93, 94, 97, 98, 100, 102, 103, 111, 112, 113, 114, 115, 117, 121, 125, 133, 135, 137, 144, 145, 146, 147, 148, 149, 150, 151, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 193, 196, 209, 211, 215, 218, 219, 220, 221, 227, 233, 241, 242, 251, 258, 259, 262, 271, 273, 275, 278, 280, 286, 294, 295, 296, 300, 305, 310, 325, 327, 332, 333, 346, 355], "attribut": [12, 14, 32, 46, 48, 117, 118, 126, 180], "sleeptim": 12, "0": [12, 16, 17, 18, 23, 40, 117, 118, 121, 126, 146, 147, 148, 211, 214, 233, 264, 289, 291, 292, 295, 296, 300, 301, 305, 310, 325, 332], "1": [12, 17, 23, 40, 117, 118, 121, 126, 146, 148, 159, 164, 233, 256, 264, 289, 291, 292, 300, 301, 306, 310, 325, 332], "time": [12, 31, 40, 46, 47, 51, 54, 71, 146, 147, 148, 271, 273, 275], "sleep": [12, 40], "between": [12, 40, 46, 111, 116, 146, 148, 149, 150, 151, 157, 159, 160, 161, 271, 276, 289, 291, 292], "each": [12, 40, 42, 45, 46, 47, 49, 66, 67, 70, 97, 100, 111, 112, 113, 114, 115, 117, 142, 146, 148, 149, 150, 151, 152, 158, 159, 160, 161, 162, 163, 164, 165, 166, 178, 180, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 217, 233, 234, 235, 243, 251, 254, 264, 267, 271, 273, 275, 278, 284, 295, 296, 300, 310, 325, 326, 333, 345, 347], "iter": [12, 40, 149, 211], "": [12, 17, 28, 29, 30, 40, 46, 47, 51, 60, 66, 67, 69, 71, 72, 77, 82, 83, 84, 85, 86, 95, 97, 101, 102, 103, 107, 111, 114, 117, 120, 123, 124, 125, 127, 136, 140, 141, 142, 143, 146, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 233, 248, 253, 268, 270, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 295, 296, 300, 305, 310, 324, 333, 346, 351, 353], "core": [12, 40, 180, 193, 196, 209, 294, 295, 300, 333], "process": [12, 34, 40, 45, 46, 47, 48, 49, 51, 59, 60, 61, 62, 66, 69, 70, 71, 97, 102, 149, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 295, 296], "type": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 55, 57, 59, 60, 61, 62, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 90, 97, 98, 99, 101, 102, 103, 104, 107, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 132, 134, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 233, 238, 250, 257, 263, 271, 273, 278, 283, 284, 285, 286, 289, 290, 291, 292, 295, 296, 300, 305, 309, 310, 324, 325, 332, 351, 352, 353], "float": [12, 16, 18, 40, 46, 47, 111, 112, 113, 114, 115, 117, 118, 121, 126, 146, 147, 148, 159, 163, 180, 193, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 271, 273, 275, 289, 291, 292], "reasoning_depth_limit": 12, "3": [12, 17, 34, 149, 150, 158, 271, 273, 275, 300, 301, 305, 310], "how": [12, 34, 146, 147, 295, 296, 325, 332], "mani": [12, 34, 35], "infer": [12, 20, 34, 46, 47, 66, 68, 97, 98, 99, 100, 102, 103, 111, 114, 166, 174, 175], "step": [12, 23, 34, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 95, 96, 97, 99, 100, 101, 149, 150, 151, 152, 155, 158, 159, 160, 161, 162, 163, 166, 175, 178, 189, 192, 205, 208], "direct": [12, 34, 97, 100, 149, 158, 196, 209, 271, 275, 295, 296, 325, 332], "observ": [12, 34, 51, 54, 66, 68, 69, 97, 100, 101, 117, 141, 166, 173, 187, 203], "take": [12, 34, 97, 100, 101, 166, 173, 300, 301], "dure": [12, 34, 146, 147, 159, 160, 161], "reason": [12, 34, 46, 180, 194, 195], "int": [12, 17, 19, 23, 34, 35, 146, 148, 149, 150, 158, 159, 160, 161, 162, 163, 164, 271, 273, 275], "embedding_default_api": 12, "http": [12, 20, 111, 114, 233, 250, 278, 294, 295, 300, 333, 355], "api": [12, 20, 26, 111, 114, 180, 271], "huggingfac": [12, 20, 111, 114], "co": [12, 20, 111, 114], "pipelin": [12, 20, 111, 114], "featur": [12, 20, 111, 114, 196, 209, 295, 296, 300, 309, 310, 325, 326, 327, 328, 330], "extract": [12, 20, 111, 114, 117, 133], "default": [12, 18, 19, 20, 21, 22, 46, 47, 102, 104, 107, 111, 115, 117, 118, 121, 141, 146, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 164, 211, 213, 214, 215, 219, 220, 271, 273, 275, 351, 352], "embed": [12, 20, 21, 46, 47, 117, 118, 121, 126, 146, 148, 159, 163, 300, 306], "url": [12, 20, 111, 114], "specifi": [12, 20, 21, 102, 107, 211, 214, 271, 295, 296, 325, 332], "an": [12, 13, 14, 15, 20, 21, 23, 29, 43, 46, 47, 51, 54, 57, 60, 61, 71, 79, 82, 83, 93, 102, 103, 104, 108, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 173, 180, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 221, 225, 233, 236, 238, 240, 242, 244, 248, 250, 255, 257, 271, 273, 275, 278, 281, 283, 284, 285, 287, 288, 289, 291, 294, 295, 296, 300, 301, 305, 306, 308, 309, 310, 315, 324, 325, 332, 351, 352], "embedd": [12, 20, 21, 46, 47, 111, 112, 114, 115, 117, 118, 121, 126, 146, 148, 159, 160, 161, 162, 163, 164], "str": [12, 13, 14, 15, 20, 21, 22, 24, 25, 26, 27, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 66, 67, 69, 70, 71, 72, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 134, 135, 141, 146, 147, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 250, 263, 265, 271, 273, 275, 278, 280, 283, 284, 285, 286, 288, 290, 295, 296, 300, 309, 324, 325, 326, 327, 328, 332, 351, 352, 353], "embedding_default_model": 12, "sentenc": [12, 21, 111, 114, 115, 333, 347], "transform": [12, 21, 111, 114, 115, 233, 265], "all": [12, 17, 21, 28, 41, 43, 46, 47, 51, 57, 66, 67, 69, 70, 71, 87, 97, 100, 111, 114, 115, 117, 125, 134, 146, 148, 149, 150, 159, 160, 161, 162, 163, 164, 211, 219, 233, 265, 278, 280, 295, 296, 325, 327, 328, 333], "distilroberta": [12, 21, 111, 114, 115], "v1": [12, 21, 111, 114, 115], "model": [12, 21, 111, 114, 115, 166, 180, 271, 273, 274, 275], "key_path": 12, "_kei": [12, 26], "directori": [12, 26, 46, 47, 117, 134, 149, 158, 159, 164, 196, 209, 221, 224, 325, 327], "check": [12, 26, 46, 47, 51, 54, 71, 95, 117, 129, 130, 131, 132, 136, 138, 139, 146, 147, 148, 159, 164, 211, 216, 221, 226, 233, 236, 248, 253, 255, 268, 270, 289, 292, 300, 301, 310, 322, 324, 351, 352], "kei": [12, 26, 46, 47, 146, 148, 233, 239, 240, 241, 242, 243, 251, 269, 295, 296, 325, 327, 328], "symtab_path": 12, "io": [12, 25, 42, 46, 47, 149, 158], "symtab": [12, 42], "json": [12, 42, 46, 221, 227, 232], "path": [12, 25, 42, 46, 47], "creat": [12, 42, 43, 46, 47, 51, 53, 71, 87, 102, 103, 111, 112, 113, 114, 115, 117, 137, 141, 149, 151, 155, 159, 160, 161, 162, 163, 164, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 221, 224, 225, 233, 234, 237, 239, 249, 271, 273, 325, 332, 333, 346], "symbol": [12, 42, 46, 47, 50, 117, 118, 120, 121, 125, 126, 127, 128, 141, 142, 146, 148, 149, 150, 151, 159, 160, 161, 162, 163, 233, 237, 245, 248, 250, 268, 270, 278, 280, 282, 284, 285, 287, 325, 332, 351, 352], "tabl": [12, 42, 46, 50, 146, 148, 233, 237, 250, 333], "dict": [12, 42, 46, 47, 49, 51, 52, 53, 111, 114, 117, 118, 119, 121, 125, 126, 141, 142, 146, 148, 159, 160, 161, 162, 163, 164, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 209, 221, 227, 232, 233, 240, 241, 242, 243, 269, 295, 296, 300, 309, 310, 325, 326, 327, 328, 330, 331, 332], "structur": [12, 42, 46, 47, 149, 150, 151, 155, 158, 165, 278, 283, 284, 285, 289, 290, 325, 332], "maintain": [12, 42, 46, 149, 151], "indic": [12, 42, 51, 60, 117, 118, 126, 295, 296, 300, 305], "uniqu": [12, 42, 46, 47, 149, 151, 159, 163, 233, 250], "coreference_mod": 12, "corefer": [12, 17, 35], "valu": [12, 17, 18, 23, 46, 47, 71, 76, 79, 117, 118, 120, 121, 125, 126, 127, 128, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 166, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 211, 213, 214, 217, 218, 233, 235, 238, 257, 260, 262, 263, 271, 277, 289, 291, 292, 300, 306], "reconstruct": [12, 17], "origin": [12, 17, 159, 160, 161, 162, 163, 211, 214, 295, 300, 333, 355], "ulf": [12, 14, 16, 17, 117, 118, 121, 123, 125, 126, 129, 130, 131, 133, 138, 139, 140, 143, 144, 159, 166, 172, 177, 196, 289, 290, 295, 296, 300, 305, 333, 338], "same": [12, 17, 146, 148, 295, 296], "2": [12, 17, 35, 233, 250, 271, 273, 275, 300, 301, 305, 310, 325, 332], "exclud": [12, 17, 233, 245, 270], "you": [12, 17, 28, 30, 46, 47, 102, 109, 110, 146, 148, 159, 160, 161, 162, 163, 233, 270, 295, 296], "refer": [12, 17, 35, 149, 151, 300, 305, 333, 343], "resolv": [12, 17], "substitut": [12, 17, 102, 109, 159, 160, 161, 162, 163, 233, 243, 266, 267], "canon": [12, 17, 117, 119, 122], "name": [12, 17, 46, 47, 66, 67, 111, 114, 115, 117, 119, 122, 134, 146, 148, 149, 151, 159, 164, 196, 209, 233, 246, 271, 273, 275, 295, 296, 325, 327, 328, 333, 351, 353], "onli": [12, 17, 35, 46, 51, 54, 59, 60, 62, 71, 72, 77, 97, 100, 146, 147, 148, 149, 151, 159, 164, 233, 269, 295, 296, 300, 306, 351, 352], "anaphora": [12, 17], "index": [12, 17, 24, 27, 31, 44, 146, 147, 148, 233, 270, 300, 301, 305, 308, 315], "np": [12, 17, 117, 123, 124, 289, 291], "g": [12, 17, 46, 47, 71, 80, 97, 101, 102, 106, 108, 117, 118, 128, 146, 148, 149, 151, 159, 160, 161, 162, 163, 165, 166, 233, 244, 278, 283, 284, 285, 295, 296, 300, 305, 309, 351, 353], "block": [12, 17], "recency_cutoff": 12, "look": [12, 35, 149, 151], "turn": [12, 35, 46, 47, 51, 53, 60, 66, 68, 70, 102, 103, 107, 300, 306], "back": [12, 35, 97, 100], "discours": [12, 35], "histori": [12, 35, 46, 47, 166, 167, 168, 169, 170, 171, 176], "find": [12, 35, 102, 107, 278, 279, 351, 352], "possibl": [12, 35, 46, 47, 51, 54, 71, 72, 77, 79, 97, 100, 101, 149, 151, 159, 160, 161, 162, 163, 271, 273], "expected_step_failure_period_coeffici": [12, 289, 291], "30": [12, 23], "coeffici": [12, 23, 146, 148, 233, 254], "map": [12, 23, 46, 47, 51, 61, 71, 77, 80, 117, 119, 121, 125, 141, 142, 146, 148, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 209, 278, 287, 289, 291, 295, 296, 300, 309, 310, 315, 325, 326, 327, 328], "certainti": [12, 16, 23, 51, 54, 149, 151, 159, 160, 161, 162, 163, 289, 291, 292], "score": [12, 16, 23, 97, 101, 111, 112, 113, 114, 115, 146, 147, 148, 233, 235], "period": [12, 23, 51, 54, 60, 289, 291, 292], "expect": [12, 23, 29, 30, 46, 47, 51, 54, 55, 57, 60, 61, 97, 99, 117, 132, 141, 149, 151, 159, 160, 161, 166, 289, 291, 300, 324], "failur": [12, 23, 46, 47, 51, 54, 55, 295, 296], "episod": [12, 23, 46, 47, 71, 79, 102, 103, 117, 118, 121, 126, 141, 142, 146, 147, 148, 149, 151, 155, 159, 160, 161, 162, 163, 164, 233, 244, 246, 247], "determin": [12, 23, 146, 148, 271, 273, 275, 289, 291, 295, 296, 300, 309, 324], "timer": [12, 23, 46, 47], "second": [12, 23, 71, 87, 97, 100, 102, 110, 117, 118, 120, 121, 125, 126, 127, 289, 290, 291, 333], "must": [12, 16, 23, 51, 54, 102, 104, 117, 125, 300, 305, 310, 324, 333], "pass": [12, 23, 111, 112, 113, 114, 115, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 209], "consid": [12, 23, 28, 43, 97, 100, 101], "fail": [12, 23, 29, 30, 46, 47, 51, 55, 60, 61, 97, 101], "move": [12, 23, 43, 149, 158], "plan": [12, 23, 46, 47, 51, 54, 55, 59, 60, 61, 62, 97, 99, 100, 101, 159, 160, 161, 162, 163, 166, 175, 178], "have": [12, 16, 19, 23, 46, 47, 71, 77, 97, 101, 111, 112, 113, 114, 115, 149, 151, 158, 180, 193, 300, 309, 324, 351, 352], "infinit": [12, 23], "A": [12, 16, 22, 23, 28, 29, 30, 41, 43, 46, 47, 49, 66, 67, 69, 70, 71, 72, 77, 97, 98, 99, 100, 101, 102, 103, 107, 108, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 125, 126, 141, 142, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 217, 233, 238, 250, 257, 263, 271, 273, 275, 278, 283, 284, 285, 286, 289, 290, 291, 292, 295, 296, 300, 301, 306, 309, 310, 325, 326, 327, 328, 332], "make": [12, 23, 71, 80, 87, 97, 100, 117, 125, 159, 160, 161, 162, 163, 166, 174, 175, 233, 243, 263, 267], "632": [12, 23], "correspond": [12, 23, 51, 53, 71, 95, 102, 103, 146, 147, 149, 151, 159, 160, 161, 162, 163, 166, 175, 178, 180, 193, 233, 254, 271, 277, 289, 290, 292, 293, 295, 296, 300, 324, 333], "certainty_threshold": 12, "7": [12, 16], "greater": [12, 16, 97, 100], "than": [12, 16, 97, 100, 101, 102, 109, 117, 141, 149, 151, 159, 160, 161, 162, 163, 166, 173, 295, 296, 300, 309, 333], "equal": [12, 16, 117, 131], "respons": [12, 16, 37, 51, 53, 66, 71, 86, 97, 166, 171, 176, 180, 194, 195, 271, 273, 275], "emotions_list": 12, "neutral": [12, 22, 102, 104], "sad": [12, 22, 102, 108], "happi": [12, 22, 102, 108], "worri": [12, 22], "angri": [12, 22], "list": [12, 22, 28, 41, 43, 46, 47, 51, 54, 66, 67, 69, 70, 71, 72, 79, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 126, 133, 134, 135, 137, 142, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 229, 233, 234, 235, 236, 238, 239, 240, 242, 249, 251, 254, 255, 257, 258, 259, 260, 261, 262, 263, 266, 267, 269, 271, 273, 275, 278, 282, 283, 284, 285, 286, 288, 295, 296, 300, 306, 308, 309, 310, 315, 325, 326, 327, 328, 332, 333, 339, 345, 346, 347], "emot": [12, 22, 102, 104, 108], "where": [12, 22, 51, 54, 66, 68, 117, 118, 121, 126, 142, 146, 147, 148, 149, 150, 151, 157, 166, 178, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 271, 295, 296, 300, 305, 310, 325, 326, 332], "first": [12, 22, 71, 72, 79, 87, 94, 97, 100, 102, 109, 110, 117, 118, 120, 121, 125, 126, 127, 141, 149, 152, 153, 155, 156, 157, 295, 296, 333], "element": [12, 22, 46, 47, 71, 117, 141, 233, 235, 258, 295, 296, 300, 305, 306, 308], "assum": [12, 22, 43, 46, 47, 51, 60, 71, 72, 117, 121, 146, 148, 149, 155, 159, 160, 161, 162, 163, 271, 300, 309], "io_path": [12, 46, 47], "input": [12, 25, 46, 47, 66, 68, 69, 70, 111, 112, 113, 114, 115, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 236, 253, 255, 270, 295, 296, 300, 301, 306, 310], "written": [12, 25], "read": [12, 25, 46, 47, 50, 117, 134, 135, 146, 147, 159, 160, 161, 162, 163, 164, 196, 209, 221, 228, 229, 278, 286, 325, 327, 328], "default_start": 12, "dialog": [12, 19], "v": [12, 13, 14, 15, 19, 28, 29, 30, 32, 33, 36, 37, 38, 39, 41, 43, 146, 148, 149, 151, 159, 160, 161, 163, 233, 239, 295, 296, 300, 305, 351, 353], "start": [12, 19, 46, 48, 50, 146, 147, 149, 150, 157, 159, 160, 161, 162, 163, 233, 270, 295, 296, 300, 310, 324], "schema": [12, 19, 46, 47, 71, 76, 77, 79, 95, 96, 117, 118, 126, 149, 150, 151, 155, 158, 196, 278, 295, 296], "none": [12, 19, 46, 47, 48, 51, 54, 59, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 90, 102, 103, 107, 117, 118, 121, 126, 128, 141, 146, 147, 148, 149, 151, 155, 159, 164, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 217, 233, 239, 271, 273, 275, 289, 290], "provid": [12, 19, 43, 46, 117, 121, 146, 148, 149, 155, 159, 160, 161, 162, 163, 164, 180, 196, 295, 296, 300, 305], "config": [12, 19, 46, 47, 49, 50], "default_import": 12, "5": [12, 18, 146, 147, 148, 149, 150, 158, 159, 160, 161, 162, 163, 164, 271, 273, 275], "new": [12, 18, 46, 47, 49, 71, 80, 87, 97, 98, 99, 100, 111, 112, 113, 114, 115, 117, 141, 146, 147, 148, 149, 156, 157, 166, 174, 175, 233, 237, 239, 245, 246, 247, 260, 263, 271], "fact": [12, 18, 46, 47, 51, 54, 57, 60, 66, 69, 97, 98, 99, 100, 117, 121, 146, 148, 159, 160, 161, 162, 163, 164, 166, 168, 169, 171, 174, 175, 176, 182, 183, 185, 188, 189, 190, 198, 199, 201, 204, 205, 206, 233, 250], "store": [12, 18, 102, 146, 147, 148, 149, 158, 159, 164, 211, 233, 242, 250, 289, 290, 325, 326], "memori": [12, 18, 46, 47, 66, 71, 79, 97, 98, 100], "me": [12, 46, 47, 102, 109, 110, 159, 160, 161, 162, 163, 295, 296], "variabl": [12, 24, 27, 31, 44, 46, 47, 51, 52, 53, 54, 57, 61, 71, 79, 117, 118, 120, 121, 125, 126, 127, 128, 141, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 180, 193, 233, 244, 245, 247, 268, 270, 271, 277, 300, 306, 310, 324, 333], "user": [12, 30, 44, 46, 47, 49, 50, 51, 60, 66, 67, 271, 273, 275, 300, 322], "now": [12, 71, 72, 146, 147, 148, 233, 270, 289], "current": [12, 24, 31, 46, 47, 51, 54, 55, 60, 71, 72, 77, 80, 87, 94, 97, 99, 100, 117, 119, 122, 128, 146, 147, 148, 149, 150, 151, 233, 250, 289, 290, 295, 296], "here": [12, 149, 155, 180, 196, 294, 295, 296, 300, 305, 306, 333], "locat": [12, 24, 300, 308], "say_to": 12, "sai": [12, 38, 39, 41, 43, 51, 52, 53, 71, 93, 94, 102, 109, 149, 151, 295, 296], "predic": [12, 13, 14, 15, 32, 33, 36, 37, 38, 39, 43, 46, 47, 51, 55, 60, 71, 96, 117, 129, 130, 131, 138, 139, 146, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 164, 300, 305, 309, 310, 324, 333, 338, 346, 347, 348], "event": [12, 13, 14, 15, 28, 29, 30, 32, 33, 36, 37, 38, 39, 43, 46, 47, 51, 55, 57, 59, 60, 61, 62, 71, 76, 78, 79, 97, 101, 117, 118, 121, 126, 146, 147, 148, 149, 151, 159, 160, 161, 162, 163, 166, 173, 175, 178, 289, 291], "paraphrase_to": 12, "paraphras": [12, 32, 41, 43, 71, 84, 149, 151, 166, 171, 180, 194, 195, 295, 296], "gist": [12, 32, 46, 47, 51, 53, 66, 68, 70, 102, 103, 166, 170, 171, 172, 177, 180, 185, 186, 191, 194, 195, 196, 201, 202, 207, 295, 296, 325, 332], "claus": [12, 32, 51, 53, 66, 68, 70, 102, 103, 166, 170, 171, 172, 177, 295, 296], "articulate_to": 12, "articul": [12, 14, 41, 43], "respond_to": 12, "respond": [12, 37, 41, 43, 71, 86, 97, 101], "reply_to": 12, "repli": [12, 36, 41, 43, 66, 68, 71, 80, 146, 148], "answer": [12, 41, 43, 71, 82, 97, 101, 166, 168, 180, 194, 195], "ask": [12, 41, 43, 71, 83, 180, 194, 195], "react_to": 12, "react": [12, 33, 41, 43, 71, 85, 166, 173], "say_by": 12, "bye": [12, 38, 41, 43, 51, 52], "goodby": [12, 38], "speech_act": 12, "speech": [12, 41, 66, 67, 68, 69, 70], "act": [12, 41], "telic_verb": 12, "telic": [12, 43, 51, 60, 146, 147, 148, 159, 162], "denot": [12, 29, 30, 43, 117, 119, 121, 159, 300, 310, 315], "nearli": [12, 43], "instantan": [12, 43, 46, 47, 51, 60, 146, 147, 148], "ultim": [12, 43, 71, 72, 333], "we": [12, 43, 46, 47, 51, 60, 71, 72, 97, 101, 102, 109, 117, 121, 146, 148, 149, 151, 155, 159, 160, 161, 162, 163, 271, 295, 296], "need": [12, 43, 71, 79, 90, 97, 98, 117, 121, 146, 148, 149, 151, 157, 159, 160, 161, 162, 163], "more": [12, 43, 146, 148, 149, 151, 159, 160, 161, 162, 163, 300, 310], "system": [12, 43, 46, 47, 71, 72, 97, 100, 101, 149, 150, 271, 273, 275, 295, 296, 333], "classif": [12, 43], "extern": [12, 29, 43, 221, 233, 250, 295, 296], "resourc": [12, 43], "noop_you": 12, "do": [12, 28, 30, 51, 54, 102, 106, 109, 117, 118, 121, 126, 159, 160, 161, 162, 163, 166], "d": [12, 28, 29, 30, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 66, 68, 70, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 95, 97, 98, 99, 100, 101, 117, 123, 124, 278, 283, 284, 285, 300, 305], "thing": [12, 28, 29, 30, 51, 54], "n": [12, 28, 29, 30, 102, 105, 117, 123, 124, 146, 148, 159, 160, 161, 162, 163, 164, 233, 235, 252], "formula": [12, 28, 29, 30, 117, 118, 120, 121, 125, 126, 127, 141, 142, 159, 160, 161, 162, 163, 166, 172, 173, 177, 295, 296, 350], "expr": [12, 28, 29, 30, 71, 82, 83, 84, 85, 86, 102, 103, 117, 120, 125, 127, 141, 142, 146, 148, 159, 160, 161, 162, 163, 164, 166, 172, 173, 177, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 278, 283, 284, 285, 286, 288, 295, 296, 300, 305, 306, 308, 310, 324, 333, 351, 353], "noop_gen": 12, "happen": [12, 28, 29], "noop": 12, "op": [12, 28, 51, 55], "main": [45, 46, 159, 163], "execut": [45, 46, 71, 79, 149], "run": 46, "user_config": 46, "respect": [46, 117, 141, 146, 148, 159, 160, 161, 162, 163, 271, 273, 300, 306, 310], "befor": [46, 47, 51, 60, 149, 150, 152, 156, 158, 233, 250], "spawn": [46, 48, 49], "multiprocess": [46, 48, 233, 250, 355], "loop": [46, 51, 54], "handl": [46, 48, 71, 278, 295, 296], "interpret": [46, 51, 53, 66, 68, 102, 103, 117, 141, 146, 147, 149, 166, 170, 233, 263, 300, 310], "note": [46, 47, 51, 54, 71, 72, 77, 79, 80, 90, 94, 97, 98, 101, 117, 119, 120, 122, 125, 127, 128, 146, 147, 148, 149, 151, 155, 157, 158, 159, 160, 161, 162, 163, 166, 173, 211, 233, 250, 270], "python": [46, 233, 250, 278, 300, 333, 355], "export": 46, "return": [46, 48, 51, 52, 53, 55, 57, 59, 60, 61, 62, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 90, 97, 98, 99, 101, 102, 107, 108, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 134, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 233, 238, 240, 244, 250, 257, 263, 271, 273, 275, 278, 283, 284, 285, 286, 289, 290, 291, 292, 293, 295, 296, 300, 305, 309, 310, 315, 319, 324, 325, 327, 328, 332, 351, 352, 353], "paramet": [46, 47, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 115, 117, 119, 120, 121, 122, 125, 127, 128, 134, 135, 141, 142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 250, 257, 263, 271, 273, 275, 278, 283, 284, 285, 286, 288, 289, 290, 291, 292, 300, 305, 309, 310, 324, 325, 326, 327, 328, 332, 351, 352, 353], "sinc": [46, 51, 60, 71, 79, 117, 121, 146, 148, 166, 173, 211, 295, 296, 300, 301, 306], "transduc": [46, 47, 51, 53, 71, 72, 80, 82, 83, 84, 85, 86, 97, 101], "object": [46, 47, 48, 102, 103, 104, 111, 113, 117, 118, 119, 121, 122, 125, 126, 128, 141, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 166, 179, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 233, 238, 257, 271, 273, 275, 289, 290], "mai": [46, 51, 54, 60, 71, 72, 77, 79, 97, 101, 117, 121, 128, 146, 148, 149, 151, 157, 158, 159, 160, 166, 168, 169, 171, 173, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 271, 295, 296, 300, 310], "within": [46, 47, 71, 79, 102, 104, 146, 148, 149, 150, 153, 154, 159, 160, 161, 162, 163, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 233, 234, 264, 271, 277, 278, 287, 289, 291, 325, 328], "On": [46, 117, 121, 159, 160, 161, 162, 163], "hand": [46, 117, 121, 159, 160, 161, 162, 163], "suppli": [46, 47, 146, 147], "format": [46, 66, 67, 69, 71, 72, 97, 101, 117, 118, 120, 121, 125, 126, 127, 142, 149, 150, 151, 159, 160, 161, 162, 163, 180, 193, 271, 278, 283, 288, 289, 290, 295, 296], "state": [46, 47, 49, 51, 52, 54, 57, 61, 71, 87, 97, 100], "entir": [46, 149, 150, 151], "through": [46, 149, 151, 300, 310, 324, 333], "dialoguest": [46, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 66, 68, 70, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 97, 98, 99, 100, 101], "class": [46, 47, 48, 51, 54, 102, 103, 104, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 146, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 289, 290], "which": [46, 47, 51, 54, 71, 77, 97, 100, 102, 103, 104, 117, 121, 146, 147, 148, 149, 151, 152, 159, 160, 161, 162, 163, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 250, 278, 295, 296, 300, 305, 310, 324], "share": [46, 233, 250], "processmanag": 46, "mutex": 46, "lock": 46, "prevent": 46, "data": [46, 47, 180, 193, 196, 209, 221, 222, 227, 231, 232, 233, 333], "race": [46, 233, 250], "underli": [46, 66, 68, 211], "addition": [46, 51, 54, 149], "set": [46, 47, 51, 52, 71, 72, 97, 100, 111, 112, 113, 114, 115, 117, 118, 121, 123, 124, 126, 133, 136, 137, 141, 142, 145, 146, 148, 159, 164, 166, 180, 196, 209, 233, 238, 243, 257, 267], "buffer": [46, 47, 51, 52, 53, 54, 60, 66, 68, 71, 87, 97, 100], "prioriti": [46, 47, 97, 101, 211], "queue": [46, 47, 211], "being": [46, 66, 67, 146, 147, 148, 295, 296, 300, 310], "over": [46, 149, 155], "session": [46, 47, 49, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "necessari": 46, "synchron": 46, "relev": [46, 97, 98, 100, 146, 148, 149, 151, 159, 160, 161, 162, 166, 168, 169, 171, 176], "aspect": 46, "complet": [46, 47], "seri": [46, 233, 265], "modif": [46, 71, 79, 87], "attempt": [46, 47, 51, 54, 57, 61, 71, 72, 77, 87, 97, 100, 295, 296], "ensur": [46, 159, 160, 161, 162, 163, 221, 224, 225], "incur": [46, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "some": [46, 71, 72, 77, 79, 97, 100, 101, 117, 122, 128, 146, 147, 148, 159, 160, 161, 162, 163, 164, 166, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 217, 233, 252, 260, 278, 295, 296, 300, 305, 310, 333], "monetari": [46, 47], "cost": [46, 47, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 271, 273, 274, 275], "appli": [46, 47, 51, 54, 61, 102, 109, 117, 118, 120, 121, 125, 126, 127, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 211, 217, 233, 265, 271, 273, 275, 300, 305], "case": [46, 47, 51, 54, 66, 67, 68, 146, 148, 149, 151, 157, 159, 160, 161, 162, 163, 295, 296, 300, 305, 310, 351, 352], "transduct": [46, 71, 77, 165, 166, 196, 294, 300, 301, 306], "after": [46, 51, 60, 117, 125, 149, 150, 152, 158, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 271, 273, 275], "config_ag": [46, 47, 49], "config_us": [46, 47, 49], "represent": [46, 47, 117, 118, 120, 121, 125, 126, 127, 149, 151, 159, 160, 161, 162, 163, 165, 278, 281, 283, 289, 290], "id": [46, 47, 149, 150, 151, 159, 163], "start_schema": [46, 47], "begin": [46, 47, 146, 147, 149, 150, 159, 160, 161, 196], "write": [46, 47, 51, 52, 60, 221, 231, 232, 278, 288], "output_buff": [46, 47], "utter": [46, 47, 66, 67, 70, 71, 93, 94, 102, 103, 108, 166, 167, 168, 169, 170, 176], "accumul": [46, 47, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "until": [46, 47, 51, 54, 71, 79, 117, 126, 180, 193, 295, 296], "readi": [46, 47], "them": [46, 47, 66, 69, 97, 100, 117, 121, 146, 148, 159, 164, 196, 209, 295, 296, 300, 306], "listen": [46, 47], "step_failure_tim": [46, 47], "posix": [46, 47, 289, 290, 292, 293], "record": [46, 47, 149, 151, 289, 290], "track": [46, 47], "quit_convers": [46, 47, 51, 52], "whether": [46, 47, 51, 55, 57, 59, 60, 61, 62, 71, 95, 111, 115, 117, 125, 129, 130, 131, 132, 136, 138, 139, 146, 147, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 164, 165, 211, 216, 233, 236, 255, 289, 292, 300, 309, 310, 324, 351, 352], "quit": [46, 47], "bool": [46, 47, 51, 55, 57, 59, 60, 61, 62, 111, 115, 117, 141, 146, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 164, 211, 215, 216, 219, 220, 221, 226, 289, 292, 300, 309, 324], "associ": [46, 47, 102, 103, 117, 121, 149, 151, 159, 160, 161, 162, 295, 296], "comput": [46, 47, 111, 112, 113, 114, 115, 116, 146, 148, 159, 160, 161, 162, 163, 164, 233, 254, 295, 296], "perform": [46, 47, 71, 80, 165, 166, 180, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "retriev": [46, 47, 51, 53, 71, 80, 97, 98, 100, 102, 107, 146, 148, 159, 160, 161, 162, 163, 164], "librari": [46, 47, 71, 95, 159, 164], "form": [46, 47, 66, 67, 117, 120, 121, 125, 127, 133, 145, 159, 160, 161, 162, 163, 166, 172, 177, 233, 263, 271, 278, 283, 284, 285, 286, 288, 295, 296, 300, 306, 310, 325, 326, 332, 350], "knowledg": [46, 47, 71, 80, 97, 98, 166, 168, 169, 171, 176], "schemalibrari": [46, 47, 159], "concept_alias": [46, 47], "concept_set": [46, 47], "init_knowledg": [46, 47], "initi": [46, 47, 48, 49, 117, 119, 146, 147, 149, 155, 180, 193, 194, 196, 209, 233, 245, 261, 271, 273, 275, 289, 290, 325, 329], "semant": [46, 47, 51, 53, 66, 68, 70, 102, 103, 117, 121, 146, 166, 177, 295, 296], "eventu": [46, 47, 51, 55, 57, 60, 61, 66, 69, 70, 71, 76, 78, 79, 97, 98, 99, 101, 117, 118, 126, 132, 134, 135, 140, 141, 142, 143, 146, 147, 148, 149, 151, 155, 159, 160, 161, 162, 163, 166, 168, 169, 171, 173, 174, 175, 176, 178, 233, 250], "schema_inst": [46, 47], "instanc": [46, 47, 159, 160, 161, 162, 163, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "due": [46, 47, 71, 77, 146, 148, 149, 333], "node": [46, 47, 149, 150, 151, 152, 153, 154, 155, 156, 157, 325, 329], "plannod": [46, 47, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 90, 149, 152, 153, 154, 155, 156, 157], "reference_list": [46, 47], "equality_set": [46, 47], "conversation_log": [46, 47, 166, 167, 168, 169, 170, 171, 176, 181, 182, 183, 184, 185, 190, 197, 198, 199, 200, 201, 206], "dialogueturn": [46, 47, 102, 107, 166, 167, 168, 169, 170, 171, 176], "memorystorag": [46, 47, 146], "timegraph": [46, 47], "get_io_path": [46, 47], "fname": [46, 47, 117, 135, 159, 164, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 278, 286, 288, 325, 328], "get": [46, 47, 117, 118, 120, 121, 125, 126, 127, 146, 147, 148, 149, 150, 151, 153, 154, 159, 160, 161, 162, 163, 164, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 211, 215, 218, 233, 251], "file": [46, 47, 117, 134, 135, 159, 164, 233, 250, 278, 280, 286, 288, 325, 327, 328, 333], "given": [46, 47, 66, 67, 71, 72, 95, 102, 107, 117, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 134, 136, 138, 139, 141, 146, 148, 149, 150, 151, 152, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 170, 171, 174, 175, 178, 211, 213, 215, 219, 220, 221, 222, 228, 231, 233, 235, 238, 243, 244, 248, 250, 253, 257, 259, 261, 263, 264, 267, 268, 270, 271, 273, 274, 289, 290, 292, 295, 296, 300, 301, 305, 309, 310, 319, 324, 351, 353], "get_perception_serv": [46, 47], "regist": [46, 47, 48], "percept": [46, 47], "server": [46, 47, 48, 66, 67, 68], "get_specialist_serv": [46, 47], "specialist": [46, 47], "get_user_id": [46, 47], "get_step_failure_tim": [46, 47], "reset_step_failure_tim": [46, 47], "reset": [46, 47], "get_quit_convers": [46, 47], "convers": [46, 47, 51, 52, 53, 66, 68, 102, 107, 166, 167, 168, 169, 170, 171, 176], "set_quit_convers": [46, 47], "is_schema": [46, 47, 159, 164], "exist": [46, 47, 71, 77, 80, 90, 102, 107, 159, 164, 221, 224, 225, 230, 233, 239], "has_plan": [46, 47], "ha": [46, 47, 48, 51, 54, 60, 117, 118, 121, 126, 149, 159, 289, 292, 300, 309], "get_plan": [46, 47], "set_plan": [46, 47], "do_continu": [46, 47], "continu": [46, 47, 295, 296], "init_plan_from_schema": [46, 47], "arg": [46, 47, 71, 77, 159, 160, 161, 162, 163, 179, 295, 296], "along": [46, 47], "argument": [46, 47, 71, 96, 111, 112, 113, 114, 115, 146, 148, 159, 160, 161, 162, 163, 166, 180, 193, 196, 209, 271, 272, 295, 296, 300, 305, 310], "instanti": [46, 47, 71, 76, 79, 146, 148, 159, 160, 161, 162, 163, 180, 196, 295, 296], "bind": [46, 47, 51, 52, 53, 54, 57, 61, 117, 118, 120, 121, 125, 126, 127, 128, 149, 150, 151, 159, 160, 161, 162, 163], "occur": [46, 47, 117, 118, 126, 149, 155, 159, 160, 161, 162, 163, 233, 250, 289, 291, 300, 306], "header": [46, 47, 71, 77, 111, 114, 159, 160, 161, 162, 163, 164], "ani": [46, 47, 51, 53, 54, 66, 68, 71, 76, 77, 79, 97, 100, 102, 103, 107, 117, 118, 120, 121, 125, 126, 127, 149, 151, 166, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 262, 271, 272, 273, 275, 276, 278, 282, 295, 296, 300, 310, 324, 325, 331, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344], "It": [46, 47, 71, 80, 102, 109, 146, 148, 149, 151, 300, 306], "when": [46, 47, 71, 76, 79, 102, 109, 351, 352], "flat": [46, 47, 196, 209], "futur": [46, 47, 71, 72, 77, 97, 101, 146, 148, 149, 150, 155, 158], "might": [46, 47, 71, 72, 149, 155, 159, 160, 161, 162, 163], "want": [46, 47, 102, 109, 117, 121, 159, 160, 161], "add": [46, 47, 71, 72, 117, 119, 122, 146, 148, 149, 150, 151, 159, 164, 233, 239, 265], "annot": [46, 47, 159, 160, 180, 193, 271, 272, 276], "abstract": [46, 47, 111, 113, 117, 125, 149, 150, 151, 159, 163, 166, 180, 193, 196, 209], "hierarchi": [46, 47], "would": [46, 47, 146, 148, 300, 306], "ad": [46, 47, 51, 53, 54, 66, 68, 71, 72, 87, 97, 100, 146, 148, 149, 150, 152, 155, 159, 160, 161, 162, 163, 164], "superstep": [46, 47, 149, 150, 151, 152], "defin": [46, 47, 111, 113, 117, 119, 120, 121, 122, 125, 127, 128, 146, 148, 159, 164, 165, 166, 180, 196, 289, 291, 295, 300, 305, 309, 310, 322, 333], "sequenti": [46, 47, 149, 155], "howev": [46, 47, 71, 77, 146, 148, 233, 250, 300, 306], "relat": [46, 47, 149, 151, 155, 159, 160, 161], "should": [46, 47, 51, 52, 71, 72, 80, 102, 107, 146, 147, 148, 149, 150, 151, 156, 157, 159, 160, 161, 162, 163, 166, 168, 169, 171, 173, 176, 180, 193, 233, 250, 263, 289, 291, 300, 301, 325, 332, 333], "impos": [46, 47, 71, 90, 97, 100], "differ": [46, 47, 71, 97, 101, 146, 148, 159, 166, 196, 289, 292], "order": [46, 47, 102, 107, 146, 148, 149, 151, 158, 159, 160, 161, 162, 163, 211, 214, 233, 261, 333], "result": [46, 47, 51, 53, 66, 68, 97, 101, 149, 150, 159, 160, 161, 162, 163, 166, 168, 169, 171, 176, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 271, 273, 275, 295, 296, 300, 305, 310], "immedi": [46, 47, 51, 52, 102, 107, 233, 251], "follow": [46, 47, 71, 79, 87, 102, 109, 146, 147, 148, 149, 151, 233, 251, 263, 271, 278, 282, 295, 296, 300, 301, 324], "also": [46, 47, 51, 60, 66, 68, 102, 109, 117, 118, 126, 149, 150, 151, 158, 159, 196, 295, 296], "section": [46, 47, 71, 79, 163], "context": [46, 47, 51, 54, 57, 60, 66, 68, 97, 99, 100, 146, 148, 166, 167, 168, 169, 170, 171, 175, 176], "well": [46, 47, 51, 53, 66, 68, 71, 72, 77, 97, 101, 102, 103, 117, 121, 128, 146, 148, 149, 151, 165, 180, 196, 209, 211, 215, 219, 220], "advance_plan": [46, 47], "advanc": [46, 47, 51, 54, 55, 59, 60, 61, 62, 149], "next": [46, 47, 149, 150, 295, 296], "signal": [46, 47, 51, 52], "instantiate_curr_step": [46, 47], "newli": [46, 47], "constant": [46, 47, 117, 121, 141, 146, 148, 159, 160, 161, 162, 163, 289, 291], "throughout": [46, 47, 51, 54, 57, 61, 117, 118, 120, 121, 125, 126, 127, 146, 148, 149, 150, 151, 233, 260, 266], "unless": [46, 47, 211, 214, 278, 287], "alreadi": [46, 47, 111, 112, 113, 114, 115, 149, 151], "been": [46, 47, 48, 111, 112, 113, 114, 115, 233, 250, 351, 352], "match": [46, 47, 51, 54, 57, 60, 71, 77, 146, 148, 166, 167, 295, 296, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 349], "recur": [46, 47, 149, 151, 295, 296], "add_to_buff": [46, 47], "x": [46, 47, 111, 116, 117, 133, 146, 148, 159, 297, 298, 299, 300, 302, 303, 304, 307, 309, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 349], "add_to_buffer_if_empti": [46, 47], "iff": [46, 47, 117, 132, 325, 332], "empti": [46, 47, 51, 54, 111, 112, 211, 212, 216, 221, 225, 233, 236, 240, 255, 300, 306, 310], "add_all_to_buff": [46, 47], "replace_buff": [46, 47], "replac": [46, 47, 51, 54, 71, 87, 102, 105, 109, 117, 118, 120, 121, 125, 126, 127, 146, 148, 149, 152, 157, 159, 160, 161, 162, 163, 233, 243, 250, 260, 263, 265, 267, 271, 272, 277], "singl": [46, 47, 102, 104, 111, 112, 113, 114, 115, 146, 147, 148, 166, 173, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 234, 249, 265, 278, 282, 295, 296, 300, 306], "replace_all_buff": [46, 47], "get_buff": [46, 47], "buffer_empti": [46, 47], "pop_buff": [46, 47], "pop": [46, 47, 71, 87, 97, 100, 211, 215, 219, 220, 233, 241, 242], "pop_all_buff": [46, 47], "get_conversation_log": [46, 47], "log_turn": [46, 47], "log": [46, 47, 51, 53, 66, 68, 70, 289, 291], "add_to_memori": [46, 47], "add_to_context": [46, 47], "access_from_context": [46, 47], "pred_patt": [46, 47, 146, 148], "access": [46, 47, 146, 147, 148, 149, 151], "pattern": [46, 47, 71, 72, 77, 146, 148, 165, 300, 306, 310, 325, 329, 332, 333], "flush_context": [46, 47, 146, 148], "flush": [46, 47, 51, 60], "get_memori": [46, 47], "storag": [46, 47, 146, 147, 148], "eval_truth_valu": [46, 47], "wff": [46, 47, 56, 58, 63, 64, 65, 71, 73, 74, 77, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 95, 96, 117, 118, 121, 126, 129, 130, 131, 132, 133, 136, 137, 138, 139, 142, 145, 146, 147, 148, 149, 151, 159, 160, 161, 162, 163], "evalu": [46, 47, 300, 305, 322, 333], "truth": [46, 47, 71, 76, 79], "apply_transduc": [46, 47], "var": [46, 47, 117, 118, 120, 121, 125, 126, 127, 149, 150, 151, 159, 160, 161, 162, 163, 233, 245, 271, 300, 319, 324], "val": [46, 47, 117, 118, 120, 121, 125, 126, 127, 128, 149, 150, 151, 159, 160, 161, 162, 163, 233, 242, 300], "unbind": [46, 47, 71, 79, 117, 118, 120, 121, 125, 126, 127, 128, 149, 150, 151, 159, 160, 161, 162, 163], "write_output_buff": [46, 47], "push_output_buff": [46, 47], "utt": [46, 47, 71, 93, 94, 166, 170, 184, 200], "push": [46, 47, 51, 53, 233], "onto": [46, 47, 51, 53], "print_schema_inst": [46, 47], "no_bind": [46, 47, 117, 118, 121, 126, 159, 160, 161, 162, 163], "fals": [46, 47, 111, 115, 117, 118, 121, 126, 141, 146, 148, 149, 150, 151, 158, 159, 160, 161, 162, 163, 211, 215, 219, 220, 233, 261, 271, 273], "print": [46, 47, 149, 151], "address": [46, 48], "authkei": [46, 48], "serial": [46, 48, 149, 151], "pickl": [46, 48], "ctx": [46, 48], "basemanag": [46, 48], "agent_config_nam": [46, 50], "user_config_nam": [46, 50], "clear": [46, 50, 149, 151, 211, 221, 233, 237], "method": [47, 48, 71, 78, 79, 103, 104, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 290, 295, 300, 325], "connect": [48, 300, 310], "get_serv": 48, "serve_forev": 48, "join": [48, 196], "timeout": 48, "classmethod": 48, "typeid": 48, "callabl": 48, "proxytyp": 48, "expos": 48, "method_to_typeid": 48, "create_method": 48, "true": [48, 51, 52, 54, 59, 117, 118, 121, 126, 141, 146, 147, 148, 149, 151, 159, 160, 161, 162, 163, 164, 211, 215, 219, 220, 233, 261, 263, 271, 273, 300, 310, 324, 325, 326], "initarg": 48, "primit": [51, 54, 61, 71, 77, 78], "action": [51, 54, 61, 71, 72, 87, 97, 100, 101, 149, 151, 166, 173], "execution_loop": 51, "either": [51, 54, 66, 67, 69, 111, 112, 113, 114, 115, 117, 118, 126, 134, 146, 148, 159, 164, 211, 213, 214, 233, 236, 295, 296, 300, 315, 324], "intend": [51, 54, 61, 71, 79, 97, 99, 149, 151, 159, 160, 161, 351, 352, 353], "one": [51, 54, 71, 77, 78, 80, 90, 97, 100, 102, 107, 109, 117, 121, 146, 147, 148, 149, 151, 165, 180, 193, 196, 233, 263, 295, 296, 300, 306, 310], "sever": [51, 54, 117, 121], "depend": [51, 54, 71, 76, 79, 149, 158, 196], "pend": [51, 54], "If": [51, 54, 57, 61, 71, 87, 111, 112, 113, 114, 115, 117, 141, 146, 148, 149, 151, 155, 159, 160, 161, 162, 163, 164, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 219, 220, 233, 263, 271, 273, 275, 295, 296, 300, 305, 309, 324], "condit": [51, 54, 59, 62, 71, 76, 78, 79, 117, 126, 140, 141, 159, 160, 161, 162, 233, 250], "repetit": [51, 54, 62, 71, 79, 117, 141, 143], "onc": [51, 54, 60, 146, 148, 149, 151], "elaps": [51, 54, 60, 289, 292], "character": [51, 54, 55, 117, 121, 130, 146, 148, 159], "success": [51, 54, 57, 60, 71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 90, 295, 296], "In": [51, 54, 66, 68, 71, 72, 97, 100, 117, 118, 126, 146, 148, 295, 296], "obtain": [51, 52, 53, 54, 295, 296, 300, 308, 324, 333], "wa": [51, 54, 57, 61, 71, 87, 102, 109, 146, 147, 149, 151], "content": [51, 54, 71, 87, 102, 104, 159, 160, 161, 162, 163, 164, 166, 167, 221, 223, 228, 233, 251, 263, 265, 271, 273, 275, 276], "modifi": [51, 54, 71, 87, 117, 135, 149, 151, 152, 159, 289, 325, 326, 333, 334, 342], "wasn": [51, 54], "t": [51, 54, 102, 105, 106, 117, 124, 149, 151, 221, 224, 225, 233, 250, 300, 306, 333, 343, 351, 352], "still": [51, 54, 71, 79, 97, 98, 102, 109], "becaus": [51, 54, 102, 109, 149, 151, 300, 306], "chang": [51, 54, 159, 160, 161], "so": [51, 54, 146, 148, 149, 151, 152, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214], "constantli": [51, 54], "expans": [51, 54, 71, 77, 78, 149, 151], "process_condition_step": 51, "process_repetition_step": 51, "satisfi": [51, 62], "process_expected_step": 51, "wait": [51, 60, 295, 296, 325, 332], "point": [51, 60, 146, 147, 149, 152, 271, 289, 290, 300, 305], "those": [51, 60, 97, 100, 117, 121, 146, 148, 159, 160, 161, 162, 163, 166, 174, 175], "essenti": [51, 60, 146, 147, 148, 295, 296], "becom": [51, 60, 117, 141, 146, 148, 149, 151, 300, 306], "outdat": [51, 60], "inquire_truth_of_curr_step": 51, "unifi": [51, 57, 71, 77, 80], "fail_curr_step": 51, "special": [51, 55, 66, 67, 71, 77, 117, 118, 123, 126, 132, 271, 295, 296, 300, 305], "process_intended_step": 51, "successfulli": [51, 61], "execute_say_to": 51, "affect": [51, 53, 102, 104, 108, 166, 167, 180, 194, 195], "potenti": [51, 53, 71, 80, 102, 108, 146, 148, 159], "deriv": [51, 53, 66, 68, 69, 70, 117, 121, 180, 193, 196, 209, 355], "oblig": [51, 53, 97, 101, 102, 103, 149, 151, 155, 159, 160], "planstep": [51, 52, 53, 149, 150], "cours": [51, 52, 53], "execute_say_by": 51, "end": [51, 52, 146, 147, 149, 150, 157, 159, 160, 161, 162, 163, 233, 257, 300, 305, 322], "flag": [51, 52], "remain": [51, 52], "perceiv": 66, "perception_loop": 66, "perceptu": [66, 67, 68], "pragmat": [66, 68, 70, 102, 103, 166, 172], "mean": [66, 68, 71, 79, 102, 103, 166, 172, 177, 295, 296, 300, 310], "previou": [66, 68, 71, 87, 97, 100, 101, 149, 150, 294], "collect": [66, 67, 159], "natur": [66, 67, 69, 71, 72, 97, 101, 117, 118, 120, 121, 124, 125, 126, 127, 159, 160, 161, 162, 163, 295, 296], "languag": [66, 67, 69, 71, 72, 97, 101, 117, 118, 120, 121, 124, 125, 126, 127, 159, 160, 161, 162, 163, 166, 295, 296], "string": [66, 67, 69, 71, 72, 97, 101, 102, 108, 109, 111, 112, 113, 114, 115, 117, 119, 120, 121, 125, 127, 128, 146, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 221, 222, 228, 231, 233, 250, 252, 263, 265, 268, 269, 271, 275, 278, 281, 282, 283, 284, 285, 295, 296, 300, 309, 315, 324, 325, 326, 333], "lisp": [66, 67, 69, 71, 72, 97, 101, 117, 120, 125, 127, 134, 135, 159, 164, 196, 209, 233, 248, 278, 280, 283, 285, 286, 288, 294, 295, 300, 325, 327, 328, 333, 355], "express": [66, 67, 69, 71, 72, 97, 101, 117, 120, 121, 125, 127, 136, 140, 141, 143, 146, 148, 149, 151, 159, 160, 161, 162, 163, 164, 166, 172, 177, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 253, 278, 280, 281, 283, 284, 285, 286, 287, 288, 295, 296, 300, 305, 306, 308, 310, 324, 333, 335, 337, 346], "repres": [66, 67, 102, 103, 104, 108, 117, 118, 121, 126, 146, 147, 149, 150, 151, 159, 160, 161, 162, 278, 283], "logic": [66, 67, 117, 120, 121, 125, 127, 146, 147, 166, 172, 177, 350], "process_utter": 66, "process_observ": 66, "non": [66, 69, 159, 160, 161, 162, 233, 236, 244, 295, 296, 300, 324, 333, 344], "pars": [66, 69, 102, 108, 117, 121, 140, 141, 142, 143, 166, 172, 177, 278, 285, 295, 296], "includ": [71, 97, 101, 149, 150, 158, 166, 168, 169, 171, 176, 233, 255, 271], "expand": [71, 76, 77, 78, 79, 80, 87, 90, 102, 106, 149, 151, 152, 166, 173, 178], "merg": [71, 80, 87, 146, 148, 149, 157, 325, 330, 331], "reorder": [71, 87, 90], "hold": [71, 159, 160, 161], "whenev": 71, "wai": [71, 72], "planning_loop": 71, "suggest": [71, 87, 97, 100, 101], "updat": [71, 72, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 90, 146, 147, 148, 289, 290], "consist": [71, 87, 146, 147, 149, 180, 233, 269, 271, 273, 275, 295, 296, 325, 332], "substep": [71, 77, 87, 149, 151, 166, 178], "equival": [71, 80, 87, 233, 248, 300, 301], "accord": [71, 87, 90, 117, 141, 146, 148, 159, 160, 161, 162, 163, 233, 235, 271, 295, 296], "constraint": [71, 87, 90, 149, 155], "re": [71, 87, 159, 160, 161, 162, 163], "add_possible_actions_to_plan": 71, "improv": [71, 72, 77, 97, 101], "For": [71, 72, 102, 109, 211, 214, 233, 270], "extend": [71, 72, 146, 148, 149, 157, 165, 166], "polici": [71, 72], "k": [71, 72, 117, 123, 124, 233, 239, 240, 241, 242], "uncondition": [71, 72], "verifi": [71, 72], "done": [71, 72, 149, 152, 159, 160, 161, 162, 163], "insert": [71, 72, 146, 148, 149, 151, 152, 156, 233, 238, 257, 300, 305], "abl": [71, 72], "elsewher": [71, 72, 149, 158], "expand_plan_step": 71, "surfac": [71, 77, 149, 150, 158], "keyword": [71, 77, 117, 118, 124, 126, 140, 141, 143, 159, 160, 161, 162, 163, 196, 233, 251, 295, 296], "behavior": [71, 77, 80, 149, 151, 166], "whose": [71, 77, 78, 102, 107, 149, 150, 233, 263], "directli": [71, 77, 78, 80, 149, 156, 166, 168, 169, 171, 176, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 295, 296], "tree": [71, 77, 149, 151, 166, 196, 209, 294, 295, 296, 300, 301, 310, 325, 327, 328, 329, 331, 332], "certain": [71, 77, 102, 109], "merge_plan_step": 71, "hard": [71, 80], "code": [71, 80, 271, 273, 275, 278, 333], "adjac": [71, 80], "possibli": [71, 80, 111, 113, 146, 148, 180, 233, 238, 257, 271], "allow": [71, 80, 97, 101, 146, 148, 149, 155, 159, 160, 161, 162, 163, 166, 300, 301, 306, 333], "neural": [71, 80], "network": [71, 80], "llm": [71, 80, 166, 180, 193], "reorder_plan_step": 71, "stub": [71, 90, 351, 352], "implement": [71, 90, 97, 98, 117, 120, 125, 127, 146, 148, 166, 180, 193, 196, 209, 211, 294, 355], "expand_condition_step": 71, "its": [71, 76, 79, 117, 132, 146, 147, 159, 160, 161, 162, 163, 166, 172, 177, 196, 209], "option": [71, 76, 79, 102, 103, 107, 111, 112, 113, 114, 115, 117, 119, 121, 122, 128, 141, 142, 146, 147, 148, 149, 155, 159, 164, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 211, 217, 271, 273, 275, 289, 290, 325, 332], "inherit": [71, 76, 79, 149, 151, 155], "sub": [71, 76, 79, 117, 118, 123, 124, 126, 146, 148, 159, 160, 161, 233, 249], "expand_repetition_step": 71, "made": [71, 79, 333, 351, 352], "local": [71, 79, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "repeat": [71, 79, 117, 126], "appear": [71, 79, 149, 151], "outsid": [71, 79], "yet": [71, 79], "particip": [71, 79, 159, 160, 161, 162, 163], "unbound": [71, 79], "although": [71, 79, 211], "typic": [71, 79], "itself": [71, 79, 300, 309], "expand_primitive_step": 71, "plan_paraphras": 71, "subplan": [71, 82, 83, 84, 85, 86, 93, 94, 149, 150, 151, 152, 157, 166, 178], "plan_respond": 71, "plan_answ": 71, "plan_ask": 71, "plan_react": 71, "reaction": [71, 85, 97, 100, 101, 166, 173], "say_to_step_from_utt": 71, "just": [71, 94], "split": [71, 94, 96, 333, 347], "off": [71, 94], "schema_step": 71, "split_schema_step": 71, "wff1": [75, 117, 142], "wff2": [75, 117, 142], "reasoning_loop": 97, "recent": [97, 100, 146, 147, 148], "both": [97, 100, 102, 104, 146, 148, 165, 166], "down": [97, 99, 100], "bottom": [97, 98, 100, 180, 194, 195], "up": [97, 98, 100, 180, 194, 195, 271, 273, 275, 351, 352], "manner": [97, 98, 99, 100], "depth": [97, 100, 325, 332], "limit": [97, 100, 333, 351, 353], "below": [97, 100, 146, 148, 149, 151], "number": [97, 100, 146, 148, 149, 150, 158, 159, 160, 161, 162, 163, 164, 233, 245, 252, 264, 271, 273, 274, 275, 278, 279, 295, 296], "awai": [97, 100], "further": [97, 100, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "minimum": [97, 100, 271, 273], "approach": [97, 100], "infer_top_down": 97, "infer_bottom_up": 97, "suggest_possible_act": 97, "reconsid": [97, 101], "retri": [97, 101, 271, 273, 275], "desir": [97, 101, 300, 309], "place": [97, 101, 117, 135, 149, 151, 152, 271, 300, 305, 325, 326], "urgenc": [97, 101], "differenti": [97, 101], "kind": [97, 101], "even": [97, 101], "chit": [97, 101], "chat": [97, 101], "domain": [97, 101, 117, 333], "wish": [97, 101, 146, 148], "question": [97, 101, 166, 169], "higher": [97, 101], "statement": [97, 101], "tool": [102, 111, 146], "word": [102, 104, 108, 109, 117, 124, 166, 167, 181, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 278, 282, 295, 296, 300, 309, 310, 325, 326, 327, 328, 333, 338, 340, 341, 342, 343, 344, 346, 347, 351, 352, 353], "ep": [102, 103, 117, 118, 121, 126, 140, 141, 142, 143, 146, 147, 148, 149, 151, 159, 160, 161, 162, 163], "inform": [102, 103], "captur": [102, 103, 166, 172, 177], "drawn": [102, 103], "get_prior_turn": 102, "prior": [102, 107], "chronolog": [102, 107], "found": [102, 107, 149, 151, 180, 193, 196, 233, 240, 294, 295, 296, 351, 352], "parse_utt_str": 102, "prefix": [102, 108, 159, 160, 161, 162, 163, 164, 233, 245, 300, 324, 333, 345], "tag": [102, 108], "decompress": 102, "contract": [102, 105, 106], "full": [102, 106, 117, 121, 180, 196, 295, 296], "phrase": [102, 106], "don": [102, 106, 117, 124], "dont": [102, 106], "compress": 102, "auxiliari": [102, 105], "NOT": [102, 105, 300, 301], "combin": [102, 105, 146, 148, 166, 173, 196, 209, 233, 234, 271, 295, 296], "presubst": 102, "prepar": [102, 109], "call": [102, 109, 165, 271, 275, 289, 293, 295, 296, 300, 305, 351, 352], "swap_dual": [102, 109, 159, 160, 161, 162, 163], "avoid": [102, 109, 159, 160, 161, 162, 163, 333], "ungrammat": [102, 109], "exampl": [102, 109, 180, 184, 185, 193, 271, 273, 275, 276], "swap": [102, 109, 110, 159, 160, 161, 162, 163], "dual": [102, 109, 159, 160, 161, 162, 163, 233, 244], "pronoun": [102, 109, 110], "why": [102, 109], "stupid": [102, 109], "while": [102, 109], "correctli": [102, 109], "produc": [102, 109], "your": [102, 109], "brother": [102, 109], "are2": [102, 109], "preced": [102, 109, 149, 156], "similarli": [102, 109, 149], "were": [102, 109, 333], "were2": [102, 109], "was2": [102, 109], "you2": [102, 109], "last": [102, 109, 146, 148, 149, 152, 154, 157, 295, 296], "two": [102, 109, 117, 145, 159, 160, 161, 162, 163, 289, 292, 325, 330, 331], "conjunct": [102, 109, 117, 129], "subordin": [102, 109], "verb": [102, 109, 300, 310], "think": [102, 109], "believ": [102, 109], "know": [102, 109], "rather": [102, 109, 117, 141, 149, 151, 166, 173, 300, 309, 333], "person": [102, 110], "vice": [102, 110, 233, 244], "versa": [102, 110, 233, 244], "document": [111, 112, 113, 114, 115, 180, 196], "cosin": [111, 116], "similar": [111, 116, 146, 148, 159, 160, 161, 162, 163, 164], "These": [111, 300, 310], "serv": 111, "interfac": [111, 180], "invok": [111, 333], "variou": [111, 165, 166, 233], "minim": [111, 113, 117, 121], "precomput": [111, 112, 113, 114, 115], "rel": [111, 112, 113, 114, 115], "emb": [111, 112, 113, 114, 115, 117, 118, 121, 126, 146, 148, 159, 160, 161, 162, 163, 164], "queri": [111, 112, 113, 114, 115, 146, 148, 159, 160, 161, 162, 163, 164], "bypass": [111, 112, 113, 114, 115], "stembedd": 111, "parallel": [111, 115], "nativ": [111, 115], "sentencetransform": [111, 115], "enabl": [111, 115], "disabl": [111, 115], "hfembedd": 111, "host": [111, 114], "specif": [111, 114, 146, 148, 159, 160, 161, 162, 163, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 265, 289, 290, 295, 296, 333, 351, 352], "dummyembedd": 111, "sim": 111, "y": [111, 116, 117, 133], "vector": [111, 116, 117, 121, 159, 163, 233, 254, 256, 264], "plur": [117, 123, 124], "past": [117, 123, 124, 149, 150, 158], "pre": [117, 123, 124], "perf": [117, 123, 124], "prog": [117, 123, 124], "pasv": [117, 123, 124], "ka": [117, 123, 124], "ke": [117, 123, 124], "tht": [117, 123, 124], "fquan": [117, 123, 124], "nquan": [117, 123, 124], "nmod": [117, 123, 124], "amod": [117, 123, 124], "h": [117, 123, 124, 278, 285], "p": [117, 123, 124, 146, 148, 351, 353], "pred": [117, 123, 124, 146, 148, 149, 151, 300, 305, 310], "rep": [117, 123, 124], "poss": [117, 123, 124], "adv": [117, 123, 124], "f": [117, 123, 124, 278, 285, 300, 305], "voc": [117, 123, 124], "o": [117, 123, 124], "pu": [117, 123, 124], "cf": [117, 123, 124], "mod": [117, 123, 124], "most": [117, 123, 124, 146, 147, 148, 149, 150, 300, 310], "que": [117, 123, 124], "reserv": [117, 123], "oper": [117, 123, 165], "keywords_r": 117, "subset": [117, 124], "mirror": [117, 124], "punctuat": [117, 124, 233, 265], "remove_typ": 117, "atm": [117, 144], "remov": [117, 144, 146, 148, 159, 160, 161, 162, 163, 221, 229, 233, 241, 242, 259, 261, 262, 265, 278, 280, 281, 300, 306], "suffix": [117, 144, 233, 250], "atom": [117, 144, 233, 242, 278, 285, 300, 306, 309, 310, 324, 333, 351, 352], "individu": [117, 119, 128, 146, 148], "incomplet": [117, 119, 122, 128, 351, 353], "unus": [117, 119, 122, 128], "add_alias": [117, 119, 122], "alias": [117, 119, 122], "assign": [117, 118, 120, 121, 125, 126, 127, 128, 146, 148, 325, 326], "bound": [117, 121, 125, 128, 146, 147, 149, 150, 157, 159, 163], "though": [117, 128], "principl": [117, 128], "elf": [117, 118, 121, 125, 126, 159, 163], "thereof": [117, 120, 125, 127], "replacevar": [117, 118, 120, 121, 125, 126, 127], "var1": [117, 118, 120, 121, 125, 126, 127, 271], "var2": [117, 118, 120, 121, 125, 126, 127, 271], "get_formula": [117, 120, 125, 127], "to_nl": [117, 120, 125, 127], "convert": [117, 120, 125, 127, 149, 150, 233, 265, 269, 278, 282, 283, 284, 289, 290, 351, 353], "naiv": [117, 120, 125, 127], "ulf2english": [117, 120, 125, 127], "nl": [117, 118, 121, 126, 295, 296], "prob": [117, 118, 121, 126, 140, 143, 159, 160, 161, 162, 163], "subsum": [117, 121], "encapsul": [117, 121], "At": [117, 121], "highest": [117, 118, 121, 126, 146, 148], "fulli": [117, 121], "deindex": [117, 121], "build": [117, 121], "upward": [117, 121], "easili": [117, 121], "likewis": [117, 121, 146, 147], "requir": [117, 121], "disambigu": [117, 121], "scope": [117, 121, 159, 163], "henc": [117, 121], "regard": [117, 121, 146, 148, 325, 326], "upper": [117, 121, 351, 352], "thei": [117, 121, 159, 160, 161, 162, 163, 166], "simpler": [117, 121], "applic": [117, 121], "probabl": [117, 118, 121, 126, 141, 142, 146, 148, 159, 160, 161, 162, 163, 351, 352], "set_ep": [117, 118, 121, 126], "set_ulf": [117, 118, 121, 126], "set_elf": [117, 118, 121, 126], "set_prob": [117, 118, 121, 126], "get_ep": [117, 118, 121, 126, 146, 147], "get_nl": [117, 118, 121, 126], "get_ulf": [117, 118, 121, 126], "get_elf": [117, 118, 121, 126], "get_wff": [117, 118, 121, 126, 146, 147], "avail": [117, 118, 121, 126], "addit": [117, 118, 126, 146, 148, 295, 296], "basic": [117, 118, 126, 141, 233, 300, 310], "pair": [117, 118, 142, 271, 273, 275, 325, 332], "Such": [117, 118, 126], "try": [117, 118], "sequenc": [117, 118, 149, 157, 159, 166, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 233, 263, 271, 273, 275, 300, 305, 306, 310], "tupl": [117, 118, 146, 148, 149, 150, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 233, 263, 269, 271, 273, 275, 325, 332], "termin": [117, 126], "longer": [117, 126, 146, 147, 300, 306], "stop": [117, 126, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 271, 273, 275], "parse_eventu": 117, "prob_dict": [117, 140, 141, 142, 143], "otherwis": [117, 141, 159, 160, 161, 162, 163, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 271, 273, 275, 289, 290, 300, 310], "dictionari": [117, 141, 142, 325, 326], "abov": [117, 141, 149, 151, 295, 296], "parse_condit": 117, "parse_repetit": 117, "parse_eventuality_list": 117, "lst": [117, 136, 137, 142, 233, 234, 235, 236, 249, 251, 255, 258, 259, 260, 261, 262, 266, 267, 269, 278, 283, 284, 300, 310, 333, 345, 348], "altern": [117, 142], "ep1": [117, 142], "ep2": [117, 142], "from_lisp_fil": [117, 159, 164, 325], "from_lisp_dir": [117, 159, 164, 325], "dir": [117, 134, 149, 158, 159, 164, 325, 327], "recurs": [117, 134, 159, 164, 233, 249, 259, 260, 266, 278, 283, 284, 285, 286, 288, 295, 296, 325, 327], "expectation_p": 117, "intent": [117, 132], "subject": [117, 132], "extract_set": 117, "item": [117, 133, 137, 211, 213, 214, 215, 219, 220, 233, 261, 333, 341, 342], "make_set": 117, "is_set": 117, "set_union": 117, "lst1": [117, 145, 233, 238, 257], "lst2": [117, 145, 233, 238, 257], "union": [117, 145], "equal_prop_p": 117, "not_prop_p": 117, "neg": [117, 138, 146, 148, 300, 324, 333, 341, 342], "and_prop_p": 117, "or_prop_p": 117, "disjunct": [117, 139], "characterizes_prop_p": 117, "__eq__": [118, 121, 126, 147], "self": [118, 120, 121, 122, 125, 126, 127, 128, 147, 148, 150, 151, 160, 161, 162, 163, 164, 290], "__hash__": [118, 121, 126, 147], "hash": [118, 121, 126, 146, 147, 148, 333], "__str__": [118, 120, 121, 122, 125, 126, 127, 128, 147, 148, 150, 151, 160, 161, 162, 163, 164, 290], "tempor": [146, 147, 159, 160, 161], "numer": [146, 147, 149, 151, 289, 290], "start_tim": [146, 147], "earliest": [146, 147], "known": [146, 147], "upon": [146, 147, 149, 151, 180], "timepoint": [146, 147, 289], "end_tim": [146, 147], "latest": [146, 147, 148], "last_access": [146, 147], "mark": [146, 147, 300, 306], "thu": [146, 147], "update_last_access": [146, 147], "declar": [146, 147], "get_time_wff": [146, 147], "is_tel": [146, 147], "effici": [146, 148, 333], "lookup": [146, 148], "ep_ht": [146, 148], "wff_ht": [146, 148], "valid": [146, 148, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 233, 269, 300, 301, 306], "binari": [146, 148], "subj": [146, 148], "obj1": [146, 148], "obj2": [146, 148], "date": [146, 148], "actual": [146, 148, 166], "negat": [146, 148, 211], "kept": [146, 148], "posit": [146, 148, 211, 300, 301, 305, 315], "seem": [146, 148], "like": [146, 148, 166, 173, 196, 233, 244, 300, 301, 306], "sort": [146, 148], "contradict": [146, 148], "detect": [146, 148, 166, 167], "duplic": [146, 148, 159, 160, 161, 162, 163, 233, 245, 261, 325, 331], "e1": [146, 148, 159, 160, 161, 162, 163, 233, 244], "e3": [146, 148], "e4": [146, 148], "e5": [146, 148], "occurr": [146, 148], "somehow": [146, 148], "remove_from_context": [146, 148], "multipl": [146, 148, 166, 173, 196, 295, 296, 333, 347], "particular": [146, 148, 149, 151, 159, 164, 196, 209, 295, 296], "unclear": [146, 148], "partial": [146, 148, 149, 151], "account": [146, 148], "get_episod": [146, 148], "get_match": [146, 148], "block1": [146, 148], "block2": [146, 148], "scheme": [146, 148], "nest": [146, 148, 278, 283, 284, 285, 286, 288, 300, 308, 325, 332], "get_from_context": [146, 148], "remove_episod": [146, 148], "remove_match": [146, 148], "remove_episode_from_context": [146, 148], "remove_matching_from_context": [146, 148], "get_characterizing_episod": [146, 148], "does_characterize_episod": [146, 148], "coeff": [146, 148, 233, 254], "recenc": [146, 148], "salienc": [146, 148], "three": [146, 148], "criteria": [146, 148], "final": [146, 148, 271, 273, 275, 295, 296, 351, 352], "linear": [146, 148, 233, 254], "sum": [146, 148, 233, 254, 256], "multipli": [146, 148], "everi": [146, 148], "weight": [146, 148], "forget": [146, 148], "evict": [146, 148], "reduc": [146, 148], "size": [146, 148], "tbc": [146, 148], "perman": [146, 148], "too": [146, 148], "larg": [146, 148, 166], "tractabl": [146, 148], "fall": [146, 148], "threshold": [146, 148], "doubli": [149, 150], "link": [149, 150, 151, 152, 153, 154, 156], "concret": [149, 151], "togeth": [149, 151, 233, 234], "constitut": 149, "frontier": 149, "previous": 149, "held": 149, "pointer": [149, 152], "prev": [149, 150], "add_superstep_to_subplan": [149, 150], "head": [149, 150, 152], "add_superstep": [149, 150, 151], "start_nod": [149, 150], "end_nod": [149, 150], "add_schema_to_subplan": [149, 150], "get_all_root": [149, 150], "root": [149, 150, 151, 196, 209, 295, 296, 325, 327, 328, 332], "reachabl": [149, 150], "statu": [149, 150], "show": [149, 150], "displai": [149, 150, 151, 158], "serialize_subtre": [149, 150], "subtre": [149, 150, 151, 295, 296, 325, 332], "serialize_from_root": [149, 150], "to_graph": [149, 150], "standard": [149, 150, 233, 278, 281, 287], "graph": [149, 150, 158], "vertic": [149, 150, 233, 248], "edg": [149, 150], "label": [149, 150, 158, 159, 160, 161, 162, 163], "id1": [149, 150], "id2": [149, 150], "realiz": [149, 151], "aris": [149, 151], "get_oblig": [149, 151], "bit": [149, 151], "hack": [149, 151], "involv": [149, 151], "parent": [149, 151], "latter": [149, 151], "bidirect": [149, 151], "superplan": [149, 151], "doesn": [149, 151, 221, 224, 225, 300, 306, 333, 343], "sensibl": [149, 151], "alwai": [149, 151, 295, 296, 300, 309], "append": [149, 151, 221, 222, 233, 250], "revers": [149, 151], "df": [149, 151], "get_first_plan_nod": 149, "plan_nod": [149, 152, 153, 154, 156, 158], "arbitrari": [149, 153, 154, 159, 164], "get_last_plan_nod": 149, "expand_plan_nod": 149, "subplan_node_start": [149, 152], "anoth": [149, 152, 165], "insert_before_plan_nod": 149, "new_plan_node_start": [149, 156], "merge_plan_nod": 149, "plan_node_start": [149, 157], "plan_node_end": [149, 157], "new_plan_nod": [149, 157], "deal": [149, 157], "discontigu": [149, 157], "init_plan_from_eventu": 149, "etc": [149, 155, 166, 196, 300, 301, 305, 310, 325, 332, 351, 352], "construct": [149, 155, 271], "visualize_plan": 149, "vert": [149, 158], "visual": [149, 158], "graphviz": [149, 158], "dot": [149, 158, 300, 310], "rotat": [149, 158], "left": [149, 158, 300, 306], "right": [149, 158, 271, 273], "imag": [149, 158], "better": [149, 158, 159, 160], "cleaner": [149, 158], "under": [159, 300, 310], "precondit": 159, "dog": [159, 163], "eat": [159, 163], "role": [159, 163], "present": [159, 160, 161, 162, 163, 325, 332], "read_param_dict": [159, 160, 161, 162, 163], "schema_cont": [159, 160, 161, 162, 163], "to_probability_dict": [159, 160, 161, 162, 163], "necess": [159, 160, 161, 162, 163], "entri": [159, 160, 161, 162, 163], "subst_map": [159, 160, 161, 162, 163], "part": [159, 160, 161, 162, 163, 295, 296], "duplicate_vari": [159, 160, 161, 162, 163], "across": [159, 160, 161, 162, 163], "ones": [159, 160, 161, 162, 163, 295, 296, 300, 310], "conflict": [159, 160, 161, 162, 163], "deep": [159, 160, 161, 162, 163], "copi": [159, 160, 161, 162, 163], "collis": [159, 160, 161, 162, 163], "bind_arg": [159, 160, 161, 162, 163], "implicit": [159, 160, 161, 162, 163, 333], "fewer": [159, 160, 161, 162, 163], "redund": [159, 160, 161, 162, 163, 333], "front": [159, 160, 161, 162, 163, 233, 238], "superflu": [159, 160, 161, 162, 163], "get_particip": [159, 160, 161, 162, 163], "get_cont": [159, 160, 161, 162, 163], "get_sect": [159, 160, 161, 162, 163], "sec": [159, 160, 161, 162, 163], "get_section_ep": [159, 160, 161, 162, 163], "get_section_wff": [159, 160, 161, 162, 163], "epischema": [159, 160, 164], "rigid_cond": [159, 160, 161, 162], "static_cond": [159, 160, 161], "precond": [159, 160, 161], "postcond": [159, 160, 161], "goal": [159, 160, 161], "episode_rel": [159, 160, 161], "prototyp": [159, 160, 161, 162], "nomin": [159, 160, 161, 162], "rigid": [159, 160, 161, 162], "cond": [159, 160, 161, 162, 166, 168, 169, 171, 176, 182, 183, 185, 190, 198, 199, 201, 206], "fluent": [159, 160, 161, 162, 233, 244], "static": [159, 160, 161], "causal": [159, 160, 161], "dialschema": [159, 164], "get_obligations_of_ep": [159, 160], "attach": [159, 160, 233, 250], "accessor": [159, 160, 233, 240], "objschema": [159, 164], "skeletal_prototyp": [159, 162], "skelet": [159, 162], "3d": [159, 162], "mesh": [159, 162], "decomposit": [159, 162, 325, 332], "obj": [159, 162, 164], "filenam": [159, 162, 325, 328], "dial": [159, 164], "epi": [159, 164], "get_schema": [159, 164], "m": [159, 164], "retrieve_knowledg": [159, 164], "signatur": [165, 166], "intern": [165, 295, 296], "tt": 165, "techniqu": 166, "statist": 166, "stack": 166, "practic": 166, "collat": 166, "report": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "cumul": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "reasontopdowntransduc": [166, 180, 189, 196, 205], "reasonbottomuptransduc": [166, 180, 188, 196, 204], "gisttransduc": [166, 180, 184, 196, 200], "semantictransduc": [166, 180, 191, 196, 207], "pragmatictransduc": [166, 180, 186, 196, 202], "reactiontransduc": [166, 180, 187, 196, 203], "conting": [166, 173], "subplantransduc": [166, 180, 192, 196, 208], "paraphrasetransduc": [166, 180, 185, 196, 201], "background": [166, 168, 169, 171, 176], "impact": [166, 168, 169, 171, 176], "foreground": [166, 168, 169, 171, 176], "responsetransduc": [166, 180, 190, 196, 206], "answertransduc": [166, 180, 182, 196, 198], "asktransduc": [166, 180, 183, 196, 199], "affecttransduc": [166, 180, 181, 196, 197], "appropri": [166, 167], "__call__": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "reli": [180, 210, 233, 250, 351], "openai": [180, 271], "subclass": [180, 196], "gpttransduc": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "prompt": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 271, 272, 273, 275, 276, 277], "postprocess": [180, 193], "util": [180, 196], "_affect_valid": [180, 195], "_answer_valid": [180, 195], "_paraphrase_valid": [180, 195], "_reason_valid": [180, 195], "placehold": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 271], "fill": [180, 193, 271, 276, 300, 305, 333, 348], "startexampl": [180, 193, 271, 276], "endexampl": [180, 193, 271, 276], "_cost": [180, 193], "total": [180, 193, 271, 275], "gptreasontopdowntransduc": 180, "gptreasonbottomuptransduc": 180, "gptgisttransduc": 180, "gptsemantictransduc": 180, "gptpragmatictransduc": 180, "gptreactiontransduc": 180, "gptsubplantransduc": 180, "gptparaphrasetransduc": 180, "gptresponsetransduc": 180, "gptanswertransduc": 180, "gptasktransduc": 180, "gptaffecttransduc": 180, "kwarg": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 271, 272, 277], "tttransduc": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "forest": 196, "choic": [196, 209, 294, 325, 327, 328, 329, 331, 332], "packet": [196, 209, 325, 332], "slightli": 196, "out": [196, 295, 296, 325, 332], "wherea": 196, "raw": [196, 295, 296], "flatten": [196, 233, 278, 284, 300, 305, 306], "rule_dir": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "choos": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 295, 296], "feat": [196, 209, 295, 296, 300, 309, 310, 325, 326, 327, 328], "doe": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "ttreasontopdowntransduc": 196, "ttreasonbottomuptransduc": 196, "ttgisttransduc": 196, "ttsemantictransduc": 196, "ttpragmatictransduc": 196, "ttreactiontransduc": 196, "ttsubplantransduc": 196, "ttparaphrasetransduc": 196, "ttresponsetransduc": 196, "ttanswertransduc": 196, "ttasktransduc": 196, "ttaffecttransduc": 196, "quot": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 233, 253, 278, 282, 333, 346], "concaten": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "substr": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 278, 279], "chosen": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "manipul": [211, 278, 300, 324, 333, 350], "term": 211, "architectur": 211, "heapq": 211, "min": 211, "heap": 211, "enqueu": [211, 214], "enqueue_ord": 211, "inc_val": [211, 214], "0001": [211, 214], "preserv": [211, 214, 233, 261], "explicitli": [211, 214], "increment": [211, 214, 233, 250], "is_empti": 211, "pop_item": 211, "pop_al": 211, "get_item": 211, "without": [211, 215, 300, 305], "max_import": 211, "maximum": [211, 218, 271, 273, 275], "func": [211, 217], "read_fil": 221, "read_lin": 221, "line": [221, 229, 271, 278, 280], "whitespac": [221, 229, 233, 265, 278, 281], "write_fil": 221, "append_fil": 221, "load_json": 221, "load": [221, 227, 333], "write_json": 221, "ensure_dir_exist": 221, "dirnam": [221, 224], "ensure_file_exist": 221, "clear_symtab": 233, "gentemp": 233, "hasn": [233, 250], "integ": [233, 250, 295, 296, 300, 308, 310, 315, 324, 325, 332], "exploit": [233, 250], "cannot": [233, 250], "see": [233, 250, 295, 296], "superfastpython": [233, 250], "com": [233, 250, 278, 294, 295, 300, 333, 355], "race_condition_with_shared_data": [233, 250], "somewhat": [233, 250], "clumsi": [233, 250], "ineffici": [233, 250], "proper": [233, 250], "solut": [233, 250], "episode_nam": 233, "episode_var": 233, "escaped_symbol_p": 233, "escap": [233, 248, 278, 280, 287], "bar": [233, 248], "symbolp": 233, "variablep": 233, "dual_var": 233, "ep_var": [233, 244], "duplicate_var": 233, "trail": [233, 245, 300, 301], "replaceal": 233, "replist": [233, 243, 263, 267], "old": [233, 260, 263], "is_regex": [233, 263], "regex": [233, 263], "indent": 233, "_": [233, 265], "parenthet": [233, 265], "around": [233, 265], "collaps": [233, 265], "space": [233, 265], "lowercas": [233, 265, 278, 287], "isquot": 233, "rec_replac": 233, "rec_remov": 233, "target": [233, 259], "listp": 233, "con": [233, 333, 345], "sublist": [233, 234, 238, 257], "remove_dupl": 233, "remove_nil": 233, "null": [233, 262, 295, 296], "subst": 233, "b": [233, 266, 278, 283, 284, 285, 300, 305, 306], "substal": 233, "random_el": 233, "select": [233, 235, 258, 295, 296], "random": [233, 258], "get_keyword_cont": 233, "to_kei": 233, "dict_substall_kei": 233, "dct": [233, 239, 240, 241, 242, 243], "cons_dict": 233, "dict_get": 233, "safe": [233, 240, 241, 242], "dict_rem_v": 233, "dict_rem": 233, "squash": 233, "rang": [233, 264, 271, 273], "normal": [233, 271, 273], "linsum": 233, "scale": [233, 254], "argmax": 233, "interact": 271, "later": 271, "zip": [271, 272], "treat": 271, "templat": [271, 300, 305, 325, 332, 333, 348], "generate_gpt": 271, "preambl": [271, 273, 275], "turbo": [271, 273, 275], "max_token": [271, 273, 275], "2048": [271, 273, 275], "postprocessor": [271, 273, 275], "n_retri": [271, 273, 275], "messag": [271, 273, 275], "give": [271, 273, 275], "assist": [271, 273, 275], "token": [271, 273, 274, 275], "invalid": [271, 273, 275], "cost_gpt": 271, "avg_resp_len": [271, 273], "gpt2token": [271, 273], "name_or_path": [271, 273], "gpt2": [271, 273], "vocab_s": [271, 273], "50257": [271, 273], "model_max_length": [271, 273], "1024": [271, 273], "is_fast": [271, 273], "padding_sid": [271, 273], "truncation_sid": [271, 273], "special_token": [271, 273], "bos_token": [271, 273], "addedtoken": [271, 273], "endoftext": [271, 273], "rstrip": [271, 273], "lstrip": [271, 273], "single_word": [271, 273], "eos_token": [271, 273], "unk_token": [271, 273], "estim": [271, 273, 274], "length": [271, 273], "cost_token": 271, "n_token": [271, 274], "apply_zip": 271, "subst_kwarg": 271, "subst_exampl": 271, "borrow": 278, "repositori": 278, "github": [278, 294, 295, 300, 333, 355], "bitbang": 278, "blob": [278, 294, 295, 333], "master": [278, 294, 295, 300, 333], "pyschema": 278, "py": 278, "balanced_substr": 278, "balanc": [278, 279], "parenthes": [278, 279], "clean_s_expr": 278, "s_expr": [278, 281, 282, 285, 287], "clean": [278, 280, 281], "newlin": [278, 281], "standardize_symbol": 278, "enclos": [278, 287], "convert_quot": 278, "parse_s_expr": 278, "c": [278, 283, 284, 285, 300, 305], "list_to_s_expr": 278, "list_to_str": 278, "clean_lisp": 278, "comment": [278, 280], "charact": [278, 280, 300, 324], "read_lisp": 278, "write_lisp": 278, "datetim": [289, 290], "to_num": [289, 290], "year": [289, 290], "month": [289, 290], "dai": [289, 290], "hour": [289, 290], "minut": [289, 290], "to_ulf": [289, 290, 351], "timestamp": [289, 292, 293], "certainty_to_period": 289, "proport": [289, 291], "quantiti": [289, 291], "infin": [289, 291], "inf": [289, 291], "has_elapsed_certainty_period": 289, "delta": [289, 292], "algorithm": [294, 295, 296], "mechan": 294, "translat": 294, "bkane2": [294, 295, 300, 333, 355], "primarili": 295, "reimplement": [295, 300], "choose_result_for": 295, "leav": [295, 296, 300, 306], "pattern1": [295, 296], "pattern2": [295, 296], "yield": [295, 296], "seek": [295, 296], "children": [295, 296, 325, 332], "sibl": [295, 296], "latenc": [295, 296, 325, 332], "long": [295, 296, 325, 332], "again": [295, 296, 325, 332], "lower": [295, 296], "skip": [295, 296], "permut": [295, 296], "clause1": [295, 296], "clausek": [295, 296], "search": [295, 296], "subtree1": [295, 296], "subtree2": [295, 296], "reassembli": [295, 296, 325, 332], "And": [295, 296], "anyth": [295, 296], "common": [295, 296, 355], "shorthand": [295, 296], "template1": [295, 296], "template2": [295, 296], "randomli": [295, 296], "param": [295, 296], "therefor": [295, 296], "result1": [295, 296], "resultk": [295, 296], "rtype": [295, 296], "flatten_sequ": 300, "seq": [300, 305, 306, 310], "easi": [300, 306], "against": [300, 306], "free": [300, 306], "unchang": [300, 306], "indexed_element_of": 300, "s_variant_of_p_var": 300, "p_var": [300, 319], "variant": [300, 319, 333], "multi": [300, 324], "nonneg": [300, 324], "isa": [300, 310, 325, 326], "nb": [300, 309], "custom": [300, 305, 309, 310, 333], "surgeon": [300, 309], "doctor": [300, 309], "profession": [300, 309], "pa": [300, 310], "ex": [300, 310], "nil": [300, 310], "match_rec": [300, 310], "assumpt": [300, 310], "unnecessari": [300, 310], "exactli": [300, 310], "zero": [300, 310, 333], "branch": [300, 310], "math": [300, 310], "chain": [300, 310], "ident": [300, 310], "w": [300, 310], "x1": [300, 310, 325, 326], "xk": [300, 310, 325, 326], "xi": [300, 310, 325, 326], "resembl": [300, 310], "except": [300, 301, 310, 333, 341, 342], "constitu": [300, 305, 310], "encod": [300, 310], "item1": [300, 310], "item2": [300, 310], "spec_funct": 300, "position_index": 300, "check_position_index_syntax": 300, "syntax": [300, 301], "digit": [300, 301], "standalon": [300, 301], "13": [300, 301], "20": [300, 301], "fill_templ": 300, "match_result": [300, 305], "piec": [300, 305], "3rd": [300, 305], "2nd": [300, 305], "whole": [300, 305], "lex": [300, 305], "wrapper": [300, 305], "init_nod": 325, "readrul": 325, "attachfeat": 325, "feat_xx": [325, 326], "x2": [325, 326], "among": [325, 326], "merge_feat": 325, "feats1": [325, 330], "feats2": [325, 330], "merge_tre": 325, "trees1": [325, 331], "trees2": [325, 331], "overrid": [325, 331], "simplif": 333, "extens": 333, "small": 333, "extent": 333, "lack": 333, "macro": 333, "rework": 333, "lexic": [333, 338, 351, 353], "comma": 333, "non_neg": 333, "polar": [333, 341, 342], "non_neg_mod": 333, "affirm_adv": 333, "affirmatori": [333, 334], "modal": 333, "not_non_alcohol": 333, "alcohol": [333, 344], "beverag": [333, 344], "not_medicine_gen": 333, "medicin": [333, 343], "lex_ulf": 333, "cat": [333, 338, 351, 353], "quote_to_list": 333, "split_sent": 333, "wordlist": [333, 347], "prefix_each": 333, "unscop": 350, "lexem": 351, "nltk": 351, "snowbal": 351, "stemmer": 351, "categori": [351, 353], "veri": [351, 353], "experiment": [351, 353], "merced": [351, 353], "stem_superl": 351, "sup_adv": [351, 352], "stem": [351, 352], "superl": [351, 352], "adject": [351, 352], "program": [351, 352], "shouldn": [351, 352], "doubl": [351, 352], "conson": [351, 352], "sup": [351, 352], "adj": [351, 352], "biggest": [351, 352], "smartest": [351, 352]}, "objects": {"": [[0, 0, 0, "-", "eta"]], "eta": [[1, 0, 0, "-", "config"], [12, 0, 0, "-", "constants"], [45, 0, 0, "-", "core"], [102, 0, 0, "-", "discourse"], [111, 0, 0, "-", "embedding"], [117, 0, 0, "-", "lf"], [146, 0, 0, "-", "memory"], [149, 0, 0, "-", "plan"], [159, 0, 0, "-", "schema"], [165, 0, 0, "-", "transducers"], [210, 0, 0, "-", "util"]], "eta.config": [[2, 0, 0, "-", "lissa_gpt"], [4, 0, 0, "-", "lissa_rule"], [6, 0, 0, "-", "sophie_gpt"], [8, 0, 0, "-", "sophie_offline"], [10, 0, 0, "-", "test"]], "eta.config.lissa_gpt": [[3, 1, 1, "", "config"]], "eta.config.lissa_rule": [[5, 1, 1, "", "config"]], "eta.config.sophie_gpt": [[7, 1, 1, "", "config"]], "eta.config.sophie_offline": [[9, 1, 1, "", "config"]], "eta.config.test": [[11, 1, 1, "", "config"]], "eta.constants": [[13, 2, 1, "", "ANSWER"], [14, 2, 1, "", "ARTICULATE_TO"], [15, 2, 1, "", "ASK"], [16, 2, 1, "", "CERTAINTY_THRESHOLD"], [17, 2, 1, "", "COREFERENCE_MODE"], [18, 2, 1, "", "DEFAULT_IMPORTANCE"], [19, 2, 1, "", "DEFAULT_START"], [20, 2, 1, "", "EMBEDDING_DEFAULT_API"], [21, 2, 1, "", "EMBEDDING_DEFAULT_MODEL"], [22, 2, 1, "", "EMOTIONS_LIST"], [23, 2, 1, "", "EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT"], [24, 2, 1, "", "HERE"], [25, 2, 1, "", "IO_PATH"], [26, 2, 1, "", "KEY_PATH"], [27, 2, 1, "", "ME"], [28, 2, 1, "", "NOOP"], [29, 2, 1, "", "NOOP_GEN"], [30, 2, 1, "", "NOOP_YOU"], [31, 2, 1, "", "NOW"], [32, 2, 1, "", "PARAPHRASE_TO"], [33, 2, 1, "", "REACT_TO"], [34, 2, 1, "", "REASONING_DEPTH_LIMIT"], [35, 2, 1, "", "RECENCY_CUTOFF"], [36, 2, 1, "", "REPLY_TO"], [37, 2, 1, "", "RESPOND_TO"], [38, 2, 1, "", "SAY_BYE"], [39, 2, 1, "", "SAY_TO"], [40, 2, 1, "", "SLEEPTIME"], [41, 2, 1, "", "SPEECH_ACTS"], [42, 2, 1, "", "SYMTAB_PATH"], [43, 2, 1, "", "TELIC_VERBS"], [44, 2, 1, "", "YOU"]], "eta.core": [[46, 0, 0, "-", "eta"], [51, 0, 0, "-", "execution"], [66, 0, 0, "-", "perception"], [71, 0, 0, "-", "planning"], [97, 0, 0, "-", "reasoning"]], "eta.core.eta": [[47, 3, 1, "", "DialogueState"], [48, 3, 1, "", "ProcessManager"], [49, 1, 1, "", "eta"], [50, 1, 1, "", "main"]], "eta.core.eta.DialogueState": [[47, 4, 1, "", "access_from_context"], [47, 4, 1, "", "add_all_to_buffer"], [47, 4, 1, "", "add_to_buffer"], [47, 4, 1, "", "add_to_buffer_if_empty"], [47, 4, 1, "", "add_to_context"], [47, 4, 1, "", "add_to_memory"], [47, 4, 1, "", "advance_plan"], [47, 4, 1, "", "apply_transducer"], [47, 4, 1, "", "bind"], [47, 4, 1, "", "buffer_empty"], [47, 5, 1, "", "buffers"], [47, 5, 1, "", "concept_aliases"], [47, 5, 1, "", "concept_sets"], [47, 5, 1, "", "config_agent"], [47, 5, 1, "", "config_user"], [47, 5, 1, "", "conversation_log"], [47, 4, 1, "", "cost"], [47, 4, 1, "", "do_continue"], [47, 5, 1, "", "embedder"], [47, 5, 1, "", "equality_sets"], [47, 4, 1, "", "eval_truth_value"], [47, 4, 1, "", "flush_context"], [47, 4, 1, "", "get_buffer"], [47, 4, 1, "", "get_conversation_log"], [47, 4, 1, "", "get_io_path"], [47, 4, 1, "", "get_memory"], [47, 4, 1, "", "get_perception_servers"], [47, 4, 1, "", "get_plan"], [47, 4, 1, "", "get_quit_conversation"], [47, 4, 1, "", "get_specialist_servers"], [47, 4, 1, "", "get_step_failure_timer"], [47, 4, 1, "", "get_user_id"], [47, 4, 1, "", "has_plan"], [47, 5, 1, "", "id"], [47, 5, 1, "", "init_knowledge"], [47, 4, 1, "", "init_plan_from_schema"], [47, 4, 1, "", "instantiate_curr_step"], [47, 5, 1, "", "io_path"], [47, 4, 1, "", "is_schema"], [47, 4, 1, "", "log_turn"], [47, 5, 1, "", "me"], [47, 5, 1, "", "memory"], [47, 5, 1, "", "output_buffer"], [47, 5, 1, "", "plan"], [47, 4, 1, "", "pop_all_buffer"], [47, 4, 1, "", "pop_buffer"], [47, 4, 1, "", "print_schema_instances"], [47, 4, 1, "", "push_output_buffer"], [47, 5, 1, "", "quit_conversation"], [47, 5, 1, "", "reference_list"], [47, 4, 1, "", "replace_all_buffer"], [47, 4, 1, "", "replace_buffer"], [47, 4, 1, "", "reset_step_failure_timer"], [47, 5, 1, "", "schema_instances"], [47, 5, 1, "", "schemas"], [47, 4, 1, "", "set_plan"], [47, 4, 1, "", "set_quit_conversation"], [47, 5, 1, "", "start_schema"], [47, 5, 1, "", "step_failure_timer"], [47, 5, 1, "", "timegraph"], [47, 5, 1, "", "transducers"], [47, 4, 1, "", "unbind"], [47, 4, 1, "", "write_output_buffer"], [47, 5, 1, "", "you"]], "eta.core.eta.ProcessManager": [[48, 4, 1, "", "connect"], [48, 4, 1, "", "get_server"], [48, 4, 1, "", "join"], [48, 4, 1, "", "register"], [48, 4, 1, "", "start"]], "eta.core.execution": [[52, 1, 1, "", "execute_say_bye"], [53, 1, 1, "", "execute_say_to"], [54, 1, 1, "", "execution_loop"], [55, 1, 1, "", "fail_curr_step"], [56, 1, 1, "", "get_action"], [57, 1, 1, "", "inquire_truth_of_curr_step"], [58, 1, 1, "", "me_pred"], [59, 1, 1, "", "process_condition_step"], [60, 1, 1, "", "process_expected_step"], [61, 1, 1, "", "process_intended_step"], [62, 1, 1, "", "process_repetition_step"], [63, 1, 1, "", "say_bye_step"], [64, 1, 1, "", "say_to_step"], [65, 1, 1, "", "you_pred"]], "eta.core.perception": [[67, 1, 1, "", "observe"], [68, 1, 1, "", "perception_loop"], [69, 1, 1, "", "process_observations"], [70, 1, 1, "", "process_utterances"]], "eta.core.planning": [[72, 1, 1, "", "add_possible_actions_to_plan"], [73, 1, 1, "", "answer_step"], [74, 1, 1, "", "ask_step"], [75, 1, 1, "", "equivalent_speech_acts"], [76, 1, 1, "", "expand_condition_step"], [77, 1, 1, "", "expand_plan_steps"], [78, 1, 1, "", "expand_primitive_step"], [79, 1, 1, "", "expand_repetition_step"], [80, 1, 1, "", "merge_plan_steps"], [81, 1, 1, "", "paraphrase_step"], [82, 1, 1, "", "plan_answer"], [83, 1, 1, "", "plan_ask"], [84, 1, 1, "", "plan_paraphrase"], [85, 1, 1, "", "plan_react"], [86, 1, 1, "", "plan_respond"], [87, 1, 1, "", "planning_loop"], [88, 1, 1, "", "react_step"], [89, 1, 1, "", "relative_speech_act_step"], [90, 1, 1, "", "reorder_plan_steps"], [91, 1, 1, "", "reply_step"], [92, 1, 1, "", "respond_step"], [93, 1, 1, "", "say_to_step_from_utt"], [94, 1, 1, "", "say_to_step_from_utts"], [95, 1, 1, "", "schema_step"], [96, 1, 1, "", "split_schema_step"]], "eta.core.reasoning": [[98, 1, 1, "", "infer_bottom_up"], [99, 1, 1, "", "infer_top_down"], [100, 1, 1, "", "reasoning_loop"], [101, 1, 1, "", "suggest_possible_actions"]], "eta.discourse": [[103, 3, 1, "", "DialogueTurn"], [104, 3, 1, "", "Utterance"], [105, 1, 1, "", "compress"], [106, 1, 1, "", "decompress"], [107, 1, 1, "", "get_prior_turn"], [108, 1, 1, "", "parse_utt_str"], [109, 1, 1, "", "presubst"], [110, 1, 1, "", "swap_duals"]], "eta.discourse.DialogueTurn": [[103, 5, 1, "", "agent"], [103, 5, 1, "", "ep"], [103, 5, 1, "", "gists"], [103, 5, 1, "", "obligations"], [103, 5, 1, "", "pragmatics"], [103, 5, 1, "", "semantics"], [103, 5, 1, "", "utterance"]], "eta.discourse.Utterance": [[104, 5, 1, "", "affect"], [104, 5, 1, "", "words"]], "eta.embedding": [[112, 3, 1, "", "DummyEmbedder"], [113, 3, 1, "", "Embedder"], [114, 3, 1, "", "HFEmbedder"], [115, 3, 1, "", "STEmbedder"], [116, 1, 1, "", "sim"]], "eta.embedding.DummyEmbedder": [[112, 4, 1, "", "embed"], [112, 4, 1, "", "score"]], "eta.embedding.Embedder": [[113, 4, 1, "", "embed"], [113, 4, 1, "", "score"]], "eta.embedding.HFEmbedder": [[114, 4, 1, "", "embed"], [114, 5, 1, "", "header"], [114, 5, 1, "", "host"], [114, 5, 1, "", "model"], [114, 4, 1, "", "score"], [114, 5, 1, "", "url"]], "eta.embedding.STEmbedder": [[115, 4, 1, "", "embed"], [115, 5, 1, "", "model"], [115, 4, 1, "", "score"]], "eta.lf": [[118, 3, 1, "", "Condition"], [119, 3, 1, "", "Domain"], [120, 3, 1, "", "ELF"], [121, 3, 1, "", "Eventuality"], [122, 3, 1, "", "Individual"], [123, 2, 1, "", "KEYWORDS"], [124, 2, 1, "", "KEYWORDS_R"], [125, 3, 1, "", "LF"], [126, 3, 1, "", "Repetition"], [127, 3, 1, "", "ULF"], [128, 3, 1, "", "Var"], [129, 1, 1, "", "and_prop_p"], [130, 1, 1, "", "characterizes_prop_p"], [131, 1, 1, "", "equal_prop_p"], [132, 1, 1, "", "expectation_p"], [133, 1, 1, "", "extract_set"], [134, 1, 1, "", "from_lisp_dirs"], [135, 1, 1, "", "from_lisp_file"], [136, 1, 1, "", "is_set"], [137, 1, 1, "", "make_set"], [138, 1, 1, "", "not_prop_p"], [139, 1, 1, "", "or_prop_p"], [140, 1, 1, "", "parse_condition"], [141, 1, 1, "", "parse_eventuality"], [142, 1, 1, "", "parse_eventuality_list"], [143, 1, 1, "", "parse_repetition"], [144, 1, 1, "", "remove_type"], [145, 1, 1, "", "set_union"]], "eta.lf.Condition": [[118, 4, 1, "", "__eq__"], [118, 4, 1, "", "__hash__"], [118, 4, 1, "", "__str__"], [118, 4, 1, "", "bind"], [118, 5, 1, "", "bindings"], [118, 5, 1, "", "conditions"], [118, 5, 1, "", "elf"], [118, 4, 1, "", "embed"], [118, 5, 1, "", "embedding"], [118, 5, 1, "", "ep"], [118, 4, 1, "", "format"], [118, 4, 1, "", "get_elf"], [118, 4, 1, "", "get_ep"], [118, 4, 1, "", "get_nl"], [118, 4, 1, "", "get_ulf"], [118, 4, 1, "", "get_wff"], [118, 5, 1, "", "nl"], [118, 5, 1, "", "prob"], [118, 4, 1, "", "replacevar"], [118, 4, 1, "", "set_elf"], [118, 4, 1, "", "set_ep"], [118, 4, 1, "", "set_prob"], [118, 4, 1, "", "set_ulf"], [118, 5, 1, "", "ulf"], [118, 4, 1, "", "unbind"]], "eta.lf.Domain": [[119, 4, 1, "", "add"], [119, 4, 1, "", "add_aliases"], [119, 5, 1, "", "domain"]], "eta.lf.ELF": [[120, 4, 1, "", "__str__"], [120, 4, 1, "", "bind"], [120, 4, 1, "", "get_formula"], [120, 4, 1, "", "replacevar"], [120, 4, 1, "", "to_nl"], [120, 4, 1, "", "unbind"]], "eta.lf.Eventuality": [[121, 4, 1, "", "__eq__"], [121, 4, 1, "", "__hash__"], [121, 4, 1, "", "__str__"], [121, 4, 1, "", "bind"], [121, 5, 1, "", "bindings"], [121, 5, 1, "", "elf"], [121, 4, 1, "", "embed"], [121, 5, 1, "", "embedding"], [121, 5, 1, "", "ep"], [121, 4, 1, "", "format"], [121, 4, 1, "", "get_elf"], [121, 4, 1, "", "get_ep"], [121, 4, 1, "", "get_nl"], [121, 4, 1, "", "get_ulf"], [121, 4, 1, "", "get_wff"], [121, 5, 1, "", "nl"], [121, 5, 1, "", "prob"], [121, 4, 1, "", "replacevar"], [121, 4, 1, "", "set_elf"], [121, 4, 1, "", "set_ep"], [121, 4, 1, "", "set_prob"], [121, 4, 1, "", "set_ulf"], [121, 5, 1, "", "ulf"], [121, 4, 1, "", "unbind"]], "eta.lf.Individual": [[122, 4, 1, "", "__str__"], [122, 4, 1, "", "add_aliases"], [122, 5, 1, "", "aliases"], [122, 5, 1, "", "name"]], "eta.lf.LF": [[125, 4, 1, "", "__str__"], [125, 4, 1, "", "bind"], [125, 5, 1, "", "bindings"], [125, 5, 1, "", "formula"], [125, 4, 1, "", "get_formula"], [125, 4, 1, "", "replacevar"], [125, 4, 1, "", "to_nl"], [125, 4, 1, "", "unbind"]], "eta.lf.Repetition": [[126, 4, 1, "", "__eq__"], [126, 4, 1, "", "__hash__"], [126, 4, 1, "", "__str__"], [126, 4, 1, "", "bind"], [126, 5, 1, "", "bindings"], [126, 5, 1, "", "condition"], [126, 5, 1, "", "elf"], [126, 4, 1, "", "embed"], [126, 5, 1, "", "embedding"], [126, 5, 1, "", "ep"], [126, 5, 1, "", "eventualities"], [126, 4, 1, "", "format"], [126, 4, 1, "", "get_elf"], [126, 4, 1, "", "get_ep"], [126, 4, 1, "", "get_nl"], [126, 4, 1, "", "get_ulf"], [126, 4, 1, "", "get_wff"], [126, 5, 1, "", "nl"], [126, 5, 1, "", "prob"], [126, 4, 1, "", "replacevar"], [126, 4, 1, "", "set_elf"], [126, 4, 1, "", "set_ep"], [126, 4, 1, "", "set_prob"], [126, 4, 1, "", "set_ulf"], [126, 5, 1, "", "ulf"], [126, 4, 1, "", "unbind"]], "eta.lf.ULF": [[127, 4, 1, "", "__str__"], [127, 4, 1, "", "bind"], [127, 4, 1, "", "get_formula"], [127, 4, 1, "", "replacevar"], [127, 4, 1, "", "to_nl"], [127, 4, 1, "", "unbind"]], "eta.lf.Var": [[128, 4, 1, "", "__str__"], [128, 4, 1, "", "bind"], [128, 4, 1, "", "unbind"], [128, 5, 1, "", "val"], [128, 5, 1, "", "var"]], "eta.memory": [[147, 3, 1, "", "Memory"], [148, 3, 1, "", "MemoryStorage"]], "eta.memory.Memory": [[147, 4, 1, "", "__eq__"], [147, 4, 1, "", "__hash__"], [147, 4, 1, "", "__str__"], [147, 4, 1, "", "end"], [147, 5, 1, "", "end_time"], [147, 5, 1, "", "event"], [147, 4, 1, "", "get_ep"], [147, 4, 1, "", "get_time_wffs"], [147, 4, 1, "", "get_wff"], [147, 5, 1, "", "importance"], [147, 4, 1, "", "is_telic"], [147, 5, 1, "", "last_access"], [147, 5, 1, "", "start_time"], [147, 4, 1, "", "update_last_access"]], "eta.memory.MemoryStorage": [[148, 4, 1, "", "__str__"], [148, 4, 1, "", "access"], [148, 5, 1, "", "context"], [148, 4, 1, "", "does_characterize_episode"], [148, 5, 1, "", "embedder"], [148, 5, 1, "", "ep_ht"], [148, 4, 1, "", "flush_context"], [148, 4, 1, "", "forget"], [148, 4, 1, "", "get_characterizing_episode"], [148, 4, 1, "", "get_episode"], [148, 4, 1, "", "get_from_context"], [148, 4, 1, "", "get_matching"], [148, 4, 1, "", "instantiate"], [148, 5, 1, "", "memories"], [148, 4, 1, "", "remove"], [148, 4, 1, "", "remove_episode"], [148, 4, 1, "", "remove_episode_from_context"], [148, 4, 1, "", "remove_from_context"], [148, 4, 1, "", "remove_matching"], [148, 4, 1, "", "remove_matching_from_context"], [148, 4, 1, "", "retrieve"], [148, 4, 1, "", "store"], [148, 5, 1, "", "wff_ht"]], "eta.plan": [[150, 3, 1, "", "PlanNode"], [151, 3, 1, "", "PlanStep"], [152, 1, 1, "", "expand_plan_node"], [153, 1, 1, "", "get_first_plan_node"], [154, 1, 1, "", "get_last_plan_node"], [155, 1, 1, "", "init_plan_from_eventualities"], [156, 1, 1, "", "insert_before_plan_node"], [157, 1, 1, "", "merge_plan_nodes"], [158, 1, 1, "", "visualize_plan"]], "eta.plan.PlanNode": [[150, 4, 1, "", "__str__"], [150, 4, 1, "", "add_schema_to_subplan"], [150, 4, 1, "", "add_superstep_to_subplan"], [150, 4, 1, "", "add_supersteps"], [150, 4, 1, "", "bind"], [150, 4, 1, "", "get_all_roots"], [150, 5, 1, "", "next"], [150, 5, 1, "", "prev"], [150, 4, 1, "", "serialize_from_roots"], [150, 4, 1, "", "serialize_subtree"], [150, 4, 1, "", "status"], [150, 5, 1, "", "step"], [150, 4, 1, "", "to_graph"], [150, 4, 1, "", "unbind"]], "eta.plan.PlanStep": [[151, 4, 1, "", "__str__"], [151, 4, 1, "", "add_superstep"], [151, 4, 1, "", "bind"], [151, 5, 1, "", "event"], [151, 4, 1, "", "format"], [151, 4, 1, "", "get_obligations"], [151, 5, 1, "", "id"], [151, 5, 1, "", "obligations"], [151, 5, 1, "", "schemas"], [151, 4, 1, "", "serialize"], [151, 5, 1, "", "substeps"], [151, 5, 1, "", "supersteps"], [151, 4, 1, "", "unbind"]], "eta.schema": [[160, 3, 1, "", "DialSchema"], [161, 3, 1, "", "EpiSchema"], [162, 3, 1, "", "ObjSchema"], [163, 3, 1, "", "Schema"], [164, 3, 1, "", "SchemaLibrary"]], "eta.schema.DialSchema": [[160, 4, 1, "", "__str__"], [160, 4, 1, "", "bind"], [160, 4, 1, "", "bind_args"], [160, 4, 1, "", "duplicate_variables"], [160, 4, 1, "", "embed"], [160, 4, 1, "", "format"], [160, 4, 1, "", "get_contents"], [160, 4, 1, "", "get_obligations_of_ep"], [160, 4, 1, "", "get_participants"], [160, 4, 1, "", "get_section"], [160, 4, 1, "", "get_section_eps"], [160, 4, 1, "", "get_section_wffs"], [160, 4, 1, "", "instantiate"], [160, 4, 1, "", "read_param_dict"], [160, 4, 1, "", "retrieve"], [160, 4, 1, "", "subst_mappings"], [160, 4, 1, "", "to_probability_dict"], [160, 4, 1, "", "unbind"]], "eta.schema.EpiSchema": [[161, 4, 1, "", "__str__"], [161, 4, 1, "", "bind"], [161, 4, 1, "", "bind_args"], [161, 4, 1, "", "duplicate_variables"], [161, 4, 1, "", "embed"], [161, 4, 1, "", "format"], [161, 4, 1, "", "get_contents"], [161, 4, 1, "", "get_participants"], [161, 4, 1, "", "get_section"], [161, 4, 1, "", "get_section_eps"], [161, 4, 1, "", "get_section_wffs"], [161, 4, 1, "", "instantiate"], [161, 4, 1, "", "read_param_dict"], [161, 4, 1, "", "retrieve"], [161, 4, 1, "", "subst_mappings"], [161, 4, 1, "", "to_probability_dict"], [161, 4, 1, "", "unbind"]], "eta.schema.ObjSchema": [[162, 4, 1, "", "__str__"], [162, 4, 1, "", "bind"], [162, 4, 1, "", "bind_args"], [162, 4, 1, "", "duplicate_variables"], [162, 4, 1, "", "embed"], [162, 4, 1, "", "format"], [162, 4, 1, "", "get_contents"], [162, 4, 1, "", "get_participants"], [162, 4, 1, "", "get_section"], [162, 4, 1, "", "get_section_eps"], [162, 4, 1, "", "get_section_wffs"], [162, 4, 1, "", "instantiate"], [162, 4, 1, "", "read_param_dict"], [162, 4, 1, "", "retrieve"], [162, 4, 1, "", "subst_mappings"], [162, 4, 1, "", "to_probability_dict"], [162, 4, 1, "", "unbind"]], "eta.schema.Schema": [[163, 4, 1, "", "__str__"], [163, 4, 1, "", "bind"], [163, 4, 1, "", "bind_args"], [163, 5, 1, "", "bindings"], [163, 5, 1, "", "contents"], [163, 4, 1, "", "duplicate_variables"], [163, 4, 1, "", "embed"], [163, 5, 1, "", "embedding"], [163, 4, 1, "", "format"], [163, 4, 1, "", "get_contents"], [163, 4, 1, "", "get_participants"], [163, 4, 1, "", "get_section"], [163, 4, 1, "", "get_section_eps"], [163, 4, 1, "", "get_section_wffs"], [163, 5, 1, "", "header"], [163, 5, 1, "", "id"], [163, 4, 1, "", "instantiate"], [163, 5, 1, "", "participants"], [163, 5, 1, "", "predicate"], [163, 4, 1, "", "read_param_dict"], [163, 4, 1, "", "retrieve"], [163, 5, 1, "", "sections"], [163, 4, 1, "", "subst_mappings"], [163, 4, 1, "", "to_probability_dict"], [163, 4, 1, "", "unbind"], [163, 5, 1, "", "vars"]], "eta.schema.SchemaLibrary": [[164, 4, 1, "", "__str__"], [164, 4, 1, "", "add"], [164, 4, 1, "", "create"], [164, 5, 1, "", "dial"], [164, 5, 1, "", "embedder"], [164, 5, 1, "", "epi"], [164, 4, 1, "", "from_lisp_dirs"], [164, 4, 1, "", "from_lisp_file"], [164, 4, 1, "", "get_schemas"], [164, 4, 1, "", "is_schema"], [164, 5, 1, "", "obj"], [164, 4, 1, "", "retrieve"], [164, 4, 1, "", "retrieve_knowledge"]], "eta.transducers": [[166, 0, 0, "-", "base"], [180, 0, 0, "-", "gpt"], [196, 0, 0, "-", "tt"]], "eta.transducers.base": [[167, 3, 1, "", "AffectTransducer"], [168, 3, 1, "", "AnswerTransducer"], [169, 3, 1, "", "AskTransducer"], [170, 3, 1, "", "GistTransducer"], [171, 3, 1, "", "ParaphraseTransducer"], [172, 3, 1, "", "PragmaticTransducer"], [173, 3, 1, "", "ReactionTransducer"], [174, 3, 1, "", "ReasonBottomUpTransducer"], [175, 3, 1, "", "ReasonTopDownTransducer"], [176, 3, 1, "", "ResponseTransducer"], [177, 3, 1, "", "SemanticTransducer"], [178, 3, 1, "", "SubplanTransducer"], [179, 3, 1, "", "Transducer"]], "eta.transducers.base.AffectTransducer": [[167, 4, 1, "", "__call__"], [167, 4, 1, "", "cost"]], "eta.transducers.base.AnswerTransducer": [[168, 4, 1, "", "__call__"], [168, 4, 1, "", "cost"]], "eta.transducers.base.AskTransducer": [[169, 4, 1, "", "__call__"], [169, 4, 1, "", "cost"]], "eta.transducers.base.GistTransducer": [[170, 4, 1, "", "__call__"], [170, 4, 1, "", "cost"]], "eta.transducers.base.ParaphraseTransducer": [[171, 4, 1, "", "__call__"], [171, 4, 1, "", "cost"]], "eta.transducers.base.PragmaticTransducer": [[172, 4, 1, "", "__call__"], [172, 4, 1, "", "cost"]], "eta.transducers.base.ReactionTransducer": [[173, 4, 1, "", "__call__"], [173, 4, 1, "", "cost"]], "eta.transducers.base.ReasonBottomUpTransducer": [[174, 4, 1, "", "__call__"], [174, 4, 1, "", "cost"]], "eta.transducers.base.ReasonTopDownTransducer": [[175, 4, 1, "", "__call__"], [175, 4, 1, "", "cost"]], "eta.transducers.base.ResponseTransducer": [[176, 4, 1, "", "__call__"], [176, 4, 1, "", "cost"]], "eta.transducers.base.SemanticTransducer": [[177, 4, 1, "", "__call__"], [177, 4, 1, "", "cost"]], "eta.transducers.base.SubplanTransducer": [[178, 4, 1, "", "__call__"], [178, 4, 1, "", "cost"]], "eta.transducers.base.Transducer": [[179, 4, 1, "", "__call__"], [179, 4, 1, "", "cost"]], "eta.transducers.gpt": [[181, 3, 1, "", "GPTAffectTransducer"], [182, 3, 1, "", "GPTAnswerTransducer"], [183, 3, 1, "", "GPTAskTransducer"], [184, 3, 1, "", "GPTGistTransducer"], [185, 3, 1, "", "GPTParaphraseTransducer"], [186, 3, 1, "", "GPTPragmaticTransducer"], [187, 3, 1, "", "GPTReactionTransducer"], [188, 3, 1, "", "GPTReasonBottomUpTransducer"], [189, 3, 1, "", "GPTReasonTopDownTransducer"], [190, 3, 1, "", "GPTResponseTransducer"], [191, 3, 1, "", "GPTSemanticTransducer"], [192, 3, 1, "", "GPTSubplanTransducer"], [193, 3, 1, "", "GPTTransducer"], [194, 2, 1, "", "PROMPTS"], [195, 2, 1, "", "VALIDATORS"]], "eta.transducers.gpt.GPTAffectTransducer": [[181, 4, 1, "", "__call__"], [181, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTAnswerTransducer": [[182, 4, 1, "", "__call__"], [182, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTAskTransducer": [[183, 4, 1, "", "__call__"], [183, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTGistTransducer": [[184, 4, 1, "", "__call__"], [184, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTParaphraseTransducer": [[185, 4, 1, "", "__call__"], [185, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTPragmaticTransducer": [[186, 4, 1, "", "__call__"], [186, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTReactionTransducer": [[187, 4, 1, "", "__call__"], [187, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTReasonBottomUpTransducer": [[188, 4, 1, "", "__call__"], [188, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTReasonTopDownTransducer": [[189, 4, 1, "", "__call__"], [189, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTResponseTransducer": [[190, 4, 1, "", "__call__"], [190, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTSemanticTransducer": [[191, 4, 1, "", "__call__"], [191, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTSubplanTransducer": [[192, 4, 1, "", "__call__"], [192, 4, 1, "", "cost"]], "eta.transducers.gpt.GPTTransducer": [[193, 4, 1, "", "__call__"], [193, 5, 1, "", "_cost"], [193, 4, 1, "", "cost"], [193, 5, 1, "", "prompt"], [193, 5, 1, "", "validators"]], "eta.transducers.tt": [[197, 3, 1, "", "TTAffectTransducer"], [198, 3, 1, "", "TTAnswerTransducer"], [199, 3, 1, "", "TTAskTransducer"], [200, 3, 1, "", "TTGistTransducer"], [201, 3, 1, "", "TTParaphraseTransducer"], [202, 3, 1, "", "TTPragmaticTransducer"], [203, 3, 1, "", "TTReactionTransducer"], [204, 3, 1, "", "TTReasonBottomUpTransducer"], [205, 3, 1, "", "TTReasonTopDownTransducer"], [206, 3, 1, "", "TTResponseTransducer"], [207, 3, 1, "", "TTSemanticTransducer"], [208, 3, 1, "", "TTSubplanTransducer"], [209, 3, 1, "", "TTTransducer"]], "eta.transducers.tt.TTAffectTransducer": [[197, 4, 1, "", "__call__"], [197, 4, 1, "", "cost"]], "eta.transducers.tt.TTAnswerTransducer": [[198, 4, 1, "", "__call__"], [198, 4, 1, "", "cost"]], "eta.transducers.tt.TTAskTransducer": [[199, 4, 1, "", "__call__"], [199, 4, 1, "", "cost"]], "eta.transducers.tt.TTGistTransducer": [[200, 4, 1, "", "__call__"], [200, 4, 1, "", "cost"]], "eta.transducers.tt.TTParaphraseTransducer": [[201, 4, 1, "", "__call__"], [201, 4, 1, "", "cost"]], "eta.transducers.tt.TTPragmaticTransducer": [[202, 4, 1, "", "__call__"], [202, 4, 1, "", "cost"]], "eta.transducers.tt.TTReactionTransducer": [[203, 4, 1, "", "__call__"], [203, 4, 1, "", "cost"]], "eta.transducers.tt.TTReasonBottomUpTransducer": [[204, 4, 1, "", "__call__"], [204, 4, 1, "", "cost"]], "eta.transducers.tt.TTReasonTopDownTransducer": [[205, 4, 1, "", "__call__"], [205, 4, 1, "", "cost"]], "eta.transducers.tt.TTResponseTransducer": [[206, 4, 1, "", "__call__"], [206, 4, 1, "", "cost"]], "eta.transducers.tt.TTSemanticTransducer": [[207, 4, 1, "", "__call__"], [207, 4, 1, "", "cost"]], "eta.transducers.tt.TTSubplanTransducer": [[208, 4, 1, "", "__call__"], [208, 4, 1, "", "cost"]], "eta.transducers.tt.TTTransducer": [[209, 4, 1, "", "__call__"], [209, 4, 1, "", "cost"], [209, 5, 1, "", "feats"], [209, 5, 1, "", "roots"], [209, 5, 1, "", "trees"]], "eta.util": [[211, 0, 0, "-", "buffer"], [221, 0, 0, "-", "file"], [233, 0, 0, "-", "general"], [271, 0, 0, "-", "gpt"], [278, 0, 0, "-", "sexpr"], [289, 0, 0, "-", "time"], [294, 0, 0, "-", "tt"], [350, 0, 0, "-", "ulf"]], "eta.util.buffer": [[212, 1, 1, "", "clear"], [213, 1, 1, "", "enqueue"], [214, 1, 1, "", "enqueue_ordered"], [215, 1, 1, "", "get_item"], [216, 1, 1, "", "is_empty"], [217, 1, 1, "", "iterate"], [218, 1, 1, "", "max_importance"], [219, 1, 1, "", "pop_all"], [220, 1, 1, "", "pop_item"]], "eta.util.file": [[222, 1, 1, "", "append_file"], [223, 1, 1, "", "clear"], [224, 1, 1, "", "ensure_dir_exists"], [225, 1, 1, "", "ensure_file_exists"], [226, 1, 1, "", "exists"], [227, 1, 1, "", "load_json"], [228, 1, 1, "", "read_file"], [229, 1, 1, "", "read_lines"], [230, 1, 1, "", "remove"], [231, 1, 1, "", "write_file"], [232, 1, 1, "", "write_json"]], "eta.util.general": [[234, 1, 1, "", "append"], [235, 1, 1, "", "argmax"], [236, 1, 1, "", "atom"], [237, 1, 1, "", "clear_symtab"], [238, 1, 1, "", "cons"], [239, 1, 1, "", "cons_dict"], [240, 1, 1, "", "dict_get"], [241, 1, 1, "", "dict_rem"], [242, 1, 1, "", "dict_rem_val"], [243, 1, 1, "", "dict_substall_keys"], [244, 1, 1, "", "dual_var"], [245, 1, 1, "", "duplicate_var"], [246, 1, 1, "", "episode_name"], [247, 1, 1, "", "episode_var"], [248, 1, 1, "", "escaped_symbol_p"], [249, 1, 1, "", "flatten"], [250, 1, 1, "", "gentemp"], [251, 1, 1, "", "get_keyword_contents"], [252, 1, 1, "", "indent"], [253, 1, 1, "", "isquote"], [254, 1, 1, "", "linsum"], [255, 1, 1, "", "listp"], [256, 1, 1, "", "normalize"], [257, 1, 1, "", "push"], [258, 1, 1, "", "random_element"], [259, 1, 1, "", "rec_remove"], [260, 1, 1, "", "rec_replace"], [261, 1, 1, "", "remove_duplicates"], [262, 1, 1, "", "remove_nil"], [263, 1, 1, "", "replaceall"], [264, 1, 1, "", "squash"], [265, 1, 1, "", "standardize"], [266, 1, 1, "", "subst"], [267, 1, 1, "", "substall"], [268, 1, 1, "", "symbolp"], [269, 1, 1, "", "to_key"], [270, 1, 1, "", "variablep"]], "eta.util.gpt": [[272, 1, 1, "", "apply_zip"], [273, 1, 1, "", "cost_gpt"], [274, 1, 1, "", "cost_tokens"], [275, 1, 1, "", "generate_gpt"], [276, 1, 1, "", "subst_examples"], [277, 1, 1, "", "subst_kwargs"]], "eta.util.sexpr": [[279, 1, 1, "", "balanced_substr"], [280, 1, 1, "", "clean_lisp"], [281, 1, 1, "", "clean_s_expr"], [282, 1, 1, "", "convert_quotes"], [283, 1, 1, "", "list_to_s_expr"], [284, 1, 1, "", "list_to_str"], [285, 1, 1, "", "parse_s_expr"], [286, 1, 1, "", "read_lisp"], [287, 1, 1, "", "standardize_symbols"], [288, 1, 1, "", "write_lisp"]], "eta.util.time": [[290, 3, 1, "", "TimePoint"], [291, 1, 1, "", "certainty_to_period"], [292, 1, 1, "", "has_elapsed_certainty_period"], [293, 1, 1, "", "now"]], "eta.util.time.TimePoint": [[290, 4, 1, "", "__str__"], [290, 4, 1, "", "format"], [290, 5, 1, "", "time"], [290, 4, 1, "", "to_num"], [290, 4, 1, "", "to_ulf"], [290, 4, 1, "", "update"]], "eta.util.tt": [[295, 0, 0, "-", "choice"], [300, 0, 0, "-", "match"], [325, 0, 0, "-", "parse"], [333, 0, 0, "-", "preds"]], "eta.util.tt.choice": [[296, 1, 1, "", "choose_result_for"], [297, 1, 1, "", "is_tree_root"], [298, 1, 1, "", "is_tree_root_clause"], [299, 1, 1, "", "is_tree_root_list"]], "eta.util.tt.match": [[301, 1, 1, "", "check_position_index_syntax"], [302, 1, 1, "", "dec_num_var"], [303, 1, 1, "", "dot_atom"], [304, 1, 1, "", "e_var"], [305, 1, 1, "", "fill_template"], [306, 1, 1, "", "flatten_sequences"], [307, 1, 1, "", "hard_atom"], [308, 1, 1, "", "indexed_element_of"], [309, 1, 1, "", "isa"], [310, 1, 1, "", "match"], [311, 1, 1, "", "match_var"], [312, 1, 1, "", "num_var"], [313, 1, 1, "", "ok"], [314, 1, 1, "", "p_var"], [315, 1, 1, "", "position_index"], [316, 1, 1, "", "pred_var_any"], [317, 1, 1, "", "q_var"], [318, 1, 1, "", "s_var"], [319, 1, 1, "", "s_variant_of_p_var"], [320, 1, 1, "", "seq_var"], [321, 1, 1, "", "soft_var"], [322, 1, 1, "", "spec_function"], [323, 1, 1, "", "underlying_feat"], [324, 1, 1, "", "val"]], "eta.util.tt.parse": [[326, 1, 1, "", "attachfeat"], [327, 1, 1, "", "from_lisp_dirs"], [328, 1, 1, "", "from_lisp_file"], [329, 1, 1, "", "init_node"], [330, 1, 1, "", "merge_feats"], [331, 1, 1, "", "merge_trees"], [332, 1, 1, "", "readrules"]], "eta.util.tt.preds": [[334, 1, 1, "", "affirm_adv"], [335, 1, 1, "", "atom"], [336, 1, 1, "", "comma"], [337, 1, 1, "", "expr"], [338, 1, 1, "", "lex_ulf"], [339, 1, 1, "", "lst"], [340, 1, 1, "", "modal"], [341, 1, 1, "", "non_neg"], [342, 1, 1, "", "non_neg_mod"], [343, 1, 1, "", "not_medicine_gen"], [344, 1, 1, "", "not_non_alcoholic"], [345, 1, 1, "", "prefix_each"], [346, 1, 1, "", "quote_to_list"], [347, 1, 1, "", "split_sentences"], [348, 1, 1, "", "test"], [349, 1, 1, "", "zero"]], "eta.util.ulf": [[351, 0, 0, "-", "lex"]], "eta.util.ulf.lex": [[352, 1, 1, "", "stem_superlative"], [353, 1, 1, "", "to_ulf"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:data", "3": "py:class", "4": "py:method", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "data", "Python data"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"eta": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "lissa_gpt": [2, 3], "lissa_rul": [4, 5], "sophie_gpt": [6, 7], "sophie_offlin": [8, 9], "test": [10, 11, 348], "constant": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "answer": 13, "articulate_to": 14, "ask": 15, "certainty_threshold": 16, "coreference_mod": 17, "default_import": 18, "default_start": 19, "embedding_default_api": 20, "embedding_default_model": 21, "emotions_list": 22, "expected_step_failure_period_coeffici": 23, "here": 24, "io_path": 25, "key_path": 26, "me": 27, "noop": 28, "noop_gen": 29, "noop_you": 30, "now": [31, 293], "paraphrase_to": 32, "react_to": 33, "reasoning_depth_limit": 34, "recency_cutoff": 35, "reply_to": 36, "respond_to": 37, "say_by": 38, "say_to": 39, "sleeptim": 40, "speech_act": 41, "symtab_path": 42, "telic_verb": 43, "you": 44, "core": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "dialoguest": 47, "processmanag": 48, "main": 50, "execut": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65], "execute_say_by": 52, "execute_say_to": 53, "execution_loop": 54, "fail_curr_step": 55, "get_act": 56, "inquire_truth_of_curr_step": 57, "me_pr": 58, "process_condition_step": 59, "process_expected_step": 60, "process_intended_step": 61, "process_repetition_step": 62, "say_bye_step": 63, "say_to_step": 64, "you_pr": 65, "percept": [66, 67, 68, 69, 70], "observ": 67, "perception_loop": 68, "process_observ": 69, "process_utter": 70, "plan": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], "add_possible_actions_to_plan": 72, "answer_step": 73, "ask_step": 74, "equivalent_speech_act": 75, "expand_condition_step": 76, "expand_plan_step": 77, "expand_primitive_step": 78, "expand_repetition_step": 79, "merge_plan_step": 80, "paraphrase_step": 81, "plan_answ": 82, "plan_ask": 83, "plan_paraphras": 84, "plan_react": 85, "plan_respond": 86, "planning_loop": 87, "react_step": 88, "relative_speech_act_step": 89, "reorder_plan_step": 90, "reply_step": 91, "respond_step": 92, "say_to_step_from_utt": [93, 94], "schema_step": 95, "split_schema_step": 96, "reason": [97, 98, 99, 100, 101], "infer_bottom_up": 98, "infer_top_down": 99, "reasoning_loop": 100, "suggest_possible_act": 101, "discours": [102, 103, 104, 105, 106, 107, 108, 109, 110], "dialogueturn": 103, "utter": 104, "compress": 105, "decompress": 106, "get_prior_turn": 107, "parse_utt_str": 108, "presubst": 109, "swap_dual": 110, "embed": [111, 112, 113, 114, 115, 116], "dummyembedd": 112, "embedd": 113, "hfembedd": 114, "stembedd": 115, "sim": 116, "lf": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "condit": 118, "domain": 119, "elf": 120, "eventu": 121, "individu": 122, "keyword": 123, "keywords_r": 124, "repetit": 126, "ulf": [127, 350, 351, 352, 353], "var": 128, "and_prop_p": 129, "characterizes_prop_p": 130, "equal_prop_p": 131, "expectation_p": 132, "extract_set": 133, "from_lisp_dir": [134, 327], "from_lisp_fil": [135, 328], "is_set": 136, "make_set": 137, "not_prop_p": 138, "or_prop_p": 139, "parse_condit": 140, "parse_eventu": 141, "parse_eventuality_list": 142, "parse_repetit": 143, "remove_typ": 144, "set_union": 145, "memori": [146, 147, 148], "memorystorag": 148, "plannod": 150, "planstep": 151, "expand_plan_nod": 152, "get_first_plan_nod": 153, "get_last_plan_nod": 154, "init_plan_from_eventu": 155, "insert_before_plan_nod": 156, "merge_plan_nod": 157, "visualize_plan": 158, "schema": [159, 160, 161, 162, 163, 164], "section": [159, 160, 161, 162], "dialschema": 160, "epischema": 161, "objschema": 162, "schemalibrari": 164, "transduc": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "base": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "affecttransduc": 167, "answertransduc": 168, "asktransduc": 169, "gisttransduc": 170, "paraphrasetransduc": 171, "pragmatictransduc": 172, "reactiontransduc": 173, "reasonbottomuptransduc": 174, "reasontopdowntransduc": 175, "responsetransduc": 176, "semantictransduc": 177, "subplantransduc": 178, "gpt": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 271, 272, 273, 274, 275, 276, 277], "gptaffecttransduc": 181, "gptanswertransduc": 182, "gptasktransduc": 183, "gptgisttransduc": 184, "gptparaphrasetransduc": 185, "gptpragmatictransduc": 186, "gptreactiontransduc": 187, "gptreasonbottomuptransduc": 188, "gptreasontopdowntransduc": 189, "gptresponsetransduc": 190, "gptsemantictransduc": 191, "gptsubplantransduc": 192, "gpttransduc": 193, "prompt": 194, "valid": 195, "tt": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "ttaffecttransduc": 197, "ttanswertransduc": 198, "ttasktransduc": 199, "ttgisttransduc": 200, "ttparaphrasetransduc": 201, "ttpragmatictransduc": 202, "ttreactiontransduc": 203, "ttreasonbottomuptransduc": 204, "ttreasontopdowntransduc": 205, "ttresponsetransduc": 206, "ttsemantictransduc": 207, "ttsubplantransduc": 208, "tttransduc": 209, "util": [210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "buffer": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "clear": [212, 223], "enqueu": 213, "enqueue_ord": 214, "get_item": 215, "is_empti": 216, "iter": 217, "max_import": 218, "pop_al": 219, "pop_item": 220, "file": [221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "append_fil": 222, "ensure_dir_exist": 224, "ensure_file_exist": 225, "exist": 226, "load_json": 227, "read_fil": 228, "read_lin": 229, "remov": 230, "write_fil": 231, "write_json": 232, "gener": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270], "append": 234, "argmax": 235, "atom": [236, 335], "clear_symtab": 237, "con": 238, "cons_dict": 239, "dict_get": 240, "dict_rem": 241, "dict_rem_v": 242, "dict_substall_kei": 243, "dual_var": 244, "duplicate_var": 245, "episode_nam": 246, "episode_var": 247, "escaped_symbol_p": 248, "flatten": 249, "gentemp": 250, "get_keyword_cont": 251, "indent": 252, "isquot": 253, "linsum": 254, "listp": 255, "normal": 256, "push": 257, "random_el": 258, "rec_remov": 259, "rec_replac": 260, "remove_dupl": 261, "remove_nil": 262, "replaceal": 263, "squash": 264, "standard": 265, "subst": 266, "substal": 267, "symbolp": 268, "to_kei": 269, "variablep": 270, "apply_zip": 272, "cost_gpt": 273, "cost_token": 274, "generate_gpt": 275, "subst_exampl": 276, "subst_kwarg": 277, "sexpr": [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288], "balanced_substr": 279, "clean_lisp": 280, "clean_s_expr": 281, "convert_quot": 282, "list_to_s_expr": 283, "list_to_str": 284, "parse_s_expr": 285, "read_lisp": 286, "standardize_symbol": 287, "write_lisp": 288, "time": [289, 290, 291, 292, 293], "timepoint": 290, "certainty_to_period": 291, "has_elapsed_certainty_period": 292, "choic": [295, 296, 297, 298, 299], "pattern": [295, 296], "node": [295, 296], "templat": [295, 296], "choose_result_for": 296, "is_tree_root": 297, "is_tree_root_claus": 298, "is_tree_root_list": 299, "match": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], "check_position_index_syntax": 301, "dec_num_var": 302, "dot_atom": 303, "e_var": 304, "fill_templ": 305, "flatten_sequ": 306, "hard_atom": 307, "indexed_element_of": 308, "isa": 309, "match_var": 311, "num_var": 312, "ok": 313, "p_var": 314, "position_index": 315, "pred_var_ani": 316, "q_var": 317, "s_var": 318, "s_variant_of_p_var": 319, "seq_var": 320, "soft_var": 321, "spec_funct": 322, "underlying_feat": 323, "val": 324, "pars": [325, 326, 327, 328, 329, 330, 331, 332], "attachfeat": 326, "init_nod": 329, "merge_feat": 330, "merge_tre": 331, "readrul": 332, "pred": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "affirm_adv": 334, "comma": 336, "expr": 337, "lex_ulf": 338, "lst": 339, "modal": 340, "non_neg": 341, "non_neg_mod": 342, "not_medicine_gen": 343, "not_non_alcohol": 344, "prefix_each": 345, "quote_to_list": 346, "split_sent": 347, "zero": 349, "lex": [351, 352, 353], "stem_superl": 352, "to_ulf": 353, "dialogu": 355, "manag": 355, "document": 355}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"eta": [[0, "module-eta"]], "eta.config": [[1, "module-eta.config"]], "eta.config.lissa_gpt": [[2, "module-eta.config.lissa_gpt"]], "eta.config.lissa_gpt.config": [[3, "eta-config-lissa-gpt-config"]], "eta.config.lissa_rule": [[4, "module-eta.config.lissa_rule"]], "eta.config.lissa_rule.config": [[5, "eta-config-lissa-rule-config"]], "eta.config.sophie_gpt": [[6, "module-eta.config.sophie_gpt"]], "eta.config.sophie_gpt.config": [[7, "eta-config-sophie-gpt-config"]], "eta.config.sophie_offline": [[8, "module-eta.config.sophie_offline"]], "eta.config.sophie_offline.config": [[9, "eta-config-sophie-offline-config"]], "eta.config.test": [[10, "module-eta.config.test"]], "eta.config.test.config": [[11, "eta-config-test-config"]], "eta.constants": [[12, "module-eta.constants"]], "eta.constants.ANSWER": [[13, "eta-constants-answer"]], "eta.constants.ARTICULATE_TO": [[14, "eta-constants-articulate-to"]], "eta.constants.ASK": [[15, "eta-constants-ask"]], "eta.constants.CERTAINTY_THRESHOLD": [[16, "eta-constants-certainty-threshold"]], "eta.constants.COREFERENCE_MODE": [[17, "eta-constants-coreference-mode"]], "eta.constants.DEFAULT_IMPORTANCE": [[18, "eta-constants-default-importance"]], "eta.constants.DEFAULT_START": [[19, "eta-constants-default-start"]], "eta.constants.EMBEDDING_DEFAULT_API": [[20, "eta-constants-embedding-default-api"]], "eta.constants.EMBEDDING_DEFAULT_MODEL": [[21, "eta-constants-embedding-default-model"]], "eta.constants.EMOTIONS_LIST": [[22, "eta-constants-emotions-list"]], "eta.constants.EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT": [[23, "eta-constants-expected-step-failure-period-coefficient"]], "eta.constants.HERE": [[24, "eta-constants-here"]], "eta.constants.IO_PATH": [[25, "eta-constants-io-path"]], "eta.constants.KEY_PATH": [[26, "eta-constants-key-path"]], "eta.constants.ME": [[27, "eta-constants-me"]], "eta.constants.NOOP": [[28, "eta-constants-noop"]], "eta.constants.NOOP_GEN": [[29, "eta-constants-noop-gen"]], "eta.constants.NOOP_YOU": [[30, "eta-constants-noop-you"]], "eta.constants.NOW": [[31, "eta-constants-now"]], "eta.constants.PARAPHRASE_TO": [[32, "eta-constants-paraphrase-to"]], "eta.constants.REACT_TO": [[33, "eta-constants-react-to"]], "eta.constants.REASONING_DEPTH_LIMIT": [[34, "eta-constants-reasoning-depth-limit"]], "eta.constants.RECENCY_CUTOFF": [[35, "eta-constants-recency-cutoff"]], "eta.constants.REPLY_TO": [[36, "eta-constants-reply-to"]], "eta.constants.RESPOND_TO": [[37, "eta-constants-respond-to"]], "eta.constants.SAY_BYE": [[38, "eta-constants-say-bye"]], "eta.constants.SAY_TO": [[39, "eta-constants-say-to"]], "eta.constants.SLEEPTIME": [[40, "eta-constants-sleeptime"]], "eta.constants.SPEECH_ACTS": [[41, "eta-constants-speech-acts"]], "eta.constants.SYMTAB_PATH": [[42, "eta-constants-symtab-path"]], "eta.constants.TELIC_VERBS": [[43, "eta-constants-telic-verbs"]], "eta.constants.YOU": [[44, "eta-constants-you"]], "eta.core": [[45, "module-eta.core"]], "eta.core.eta": [[46, "module-eta.core.eta"]], "eta.core.eta.DialogueState": [[47, "eta-core-eta-dialoguestate"]], "eta.core.eta.ProcessManager": [[48, "eta-core-eta-processmanager"]], "eta.core.eta.eta": [[49, "eta-core-eta-eta"]], "eta.core.eta.main": [[50, "eta-core-eta-main"]], "eta.core.execution": [[51, "module-eta.core.execution"]], "eta.core.execution.execute_say_bye": [[52, "eta-core-execution-execute-say-bye"]], "eta.core.execution.execute_say_to": [[53, "eta-core-execution-execute-say-to"]], "eta.core.execution.execution_loop": [[54, "eta-core-execution-execution-loop"]], "eta.core.execution.fail_curr_step": [[55, "eta-core-execution-fail-curr-step"]], "eta.core.execution.get_action": [[56, "eta-core-execution-get-action"]], "eta.core.execution.inquire_truth_of_curr_step": [[57, "eta-core-execution-inquire-truth-of-curr-step"]], "eta.core.execution.me_pred": [[58, "eta-core-execution-me-pred"]], "eta.core.execution.process_condition_step": [[59, "eta-core-execution-process-condition-step"]], "eta.core.execution.process_expected_step": [[60, "eta-core-execution-process-expected-step"]], "eta.core.execution.process_intended_step": [[61, "eta-core-execution-process-intended-step"]], "eta.core.execution.process_repetition_step": [[62, "eta-core-execution-process-repetition-step"]], "eta.core.execution.say_bye_step": [[63, "eta-core-execution-say-bye-step"]], "eta.core.execution.say_to_step": [[64, "eta-core-execution-say-to-step"]], "eta.core.execution.you_pred": [[65, "eta-core-execution-you-pred"]], "eta.core.perception": [[66, "module-eta.core.perception"]], "eta.core.perception.observe": [[67, "eta-core-perception-observe"]], "eta.core.perception.perception_loop": [[68, "eta-core-perception-perception-loop"]], "eta.core.perception.process_observations": [[69, "eta-core-perception-process-observations"]], "eta.core.perception.process_utterances": [[70, "eta-core-perception-process-utterances"]], "eta.core.planning": [[71, "module-eta.core.planning"]], "eta.core.planning.add_possible_actions_to_plan": [[72, "eta-core-planning-add-possible-actions-to-plan"]], "eta.core.planning.answer_step": [[73, "eta-core-planning-answer-step"]], "eta.core.planning.ask_step": [[74, "eta-core-planning-ask-step"]], "eta.core.planning.equivalent_speech_acts": [[75, "eta-core-planning-equivalent-speech-acts"]], "eta.core.planning.expand_condition_step": [[76, "eta-core-planning-expand-condition-step"]], "eta.core.planning.expand_plan_steps": [[77, "eta-core-planning-expand-plan-steps"]], "eta.core.planning.expand_primitive_step": [[78, "eta-core-planning-expand-primitive-step"]], "eta.core.planning.expand_repetition_step": [[79, "eta-core-planning-expand-repetition-step"]], "eta.core.planning.merge_plan_steps": [[80, "eta-core-planning-merge-plan-steps"]], "eta.core.planning.paraphrase_step": [[81, "eta-core-planning-paraphrase-step"]], "eta.core.planning.plan_answer": [[82, "eta-core-planning-plan-answer"]], "eta.core.planning.plan_ask": [[83, "eta-core-planning-plan-ask"]], "eta.core.planning.plan_paraphrase": [[84, "eta-core-planning-plan-paraphrase"]], "eta.core.planning.plan_react": [[85, "eta-core-planning-plan-react"]], "eta.core.planning.plan_respond": [[86, "eta-core-planning-plan-respond"]], "eta.core.planning.planning_loop": [[87, "eta-core-planning-planning-loop"]], "eta.core.planning.react_step": [[88, "eta-core-planning-react-step"]], "eta.core.planning.relative_speech_act_step": [[89, "eta-core-planning-relative-speech-act-step"]], "eta.core.planning.reorder_plan_steps": [[90, "eta-core-planning-reorder-plan-steps"]], "eta.core.planning.reply_step": [[91, "eta-core-planning-reply-step"]], "eta.core.planning.respond_step": [[92, "eta-core-planning-respond-step"]], "eta.core.planning.say_to_step_from_utt": [[93, "eta-core-planning-say-to-step-from-utt"]], "eta.core.planning.say_to_step_from_utts": [[94, "eta-core-planning-say-to-step-from-utts"]], "eta.core.planning.schema_step": [[95, "eta-core-planning-schema-step"]], "eta.core.planning.split_schema_step": [[96, "eta-core-planning-split-schema-step"]], "eta.core.reasoning": [[97, "module-eta.core.reasoning"]], "eta.core.reasoning.infer_bottom_up": [[98, "eta-core-reasoning-infer-bottom-up"]], "eta.core.reasoning.infer_top_down": [[99, "eta-core-reasoning-infer-top-down"]], "eta.core.reasoning.reasoning_loop": [[100, "eta-core-reasoning-reasoning-loop"]], "eta.core.reasoning.suggest_possible_actions": [[101, "eta-core-reasoning-suggest-possible-actions"]], "eta.discourse": [[102, "module-eta.discourse"]], "eta.discourse.DialogueTurn": [[103, "eta-discourse-dialogueturn"]], "eta.discourse.Utterance": [[104, "eta-discourse-utterance"]], "eta.discourse.compress": [[105, "eta-discourse-compress"]], "eta.discourse.decompress": [[106, "eta-discourse-decompress"]], "eta.discourse.get_prior_turn": [[107, "eta-discourse-get-prior-turn"]], "eta.discourse.parse_utt_str": [[108, "eta-discourse-parse-utt-str"]], "eta.discourse.presubst": [[109, "eta-discourse-presubst"]], "eta.discourse.swap_duals": [[110, "eta-discourse-swap-duals"]], "eta.embedding": [[111, "module-eta.embedding"]], "eta.embedding.DummyEmbedder": [[112, "eta-embedding-dummyembedder"]], "eta.embedding.Embedder": [[113, "eta-embedding-embedder"]], "eta.embedding.HFEmbedder": [[114, "eta-embedding-hfembedder"]], "eta.embedding.STEmbedder": [[115, "eta-embedding-stembedder"]], "eta.embedding.sim": [[116, "eta-embedding-sim"]], "eta.lf": [[117, "module-eta.lf"]], "eta.lf.Condition": [[118, "eta-lf-condition"]], "eta.lf.Domain": [[119, "eta-lf-domain"]], "eta.lf.ELF": [[120, "eta-lf-elf"]], "eta.lf.Eventuality": [[121, "eta-lf-eventuality"]], "eta.lf.Individual": [[122, "eta-lf-individual"]], "eta.lf.KEYWORDS": [[123, "eta-lf-keywords"]], "eta.lf.KEYWORDS_R": [[124, "eta-lf-keywords-r"]], "eta.lf.LF": [[125, "eta-lf-lf"]], "eta.lf.Repetition": [[126, "eta-lf-repetition"]], "eta.lf.ULF": [[127, "eta-lf-ulf"]], "eta.lf.Var": [[128, "eta-lf-var"]], "eta.lf.and_prop_p": [[129, "eta-lf-and-prop-p"]], "eta.lf.characterizes_prop_p": [[130, "eta-lf-characterizes-prop-p"]], "eta.lf.equal_prop_p": [[131, "eta-lf-equal-prop-p"]], "eta.lf.expectation_p": [[132, "eta-lf-expectation-p"]], "eta.lf.extract_set": [[133, "eta-lf-extract-set"]], "eta.lf.from_lisp_dirs": [[134, "eta-lf-from-lisp-dirs"]], "eta.lf.from_lisp_file": [[135, "eta-lf-from-lisp-file"]], "eta.lf.is_set": [[136, "eta-lf-is-set"]], "eta.lf.make_set": [[137, "eta-lf-make-set"]], "eta.lf.not_prop_p": [[138, "eta-lf-not-prop-p"]], "eta.lf.or_prop_p": [[139, "eta-lf-or-prop-p"]], "eta.lf.parse_condition": [[140, "eta-lf-parse-condition"]], "eta.lf.parse_eventuality": [[141, "eta-lf-parse-eventuality"]], "eta.lf.parse_eventuality_list": [[142, "eta-lf-parse-eventuality-list"]], "eta.lf.parse_repetition": [[143, "eta-lf-parse-repetition"]], "eta.lf.remove_type": [[144, "eta-lf-remove-type"]], "eta.lf.set_union": [[145, "eta-lf-set-union"]], "eta.memory": [[146, "module-eta.memory"]], "eta.memory.Memory": [[147, "eta-memory-memory"]], "eta.memory.MemoryStorage": [[148, "eta-memory-memorystorage"]], "eta.plan": [[149, "module-eta.plan"]], "eta.plan.PlanNode": [[150, "eta-plan-plannode"]], "eta.plan.PlanStep": [[151, "eta-plan-planstep"]], "eta.plan.expand_plan_node": [[152, "eta-plan-expand-plan-node"]], "eta.plan.get_first_plan_node": [[153, "eta-plan-get-first-plan-node"]], "eta.plan.get_last_plan_node": [[154, "eta-plan-get-last-plan-node"]], "eta.plan.init_plan_from_eventualities": [[155, "eta-plan-init-plan-from-eventualities"]], "eta.plan.insert_before_plan_node": [[156, "eta-plan-insert-before-plan-node"]], "eta.plan.merge_plan_nodes": [[157, "eta-plan-merge-plan-nodes"]], "eta.plan.visualize_plan": [[158, "eta-plan-visualize-plan"]], "eta.schema": [[159, "module-eta.schema"]], "Sections": [[159, "sections"], [159, "id1"], [159, "id2"], [160, "sections"], [161, "sections"], [162, "sections"]], "eta.schema.DialSchema": [[160, "eta-schema-dialschema"]], "eta.schema.EpiSchema": [[161, "eta-schema-epischema"]], "eta.schema.ObjSchema": [[162, "eta-schema-objschema"]], "eta.schema.Schema": [[163, "eta-schema-schema"]], "eta.schema.SchemaLibrary": [[164, "eta-schema-schemalibrary"]], "eta.transducers": [[165, "module-eta.transducers"]], "eta.transducers.base": [[166, "module-eta.transducers.base"]], "eta.transducers.base.AffectTransducer": [[167, "eta-transducers-base-affecttransducer"]], "eta.transducers.base.AnswerTransducer": [[168, "eta-transducers-base-answertransducer"]], "eta.transducers.base.AskTransducer": [[169, "eta-transducers-base-asktransducer"]], "eta.transducers.base.GistTransducer": [[170, "eta-transducers-base-gisttransducer"]], "eta.transducers.base.ParaphraseTransducer": [[171, "eta-transducers-base-paraphrasetransducer"]], "eta.transducers.base.PragmaticTransducer": [[172, "eta-transducers-base-pragmatictransducer"]], "eta.transducers.base.ReactionTransducer": [[173, "eta-transducers-base-reactiontransducer"]], "eta.transducers.base.ReasonBottomUpTransducer": [[174, "eta-transducers-base-reasonbottomuptransducer"]], "eta.transducers.base.ReasonTopDownTransducer": [[175, "eta-transducers-base-reasontopdowntransducer"]], "eta.transducers.base.ResponseTransducer": [[176, "eta-transducers-base-responsetransducer"]], "eta.transducers.base.SemanticTransducer": [[177, "eta-transducers-base-semantictransducer"]], "eta.transducers.base.SubplanTransducer": [[178, "eta-transducers-base-subplantransducer"]], "eta.transducers.base.Transducer": [[179, "eta-transducers-base-transducer"]], "eta.transducers.gpt": [[180, "module-eta.transducers.gpt"]], "eta.transducers.gpt.GPTAffectTransducer": [[181, "eta-transducers-gpt-gptaffecttransducer"]], "eta.transducers.gpt.GPTAnswerTransducer": [[182, "eta-transducers-gpt-gptanswertransducer"]], "eta.transducers.gpt.GPTAskTransducer": [[183, "eta-transducers-gpt-gptasktransducer"]], "eta.transducers.gpt.GPTGistTransducer": [[184, "eta-transducers-gpt-gptgisttransducer"]], "eta.transducers.gpt.GPTParaphraseTransducer": [[185, "eta-transducers-gpt-gptparaphrasetransducer"]], "eta.transducers.gpt.GPTPragmaticTransducer": [[186, "eta-transducers-gpt-gptpragmatictransducer"]], "eta.transducers.gpt.GPTReactionTransducer": [[187, "eta-transducers-gpt-gptreactiontransducer"]], "eta.transducers.gpt.GPTReasonBottomUpTransducer": [[188, "eta-transducers-gpt-gptreasonbottomuptransducer"]], "eta.transducers.gpt.GPTReasonTopDownTransducer": [[189, "eta-transducers-gpt-gptreasontopdowntransducer"]], "eta.transducers.gpt.GPTResponseTransducer": [[190, "eta-transducers-gpt-gptresponsetransducer"]], "eta.transducers.gpt.GPTSemanticTransducer": [[191, "eta-transducers-gpt-gptsemantictransducer"]], "eta.transducers.gpt.GPTSubplanTransducer": [[192, "eta-transducers-gpt-gptsubplantransducer"]], "eta.transducers.gpt.GPTTransducer": [[193, "eta-transducers-gpt-gpttransducer"]], "eta.transducers.gpt.PROMPTS": [[194, "eta-transducers-gpt-prompts"]], "eta.transducers.gpt.VALIDATORS": [[195, "eta-transducers-gpt-validators"]], "eta.transducers.tt": [[196, "module-eta.transducers.tt"]], "eta.transducers.tt.TTAffectTransducer": [[197, "eta-transducers-tt-ttaffecttransducer"]], "eta.transducers.tt.TTAnswerTransducer": [[198, "eta-transducers-tt-ttanswertransducer"]], "eta.transducers.tt.TTAskTransducer": [[199, "eta-transducers-tt-ttasktransducer"]], "eta.transducers.tt.TTGistTransducer": [[200, "eta-transducers-tt-ttgisttransducer"]], "eta.transducers.tt.TTParaphraseTransducer": [[201, "eta-transducers-tt-ttparaphrasetransducer"]], "eta.transducers.tt.TTPragmaticTransducer": [[202, "eta-transducers-tt-ttpragmatictransducer"]], "eta.transducers.tt.TTReactionTransducer": [[203, "eta-transducers-tt-ttreactiontransducer"]], "eta.transducers.tt.TTReasonBottomUpTransducer": [[204, "eta-transducers-tt-ttreasonbottomuptransducer"]], "eta.transducers.tt.TTReasonTopDownTransducer": [[205, "eta-transducers-tt-ttreasontopdowntransducer"]], "eta.transducers.tt.TTResponseTransducer": [[206, "eta-transducers-tt-ttresponsetransducer"]], "eta.transducers.tt.TTSemanticTransducer": [[207, "eta-transducers-tt-ttsemantictransducer"]], "eta.transducers.tt.TTSubplanTransducer": [[208, "eta-transducers-tt-ttsubplantransducer"]], "eta.transducers.tt.TTTransducer": [[209, "eta-transducers-tt-tttransducer"]], "eta.util": [[210, "module-eta.util"]], "eta.util.buffer": [[211, "module-eta.util.buffer"]], "eta.util.buffer.clear": [[212, "eta-util-buffer-clear"]], "eta.util.buffer.enqueue": [[213, "eta-util-buffer-enqueue"]], "eta.util.buffer.enqueue_ordered": [[214, "eta-util-buffer-enqueue-ordered"]], "eta.util.buffer.get_item": [[215, "eta-util-buffer-get-item"]], "eta.util.buffer.is_empty": [[216, "eta-util-buffer-is-empty"]], "eta.util.buffer.iterate": [[217, "eta-util-buffer-iterate"]], "eta.util.buffer.max_importance": [[218, "eta-util-buffer-max-importance"]], "eta.util.buffer.pop_all": [[219, "eta-util-buffer-pop-all"]], "eta.util.buffer.pop_item": [[220, "eta-util-buffer-pop-item"]], "eta.util.file": [[221, "module-eta.util.file"]], "eta.util.file.append_file": [[222, "eta-util-file-append-file"]], "eta.util.file.clear": [[223, "eta-util-file-clear"]], "eta.util.file.ensure_dir_exists": [[224, "eta-util-file-ensure-dir-exists"]], "eta.util.file.ensure_file_exists": [[225, "eta-util-file-ensure-file-exists"]], "eta.util.file.exists": [[226, "eta-util-file-exists"]], "eta.util.file.load_json": [[227, "eta-util-file-load-json"]], "eta.util.file.read_file": [[228, "eta-util-file-read-file"]], "eta.util.file.read_lines": [[229, "eta-util-file-read-lines"]], "eta.util.file.remove": [[230, "eta-util-file-remove"]], "eta.util.file.write_file": [[231, "eta-util-file-write-file"]], "eta.util.file.write_json": [[232, "eta-util-file-write-json"]], "eta.util.general": [[233, "module-eta.util.general"]], "eta.util.general.append": [[234, "eta-util-general-append"]], "eta.util.general.argmax": [[235, "eta-util-general-argmax"]], "eta.util.general.atom": [[236, "eta-util-general-atom"]], "eta.util.general.clear_symtab": [[237, "eta-util-general-clear-symtab"]], "eta.util.general.cons": [[238, "eta-util-general-cons"]], "eta.util.general.cons_dict": [[239, "eta-util-general-cons-dict"]], "eta.util.general.dict_get": [[240, "eta-util-general-dict-get"]], "eta.util.general.dict_rem": [[241, "eta-util-general-dict-rem"]], "eta.util.general.dict_rem_val": [[242, "eta-util-general-dict-rem-val"]], "eta.util.general.dict_substall_keys": [[243, "eta-util-general-dict-substall-keys"]], "eta.util.general.dual_var": [[244, "eta-util-general-dual-var"]], "eta.util.general.duplicate_var": [[245, "eta-util-general-duplicate-var"]], "eta.util.general.episode_name": [[246, "eta-util-general-episode-name"]], "eta.util.general.episode_var": [[247, "eta-util-general-episode-var"]], "eta.util.general.escaped_symbol_p": [[248, "eta-util-general-escaped-symbol-p"]], "eta.util.general.flatten": [[249, "eta-util-general-flatten"]], "eta.util.general.gentemp": [[250, "eta-util-general-gentemp"]], "eta.util.general.get_keyword_contents": [[251, "eta-util-general-get-keyword-contents"]], "eta.util.general.indent": [[252, "eta-util-general-indent"]], "eta.util.general.isquote": [[253, "eta-util-general-isquote"]], "eta.util.general.linsum": [[254, "eta-util-general-linsum"]], "eta.util.general.listp": [[255, "eta-util-general-listp"]], "eta.util.general.normalize": [[256, "eta-util-general-normalize"]], "eta.util.general.push": [[257, "eta-util-general-push"]], "eta.util.general.random_element": [[258, "eta-util-general-random-element"]], "eta.util.general.rec_remove": [[259, "eta-util-general-rec-remove"]], "eta.util.general.rec_replace": [[260, "eta-util-general-rec-replace"]], "eta.util.general.remove_duplicates": [[261, "eta-util-general-remove-duplicates"]], "eta.util.general.remove_nil": [[262, "eta-util-general-remove-nil"]], "eta.util.general.replaceall": [[263, "eta-util-general-replaceall"]], "eta.util.general.squash": [[264, "eta-util-general-squash"]], "eta.util.general.standardize": [[265, "eta-util-general-standardize"]], "eta.util.general.subst": [[266, "eta-util-general-subst"]], "eta.util.general.substall": [[267, "eta-util-general-substall"]], "eta.util.general.symbolp": [[268, "eta-util-general-symbolp"]], "eta.util.general.to_key": [[269, "eta-util-general-to-key"]], "eta.util.general.variablep": [[270, "eta-util-general-variablep"]], "eta.util.gpt": [[271, "module-eta.util.gpt"]], "eta.util.gpt.apply_zip": [[272, "eta-util-gpt-apply-zip"]], "eta.util.gpt.cost_gpt": [[273, "eta-util-gpt-cost-gpt"]], "eta.util.gpt.cost_tokens": [[274, "eta-util-gpt-cost-tokens"]], "eta.util.gpt.generate_gpt": [[275, "eta-util-gpt-generate-gpt"]], "eta.util.gpt.subst_examples": [[276, "eta-util-gpt-subst-examples"]], "eta.util.gpt.subst_kwargs": [[277, "eta-util-gpt-subst-kwargs"]], "eta.util.sexpr": [[278, "module-eta.util.sexpr"]], "eta.util.sexpr.balanced_substr": [[279, "eta-util-sexpr-balanced-substr"]], "eta.util.sexpr.clean_lisp": [[280, "eta-util-sexpr-clean-lisp"]], "eta.util.sexpr.clean_s_expr": [[281, "eta-util-sexpr-clean-s-expr"]], "eta.util.sexpr.convert_quotes": [[282, "eta-util-sexpr-convert-quotes"]], "eta.util.sexpr.list_to_s_expr": [[283, "eta-util-sexpr-list-to-s-expr"]], "eta.util.sexpr.list_to_str": [[284, "eta-util-sexpr-list-to-str"]], "eta.util.sexpr.parse_s_expr": [[285, "eta-util-sexpr-parse-s-expr"]], "eta.util.sexpr.read_lisp": [[286, "eta-util-sexpr-read-lisp"]], "eta.util.sexpr.standardize_symbols": [[287, "eta-util-sexpr-standardize-symbols"]], "eta.util.sexpr.write_lisp": [[288, "eta-util-sexpr-write-lisp"]], "eta.util.time": [[289, "module-eta.util.time"]], "eta.util.time.TimePoint": [[290, "eta-util-time-timepoint"]], "eta.util.time.certainty_to_period": [[291, "eta-util-time-certainty-to-period"]], "eta.util.time.has_elapsed_certainty_period": [[292, "eta-util-time-has-elapsed-certainty-period"]], "eta.util.time.now": [[293, "eta-util-time-now"]], "eta.util.tt": [[294, "module-eta.util.tt"]], "eta.util.tt.choice": [[295, "module-eta.util.tt.choice"]], "Pattern nodes": [[295, "pattern-nodes"], [296, "pattern-nodes"]], "Template nodes": [[295, "template-nodes"], [296, "template-nodes"]], "eta.util.tt.choice.choose_result_for": [[296, "eta-util-tt-choice-choose-result-for"]], "eta.util.tt.choice.is_tree_root": [[297, "eta-util-tt-choice-is-tree-root"]], "eta.util.tt.choice.is_tree_root_clause": [[298, "eta-util-tt-choice-is-tree-root-clause"]], "eta.util.tt.choice.is_tree_root_list": [[299, "eta-util-tt-choice-is-tree-root-list"]], "eta.util.tt.match": [[300, "module-eta.util.tt.match"]], "eta.util.tt.match.check_position_index_syntax": [[301, "eta-util-tt-match-check-position-index-syntax"]], "eta.util.tt.match.dec_num_var": [[302, "eta-util-tt-match-dec-num-var"]], "eta.util.tt.match.dot_atom": [[303, "eta-util-tt-match-dot-atom"]], "eta.util.tt.match.e_var": [[304, "eta-util-tt-match-e-var"]], "eta.util.tt.match.fill_template": [[305, "eta-util-tt-match-fill-template"]], "eta.util.tt.match.flatten_sequences": [[306, "eta-util-tt-match-flatten-sequences"]], "eta.util.tt.match.hard_atom": [[307, "eta-util-tt-match-hard-atom"]], "eta.util.tt.match.indexed_element_of": [[308, "eta-util-tt-match-indexed-element-of"]], "eta.util.tt.match.isa": [[309, "eta-util-tt-match-isa"]], "eta.util.tt.match.match": [[310, "eta-util-tt-match-match"]], "eta.util.tt.match.match_var": [[311, "eta-util-tt-match-match-var"]], "eta.util.tt.match.num_var": [[312, "eta-util-tt-match-num-var"]], "eta.util.tt.match.ok": [[313, "eta-util-tt-match-ok"]], "eta.util.tt.match.p_var": [[314, "eta-util-tt-match-p-var"]], "eta.util.tt.match.position_index": [[315, "eta-util-tt-match-position-index"]], "eta.util.tt.match.pred_var_any": [[316, "eta-util-tt-match-pred-var-any"]], "eta.util.tt.match.q_var": [[317, "eta-util-tt-match-q-var"]], "eta.util.tt.match.s_var": [[318, "eta-util-tt-match-s-var"]], "eta.util.tt.match.s_variant_of_p_var": [[319, "eta-util-tt-match-s-variant-of-p-var"]], "eta.util.tt.match.seq_var": [[320, "eta-util-tt-match-seq-var"]], "eta.util.tt.match.soft_var": [[321, "eta-util-tt-match-soft-var"]], "eta.util.tt.match.spec_function": [[322, "eta-util-tt-match-spec-function"]], "eta.util.tt.match.underlying_feat": [[323, "eta-util-tt-match-underlying-feat"]], "eta.util.tt.match.val": [[324, "eta-util-tt-match-val"]], "eta.util.tt.parse": [[325, "module-eta.util.tt.parse"]], "eta.util.tt.parse.attachfeat": [[326, "eta-util-tt-parse-attachfeat"]], "eta.util.tt.parse.from_lisp_dirs": [[327, "eta-util-tt-parse-from-lisp-dirs"]], "eta.util.tt.parse.from_lisp_file": [[328, "eta-util-tt-parse-from-lisp-file"]], "eta.util.tt.parse.init_node": [[329, "eta-util-tt-parse-init-node"]], "eta.util.tt.parse.merge_feats": [[330, "eta-util-tt-parse-merge-feats"]], "eta.util.tt.parse.merge_trees": [[331, "eta-util-tt-parse-merge-trees"]], "eta.util.tt.parse.readrules": [[332, "eta-util-tt-parse-readrules"]], "eta.util.tt.preds": [[333, "module-eta.util.tt.preds"]], "eta.util.tt.preds.affirm_adv": [[334, "eta-util-tt-preds-affirm-adv"]], "eta.util.tt.preds.atom": [[335, "eta-util-tt-preds-atom"]], "eta.util.tt.preds.comma": [[336, "eta-util-tt-preds-comma"]], "eta.util.tt.preds.expr": [[337, "eta-util-tt-preds-expr"]], "eta.util.tt.preds.lex_ulf": [[338, "eta-util-tt-preds-lex-ulf"]], "eta.util.tt.preds.lst": [[339, "eta-util-tt-preds-lst"]], "eta.util.tt.preds.modal": [[340, "eta-util-tt-preds-modal"]], "eta.util.tt.preds.non_neg": [[341, "eta-util-tt-preds-non-neg"]], "eta.util.tt.preds.non_neg_mod": [[342, "eta-util-tt-preds-non-neg-mod"]], "eta.util.tt.preds.not_medicine_gen": [[343, "eta-util-tt-preds-not-medicine-gen"]], "eta.util.tt.preds.not_non_alcoholic": [[344, "eta-util-tt-preds-not-non-alcoholic"]], "eta.util.tt.preds.prefix_each": [[345, "eta-util-tt-preds-prefix-each"]], "eta.util.tt.preds.quote_to_list": [[346, "eta-util-tt-preds-quote-to-list"]], "eta.util.tt.preds.split_sentences": [[347, "eta-util-tt-preds-split-sentences"]], "eta.util.tt.preds.test": [[348, "eta-util-tt-preds-test"]], "eta.util.tt.preds.zero": [[349, "eta-util-tt-preds-zero"]], "eta.util.ulf": [[350, "module-eta.util.ulf"]], "eta.util.ulf.lex": [[351, "module-eta.util.ulf.lex"]], "eta.util.ulf.lex.stem_superlative": [[352, "eta-util-ulf-lex-stem-superlative"]], "eta.util.ulf.lex.to_ulf": [[353, "eta-util-ulf-lex-to-ulf"]], "Eta Dialogue Manager Documentation": [[355, "eta-dialogue-manager-documentation"]]}, "indexentries": {"eta": [[0, "module-eta"]], "module": [[0, "module-eta"], [1, "module-eta.config"], [2, "module-eta.config.lissa_gpt"], [4, "module-eta.config.lissa_rule"], [6, "module-eta.config.sophie_gpt"], [8, "module-eta.config.sophie_offline"], [10, "module-eta.config.test"], [12, "module-eta.constants"], [45, "module-eta.core"], [46, "module-eta.core.eta"], [51, "module-eta.core.execution"], [66, "module-eta.core.perception"], [71, "module-eta.core.planning"], [97, "module-eta.core.reasoning"], [102, "module-eta.discourse"], [111, "module-eta.embedding"], [117, "module-eta.lf"], [146, "module-eta.memory"], [149, "module-eta.plan"], [159, "module-eta.schema"], [165, "module-eta.transducers"], [166, "module-eta.transducers.base"], [180, "module-eta.transducers.gpt"], [196, "module-eta.transducers.tt"], [210, "module-eta.util"], [211, "module-eta.util.buffer"], [221, "module-eta.util.file"], [233, "module-eta.util.general"], [271, "module-eta.util.gpt"], [278, "module-eta.util.sexpr"], [289, "module-eta.util.time"], [294, "module-eta.util.tt"], [295, "module-eta.util.tt.choice"], [300, "module-eta.util.tt.match"], [325, "module-eta.util.tt.parse"], [333, "module-eta.util.tt.preds"], [350, "module-eta.util.ulf"], [351, "module-eta.util.ulf.lex"]], "eta.config": [[1, "module-eta.config"]], "eta.config.lissa_gpt": [[2, "module-eta.config.lissa_gpt"]], "config() (in module eta.config.lissa_gpt)": [[3, "eta.config.lissa_gpt.config"]], "eta.config.lissa_rule": [[4, "module-eta.config.lissa_rule"]], "config() (in module eta.config.lissa_rule)": [[5, "eta.config.lissa_rule.config"]], "eta.config.sophie_gpt": [[6, "module-eta.config.sophie_gpt"]], "config() (in module eta.config.sophie_gpt)": [[7, "eta.config.sophie_gpt.config"]], "eta.config.sophie_offline": [[8, "module-eta.config.sophie_offline"]], "config() (in module eta.config.sophie_offline)": [[9, "eta.config.sophie_offline.config"]], "eta.config.test": [[10, "module-eta.config.test"]], "config() (in module eta.config.test)": [[11, "eta.config.test.config"]], "answer (in module eta.constants)": [[12, "eta.constants.ANSWER"], [13, "eta.constants.ANSWER"]], "articulate_to (in module eta.constants)": [[12, "eta.constants.ARTICULATE_TO"], [14, "eta.constants.ARTICULATE_TO"]], "ask (in module eta.constants)": [[12, "eta.constants.ASK"], [15, "eta.constants.ASK"]], "certainty_threshold (in module eta.constants)": [[12, "eta.constants.CERTAINTY_THRESHOLD"], [16, "eta.constants.CERTAINTY_THRESHOLD"]], "coreference_mode (in module eta.constants)": [[12, "eta.constants.COREFERENCE_MODE"], [17, "eta.constants.COREFERENCE_MODE"]], "default_importance (in module eta.constants)": [[12, "eta.constants.DEFAULT_IMPORTANCE"], [18, "eta.constants.DEFAULT_IMPORTANCE"]], "default_start (in module eta.constants)": [[12, "eta.constants.DEFAULT_START"], [19, "eta.constants.DEFAULT_START"]], "embedding_default_api (in module eta.constants)": [[12, "eta.constants.EMBEDDING_DEFAULT_API"], [20, "eta.constants.EMBEDDING_DEFAULT_API"]], "embedding_default_model (in module eta.constants)": [[12, "eta.constants.EMBEDDING_DEFAULT_MODEL"], [21, "eta.constants.EMBEDDING_DEFAULT_MODEL"]], "emotions_list (in module eta.constants)": [[12, "eta.constants.EMOTIONS_LIST"], [22, "eta.constants.EMOTIONS_LIST"]], "expected_step_failure_period_coefficient (in module eta.constants)": [[12, "eta.constants.EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT"], [23, "eta.constants.EXPECTED_STEP_FAILURE_PERIOD_COEFFICIENT"]], "here (in module eta.constants)": [[12, "eta.constants.HERE"], [24, "eta.constants.HERE"]], "io_path (in module eta.constants)": [[12, "eta.constants.IO_PATH"], [25, "eta.constants.IO_PATH"]], "key_path (in module eta.constants)": [[12, "eta.constants.KEY_PATH"], [26, "eta.constants.KEY_PATH"]], "me (in module eta.constants)": [[12, "eta.constants.ME"], [27, "eta.constants.ME"]], "noop (in module eta.constants)": [[12, "eta.constants.NOOP"], [28, "eta.constants.NOOP"]], "noop_gen (in module eta.constants)": [[12, "eta.constants.NOOP_GEN"], [29, "eta.constants.NOOP_GEN"]], "noop_you (in module eta.constants)": [[12, "eta.constants.NOOP_YOU"], [30, "eta.constants.NOOP_YOU"]], "now (in module eta.constants)": [[12, "eta.constants.NOW"], [31, "eta.constants.NOW"]], "paraphrase_to (in module eta.constants)": [[12, "eta.constants.PARAPHRASE_TO"], [32, "eta.constants.PARAPHRASE_TO"]], "react_to (in module eta.constants)": [[12, "eta.constants.REACT_TO"], [33, "eta.constants.REACT_TO"]], "reasoning_depth_limit (in module eta.constants)": [[12, "eta.constants.REASONING_DEPTH_LIMIT"], [34, "eta.constants.REASONING_DEPTH_LIMIT"]], "recency_cutoff (in module eta.constants)": [[12, "eta.constants.RECENCY_CUTOFF"], [35, "eta.constants.RECENCY_CUTOFF"]], "reply_to (in module eta.constants)": [[12, "eta.constants.REPLY_TO"], [36, "eta.constants.REPLY_TO"]], "respond_to (in module eta.constants)": [[12, "eta.constants.RESPOND_TO"], [37, "eta.constants.RESPOND_TO"]], "say_bye (in module eta.constants)": [[12, "eta.constants.SAY_BYE"], [38, "eta.constants.SAY_BYE"]], "say_to (in module eta.constants)": [[12, "eta.constants.SAY_TO"], [39, "eta.constants.SAY_TO"]], "sleeptime (in module eta.constants)": [[12, "eta.constants.SLEEPTIME"], [40, "eta.constants.SLEEPTIME"]], "speech_acts (in module eta.constants)": [[12, "eta.constants.SPEECH_ACTS"], [41, "eta.constants.SPEECH_ACTS"]], "symtab_path (in module eta.constants)": [[12, "eta.constants.SYMTAB_PATH"], [42, "eta.constants.SYMTAB_PATH"]], "telic_verbs (in module eta.constants)": [[12, "eta.constants.TELIC_VERBS"], [43, "eta.constants.TELIC_VERBS"]], "you (in module eta.constants)": [[12, "eta.constants.YOU"], [44, "eta.constants.YOU"]], "eta.constants": [[12, "module-eta.constants"]], "eta.core": [[45, "module-eta.core"]], "dialoguestate (class in eta.core.eta)": [[46, "eta.core.eta.DialogueState"], [47, "eta.core.eta.DialogueState"]], "processmanager (class in eta.core.eta)": [[46, "eta.core.eta.ProcessManager"], [48, "eta.core.eta.ProcessManager"]], "access_from_context() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.access_from_context"], [47, "eta.core.eta.DialogueState.access_from_context"]], "add_all_to_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.add_all_to_buffer"], [47, "eta.core.eta.DialogueState.add_all_to_buffer"]], "add_to_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.add_to_buffer"], [47, "eta.core.eta.DialogueState.add_to_buffer"]], "add_to_buffer_if_empty() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.add_to_buffer_if_empty"], [47, "eta.core.eta.DialogueState.add_to_buffer_if_empty"]], "add_to_context() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.add_to_context"], [47, "eta.core.eta.DialogueState.add_to_context"]], "add_to_memory() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.add_to_memory"], [47, "eta.core.eta.DialogueState.add_to_memory"]], "advance_plan() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.advance_plan"], [47, "eta.core.eta.DialogueState.advance_plan"]], "apply_transducer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.apply_transducer"], [47, "eta.core.eta.DialogueState.apply_transducer"]], "bind() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.bind"], [47, "eta.core.eta.DialogueState.bind"]], "buffer_empty() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.buffer_empty"], [47, "eta.core.eta.DialogueState.buffer_empty"]], "buffers (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.buffers"], [47, "eta.core.eta.DialogueState.buffers"]], "concept_aliases (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.concept_aliases"], [47, "eta.core.eta.DialogueState.concept_aliases"]], "concept_sets (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.concept_sets"], [47, "eta.core.eta.DialogueState.concept_sets"]], "config_agent (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.config_agent"], [47, "eta.core.eta.DialogueState.config_agent"]], "config_user (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.config_user"], [47, "eta.core.eta.DialogueState.config_user"]], "conversation_log (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.conversation_log"], [47, "eta.core.eta.DialogueState.conversation_log"]], "cost() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.cost"], [47, "eta.core.eta.DialogueState.cost"]], "do_continue() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.do_continue"], [47, "eta.core.eta.DialogueState.do_continue"]], "embedder (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.embedder"], [47, "eta.core.eta.DialogueState.embedder"]], "equality_sets (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.equality_sets"], [47, "eta.core.eta.DialogueState.equality_sets"]], "eta() (in module eta.core.eta)": [[46, "eta.core.eta.eta"], [49, "eta.core.eta.eta"]], "eta.core.eta": [[46, "module-eta.core.eta"]], "eval_truth_value() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.eval_truth_value"], [47, "eta.core.eta.DialogueState.eval_truth_value"]], "flush_context() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.flush_context"], [47, "eta.core.eta.DialogueState.flush_context"]], "get_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_buffer"], [47, "eta.core.eta.DialogueState.get_buffer"]], "get_conversation_log() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_conversation_log"], [47, "eta.core.eta.DialogueState.get_conversation_log"]], "get_io_path() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_io_path"], [47, "eta.core.eta.DialogueState.get_io_path"]], "get_memory() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_memory"], [47, "eta.core.eta.DialogueState.get_memory"]], "get_perception_servers() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_perception_servers"], [47, "eta.core.eta.DialogueState.get_perception_servers"]], "get_plan() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_plan"], [47, "eta.core.eta.DialogueState.get_plan"]], "get_quit_conversation() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_quit_conversation"], [47, "eta.core.eta.DialogueState.get_quit_conversation"]], "get_specialist_servers() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_specialist_servers"], [47, "eta.core.eta.DialogueState.get_specialist_servers"]], "get_step_failure_timer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_step_failure_timer"], [47, "eta.core.eta.DialogueState.get_step_failure_timer"]], "get_user_id() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.get_user_id"], [47, "eta.core.eta.DialogueState.get_user_id"]], "has_plan() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.has_plan"], [47, "eta.core.eta.DialogueState.has_plan"]], "id (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.id"], [47, "eta.core.eta.DialogueState.id"]], "init_knowledge (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.init_knowledge"], [47, "eta.core.eta.DialogueState.init_knowledge"]], "init_plan_from_schema() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.init_plan_from_schema"], [47, "eta.core.eta.DialogueState.init_plan_from_schema"]], "instantiate_curr_step() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.instantiate_curr_step"], [47, "eta.core.eta.DialogueState.instantiate_curr_step"]], "io_path (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.io_path"], [47, "eta.core.eta.DialogueState.io_path"]], "is_schema() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.is_schema"], [47, "eta.core.eta.DialogueState.is_schema"]], "log_turn() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.log_turn"], [47, "eta.core.eta.DialogueState.log_turn"]], "main() (in module eta.core.eta)": [[46, "eta.core.eta.main"], [50, "eta.core.eta.main"]], "me (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.me"], [47, "eta.core.eta.DialogueState.me"]], "memory (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.memory"], [47, "eta.core.eta.DialogueState.memory"]], "output_buffer (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.output_buffer"], [47, "eta.core.eta.DialogueState.output_buffer"]], "plan (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.plan"], [47, "eta.core.eta.DialogueState.plan"]], "pop_all_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.pop_all_buffer"], [47, "eta.core.eta.DialogueState.pop_all_buffer"]], "pop_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.pop_buffer"], [47, "eta.core.eta.DialogueState.pop_buffer"]], "print_schema_instances() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.print_schema_instances"], [47, "eta.core.eta.DialogueState.print_schema_instances"]], "push_output_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.push_output_buffer"], [47, "eta.core.eta.DialogueState.push_output_buffer"]], "quit_conversation (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.quit_conversation"], [47, "eta.core.eta.DialogueState.quit_conversation"]], "reference_list (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.reference_list"], [47, "eta.core.eta.DialogueState.reference_list"]], "replace_all_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.replace_all_buffer"], [47, "eta.core.eta.DialogueState.replace_all_buffer"]], "replace_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.replace_buffer"], [47, "eta.core.eta.DialogueState.replace_buffer"]], "reset_step_failure_timer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.reset_step_failure_timer"], [47, "eta.core.eta.DialogueState.reset_step_failure_timer"]], "schema_instances (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.schema_instances"], [47, "eta.core.eta.DialogueState.schema_instances"]], "schemas (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.schemas"], [47, "eta.core.eta.DialogueState.schemas"]], "set_plan() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.set_plan"], [47, "eta.core.eta.DialogueState.set_plan"]], "set_quit_conversation() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.set_quit_conversation"], [47, "eta.core.eta.DialogueState.set_quit_conversation"]], "start_schema (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.start_schema"], [47, "eta.core.eta.DialogueState.start_schema"]], "step_failure_timer (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.step_failure_timer"], [47, "eta.core.eta.DialogueState.step_failure_timer"]], "timegraph (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.timegraph"], [47, "eta.core.eta.DialogueState.timegraph"]], "transducers (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.transducers"], [47, "eta.core.eta.DialogueState.transducers"]], "unbind() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.unbind"], [47, "eta.core.eta.DialogueState.unbind"]], "write_output_buffer() (dialoguestate method)": [[46, "eta.core.eta.DialogueState.write_output_buffer"], [47, "eta.core.eta.DialogueState.write_output_buffer"]], "you (dialoguestate attribute)": [[46, "eta.core.eta.DialogueState.you"], [47, "eta.core.eta.DialogueState.you"]], "connect() (processmanager method)": [[48, "eta.core.eta.ProcessManager.connect"]], "get_server() (processmanager method)": [[48, "eta.core.eta.ProcessManager.get_server"]], "join() (processmanager method)": [[48, "eta.core.eta.ProcessManager.join"]], "register() (processmanager class method)": [[48, "eta.core.eta.ProcessManager.register"]], "start() (processmanager method)": [[48, "eta.core.eta.ProcessManager.start"]], "eta.core.execution": [[51, "module-eta.core.execution"]], "execute_say_bye() (in module eta.core.execution)": [[51, "eta.core.execution.execute_say_bye"], [52, "eta.core.execution.execute_say_bye"]], "execute_say_to() (in module eta.core.execution)": [[51, "eta.core.execution.execute_say_to"], [53, "eta.core.execution.execute_say_to"]], "execution_loop() (in module eta.core.execution)": [[51, "eta.core.execution.execution_loop"], [54, "eta.core.execution.execution_loop"]], "fail_curr_step() (in module eta.core.execution)": [[51, "eta.core.execution.fail_curr_step"], [55, "eta.core.execution.fail_curr_step"]], "inquire_truth_of_curr_step() (in module eta.core.execution)": [[51, "eta.core.execution.inquire_truth_of_curr_step"], [57, "eta.core.execution.inquire_truth_of_curr_step"]], "process_condition_step() (in module eta.core.execution)": [[51, "eta.core.execution.process_condition_step"], [59, "eta.core.execution.process_condition_step"]], "process_expected_step() (in module eta.core.execution)": [[51, "eta.core.execution.process_expected_step"], [60, "eta.core.execution.process_expected_step"]], "process_intended_step() (in module eta.core.execution)": [[51, "eta.core.execution.process_intended_step"], [61, "eta.core.execution.process_intended_step"]], "process_repetition_step() (in module eta.core.execution)": [[51, "eta.core.execution.process_repetition_step"], [62, "eta.core.execution.process_repetition_step"]], "get_action() (in module eta.core.execution)": [[56, "eta.core.execution.get_action"]], "me_pred() (in module eta.core.execution)": [[58, "eta.core.execution.me_pred"]], "say_bye_step() (in module eta.core.execution)": [[63, "eta.core.execution.say_bye_step"]], "say_to_step() (in module eta.core.execution)": [[64, "eta.core.execution.say_to_step"]], "you_pred() (in module eta.core.execution)": [[65, "eta.core.execution.you_pred"]], "eta.core.perception": [[66, "module-eta.core.perception"]], "observe() (in module eta.core.perception)": [[66, "eta.core.perception.observe"], [67, "eta.core.perception.observe"]], "perception_loop() (in module eta.core.perception)": [[66, "eta.core.perception.perception_loop"], [68, "eta.core.perception.perception_loop"]], "process_observations() (in module eta.core.perception)": [[66, "eta.core.perception.process_observations"], [69, "eta.core.perception.process_observations"]], "process_utterances() (in module eta.core.perception)": [[66, "eta.core.perception.process_utterances"], [70, "eta.core.perception.process_utterances"]], "add_possible_actions_to_plan() (in module eta.core.planning)": [[71, "eta.core.planning.add_possible_actions_to_plan"], [72, "eta.core.planning.add_possible_actions_to_plan"]], "eta.core.planning": [[71, "module-eta.core.planning"]], "expand_condition_step() (in module eta.core.planning)": [[71, "eta.core.planning.expand_condition_step"], [76, "eta.core.planning.expand_condition_step"]], "expand_plan_steps() (in module eta.core.planning)": [[71, "eta.core.planning.expand_plan_steps"], [77, "eta.core.planning.expand_plan_steps"]], "expand_primitive_step() (in module eta.core.planning)": [[71, "eta.core.planning.expand_primitive_step"], [78, "eta.core.planning.expand_primitive_step"]], "expand_repetition_step() (in module eta.core.planning)": [[71, "eta.core.planning.expand_repetition_step"], [79, "eta.core.planning.expand_repetition_step"]], "merge_plan_steps() (in module eta.core.planning)": [[71, "eta.core.planning.merge_plan_steps"], [80, "eta.core.planning.merge_plan_steps"]], "plan_answer() (in module eta.core.planning)": [[71, "eta.core.planning.plan_answer"], [82, "eta.core.planning.plan_answer"]], "plan_ask() (in module eta.core.planning)": [[71, "eta.core.planning.plan_ask"], [83, "eta.core.planning.plan_ask"]], "plan_paraphrase() (in module eta.core.planning)": [[71, "eta.core.planning.plan_paraphrase"], [84, "eta.core.planning.plan_paraphrase"]], "plan_react() (in module eta.core.planning)": [[71, "eta.core.planning.plan_react"], [85, "eta.core.planning.plan_react"]], "plan_respond() (in module eta.core.planning)": [[71, "eta.core.planning.plan_respond"], [86, "eta.core.planning.plan_respond"]], "planning_loop() (in module eta.core.planning)": [[71, "eta.core.planning.planning_loop"], [87, "eta.core.planning.planning_loop"]], "reorder_plan_steps() (in module eta.core.planning)": [[71, "eta.core.planning.reorder_plan_steps"], [90, "eta.core.planning.reorder_plan_steps"]], "say_to_step_from_utt() (in module eta.core.planning)": [[71, "eta.core.planning.say_to_step_from_utt"], [93, "eta.core.planning.say_to_step_from_utt"]], "say_to_step_from_utts() (in module eta.core.planning)": [[71, "eta.core.planning.say_to_step_from_utts"], [94, "eta.core.planning.say_to_step_from_utts"]], "schema_step() (in module eta.core.planning)": [[71, "eta.core.planning.schema_step"], [95, "eta.core.planning.schema_step"]], "split_schema_step() (in module eta.core.planning)": [[71, "eta.core.planning.split_schema_step"], [96, "eta.core.planning.split_schema_step"]], "answer_step() (in module eta.core.planning)": [[73, "eta.core.planning.answer_step"]], "ask_step() (in module eta.core.planning)": [[74, "eta.core.planning.ask_step"]], "equivalent_speech_acts() (in module eta.core.planning)": [[75, "eta.core.planning.equivalent_speech_acts"]], "paraphrase_step() (in module eta.core.planning)": [[81, "eta.core.planning.paraphrase_step"]], "react_step() (in module eta.core.planning)": [[88, "eta.core.planning.react_step"]], "relative_speech_act_step() (in module eta.core.planning)": [[89, "eta.core.planning.relative_speech_act_step"]], "reply_step() (in module eta.core.planning)": [[91, "eta.core.planning.reply_step"]], "respond_step() (in module eta.core.planning)": [[92, "eta.core.planning.respond_step"]], "eta.core.reasoning": [[97, "module-eta.core.reasoning"]], "infer_bottom_up() (in module eta.core.reasoning)": [[97, "eta.core.reasoning.infer_bottom_up"], [98, "eta.core.reasoning.infer_bottom_up"]], "infer_top_down() (in module eta.core.reasoning)": [[97, "eta.core.reasoning.infer_top_down"], [99, "eta.core.reasoning.infer_top_down"]], "reasoning_loop() (in module eta.core.reasoning)": [[97, "eta.core.reasoning.reasoning_loop"], [100, "eta.core.reasoning.reasoning_loop"]], "suggest_possible_actions() (in module eta.core.reasoning)": [[97, "eta.core.reasoning.suggest_possible_actions"], [101, "eta.core.reasoning.suggest_possible_actions"]], "dialogueturn (class in eta.discourse)": [[102, "eta.discourse.DialogueTurn"], [103, "eta.discourse.DialogueTurn"]], "utterance (class in eta.discourse)": [[102, "eta.discourse.Utterance"], [104, "eta.discourse.Utterance"]], "affect (utterance attribute)": [[102, "eta.discourse.Utterance.affect"], [104, "eta.discourse.Utterance.affect"]], "agent (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.agent"], [103, "eta.discourse.DialogueTurn.agent"]], "compress() (in module eta.discourse)": [[102, "eta.discourse.compress"], [105, "eta.discourse.compress"]], "decompress() (in module eta.discourse)": [[102, "eta.discourse.decompress"], [106, "eta.discourse.decompress"]], "ep (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.ep"], [103, "eta.discourse.DialogueTurn.ep"]], "eta.discourse": [[102, "module-eta.discourse"]], "get_prior_turn() (in module eta.discourse)": [[102, "eta.discourse.get_prior_turn"], [107, "eta.discourse.get_prior_turn"]], "gists (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.gists"], [103, "eta.discourse.DialogueTurn.gists"]], "obligations (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.obligations"], [103, "eta.discourse.DialogueTurn.obligations"]], "parse_utt_str() (in module eta.discourse)": [[102, "eta.discourse.parse_utt_str"], [108, "eta.discourse.parse_utt_str"]], "pragmatics (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.pragmatics"], [103, "eta.discourse.DialogueTurn.pragmatics"]], "presubst() (in module eta.discourse)": [[102, "eta.discourse.presubst"], [109, "eta.discourse.presubst"]], "semantics (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.semantics"], [103, "eta.discourse.DialogueTurn.semantics"]], "swap_duals() (in module eta.discourse)": [[102, "eta.discourse.swap_duals"], [110, "eta.discourse.swap_duals"]], "utterance (dialogueturn attribute)": [[102, "eta.discourse.DialogueTurn.utterance"], [103, "eta.discourse.DialogueTurn.utterance"]], "words (utterance attribute)": [[102, "eta.discourse.Utterance.words"], [104, "eta.discourse.Utterance.words"]], "dummyembedder (class in eta.embedding)": [[111, "eta.embedding.DummyEmbedder"], [112, "eta.embedding.DummyEmbedder"]], "embedder (class in eta.embedding)": [[111, "eta.embedding.Embedder"], [113, "eta.embedding.Embedder"]], "hfembedder (class in eta.embedding)": [[111, "eta.embedding.HFEmbedder"], [114, "eta.embedding.HFEmbedder"]], "stembedder (class in eta.embedding)": [[111, "eta.embedding.STEmbedder"], [115, "eta.embedding.STEmbedder"]], "embed() (embedder method)": [[111, "eta.embedding.Embedder.embed"], [113, "eta.embedding.Embedder.embed"]], "embed() (hfembedder method)": [[111, "eta.embedding.HFEmbedder.embed"], [114, "eta.embedding.HFEmbedder.embed"]], "embed() (stembedder method)": [[111, "eta.embedding.STEmbedder.embed"], [115, "eta.embedding.STEmbedder.embed"]], "eta.embedding": [[111, "module-eta.embedding"]], "header (hfembedder attribute)": [[111, "eta.embedding.HFEmbedder.header"], [114, "eta.embedding.HFEmbedder.header"]], "host (hfembedder attribute)": [[111, "eta.embedding.HFEmbedder.host"], [114, "eta.embedding.HFEmbedder.host"]], "model (hfembedder attribute)": [[111, "eta.embedding.HFEmbedder.model"], [114, "eta.embedding.HFEmbedder.model"]], "model (stembedder attribute)": [[111, "eta.embedding.STEmbedder.model"], [115, "eta.embedding.STEmbedder.model"]], "score() (embedder method)": [[111, "eta.embedding.Embedder.score"], [113, "eta.embedding.Embedder.score"]], "sim() (in module eta.embedding)": [[111, "eta.embedding.sim"], [116, "eta.embedding.sim"]], "url (hfembedder attribute)": [[111, "eta.embedding.HFEmbedder.url"], [114, "eta.embedding.HFEmbedder.url"]], "embed() (dummyembedder method)": [[112, "eta.embedding.DummyEmbedder.embed"]], "score() (dummyembedder method)": [[112, "eta.embedding.DummyEmbedder.score"]], "score() (hfembedder method)": [[114, "eta.embedding.HFEmbedder.score"]], "score() (stembedder method)": [[115, "eta.embedding.STEmbedder.score"]], "condition (class in eta.lf)": [[117, "eta.lf.Condition"], [118, "eta.lf.Condition"]], "domain (class in eta.lf)": [[117, "eta.lf.Domain"], [119, "eta.lf.Domain"]], "elf (class in eta.lf)": [[117, "eta.lf.ELF"], [120, "eta.lf.ELF"]], "eventuality (class in eta.lf)": [[117, "eta.lf.Eventuality"], [121, "eta.lf.Eventuality"]], "individual (class in eta.lf)": [[117, "eta.lf.Individual"], [122, "eta.lf.Individual"]], "keywords (in module eta.lf)": [[117, "eta.lf.KEYWORDS"], [123, "eta.lf.KEYWORDS"]], "keywords_r (in module eta.lf)": [[117, "eta.lf.KEYWORDS_R"], [124, "eta.lf.KEYWORDS_R"]], "lf (class in eta.lf)": [[117, "eta.lf.LF"], [125, "eta.lf.LF"]], "repetition (class in eta.lf)": [[117, "eta.lf.Repetition"], [126, "eta.lf.Repetition"]], "ulf (class in eta.lf)": [[117, "eta.lf.ULF"], [127, "eta.lf.ULF"]], "var (class in eta.lf)": [[117, "eta.lf.Var"], [128, "eta.lf.Var"]], "add() (domain method)": [[117, "eta.lf.Domain.add"], [119, "eta.lf.Domain.add"]], "add_aliases() (domain method)": [[117, "eta.lf.Domain.add_aliases"], [119, "eta.lf.Domain.add_aliases"]], "add_aliases() (individual method)": [[117, "eta.lf.Individual.add_aliases"], [122, "eta.lf.Individual.add_aliases"]], "aliases (individual attribute)": [[117, "eta.lf.Individual.aliases"], [122, "eta.lf.Individual.aliases"]], "and_prop_p() (in module eta.lf)": [[117, "eta.lf.and_prop_p"], [129, "eta.lf.and_prop_p"]], "bind() (condition method)": [[117, "eta.lf.Condition.bind"], [118, "eta.lf.Condition.bind"]], "bind() (eventuality method)": [[117, "eta.lf.Eventuality.bind"], [121, "eta.lf.Eventuality.bind"]], "bind() (lf method)": [[117, "eta.lf.LF.bind"], [125, "eta.lf.LF.bind"]], "bind() (repetition method)": [[117, "eta.lf.Repetition.bind"], [126, "eta.lf.Repetition.bind"]], "bind() (var method)": [[117, "eta.lf.Var.bind"], [128, "eta.lf.Var.bind"]], "bindings (condition attribute)": [[117, "eta.lf.Condition.bindings"], [118, "eta.lf.Condition.bindings"]], "bindings (eventuality attribute)": [[117, "eta.lf.Eventuality.bindings"], [121, "eta.lf.Eventuality.bindings"]], "bindings (lf attribute)": [[117, "eta.lf.LF.bindings"], [125, "eta.lf.LF.bindings"]], "bindings (repetition attribute)": [[117, "eta.lf.Repetition.bindings"], [126, "eta.lf.Repetition.bindings"]], "characterizes_prop_p() (in module eta.lf)": [[117, "eta.lf.characterizes_prop_p"], [130, "eta.lf.characterizes_prop_p"]], "condition (repetition attribute)": [[117, "eta.lf.Repetition.condition"], [126, "eta.lf.Repetition.condition"]], "conditions (condition attribute)": [[117, "eta.lf.Condition.conditions"], [118, "eta.lf.Condition.conditions"]], "domain (domain attribute)": [[117, "eta.lf.Domain.domain"], [119, "eta.lf.Domain.domain"]], "elf (condition attribute)": [[117, "eta.lf.Condition.elf"], [118, "eta.lf.Condition.elf"]], "elf (eventuality attribute)": [[117, "eta.lf.Eventuality.elf"], [121, "eta.lf.Eventuality.elf"]], "elf (repetition attribute)": [[117, "eta.lf.Repetition.elf"], [126, "eta.lf.Repetition.elf"]], "embed() (eventuality method)": [[117, "eta.lf.Eventuality.embed"], [121, "eta.lf.Eventuality.embed"]], "embedding (condition attribute)": [[117, "eta.lf.Condition.embedding"], [118, "eta.lf.Condition.embedding"]], "embedding (eventuality attribute)": [[117, "eta.lf.Eventuality.embedding"], [121, "eta.lf.Eventuality.embedding"]], "embedding (repetition attribute)": [[117, "eta.lf.Repetition.embedding"], [126, "eta.lf.Repetition.embedding"]], "ep (condition attribute)": [[117, "eta.lf.Condition.ep"], [118, "eta.lf.Condition.ep"]], "ep (eventuality attribute)": [[117, "eta.lf.Eventuality.ep"], [121, "eta.lf.Eventuality.ep"]], "ep (repetition attribute)": [[117, "eta.lf.Repetition.ep"], [126, "eta.lf.Repetition.ep"]], "equal_prop_p() (in module eta.lf)": [[117, "eta.lf.equal_prop_p"], [131, "eta.lf.equal_prop_p"]], "eta.lf": [[117, "module-eta.lf"]], "eventualities (repetition attribute)": [[117, "eta.lf.Repetition.eventualities"], [126, "eta.lf.Repetition.eventualities"]], "expectation_p() (in module eta.lf)": [[117, "eta.lf.expectation_p"], [132, "eta.lf.expectation_p"]], "extract_set() (in module eta.lf)": [[117, "eta.lf.extract_set"], [133, "eta.lf.extract_set"]], "format() (eventuality method)": [[117, "eta.lf.Eventuality.format"], [121, "eta.lf.Eventuality.format"]], "formula (lf attribute)": [[117, "eta.lf.LF.formula"], [125, "eta.lf.LF.formula"]], "from_lisp_dirs() (in module eta.lf)": [[117, "eta.lf.from_lisp_dirs"], [134, "eta.lf.from_lisp_dirs"]], "from_lisp_file() (in module eta.lf)": [[117, "eta.lf.from_lisp_file"], [135, "eta.lf.from_lisp_file"]], "get_elf() (eventuality method)": [[117, "eta.lf.Eventuality.get_elf"], [121, "eta.lf.Eventuality.get_elf"]], "get_ep() (eventuality method)": [[117, "eta.lf.Eventuality.get_ep"], [121, "eta.lf.Eventuality.get_ep"]], "get_formula() (lf method)": [[117, "eta.lf.LF.get_formula"], [125, "eta.lf.LF.get_formula"]], "get_nl() (eventuality method)": [[117, "eta.lf.Eventuality.get_nl"], [121, "eta.lf.Eventuality.get_nl"]], "get_ulf() (eventuality method)": [[117, "eta.lf.Eventuality.get_ulf"], [121, "eta.lf.Eventuality.get_ulf"]], "get_wff() (eventuality method)": [[117, "eta.lf.Eventuality.get_wff"], [121, "eta.lf.Eventuality.get_wff"]], "is_set() (in module eta.lf)": [[117, "eta.lf.is_set"], [136, "eta.lf.is_set"]], "make_set() (in module eta.lf)": [[117, "eta.lf.make_set"], [137, "eta.lf.make_set"]], "name (individual attribute)": [[117, "eta.lf.Individual.name"], [122, "eta.lf.Individual.name"]], "nl (condition attribute)": [[117, "eta.lf.Condition.nl"], [118, "eta.lf.Condition.nl"]], "nl (eventuality attribute)": [[117, "eta.lf.Eventuality.nl"], [121, "eta.lf.Eventuality.nl"]], "nl (repetition attribute)": [[117, "eta.lf.Repetition.nl"], [126, "eta.lf.Repetition.nl"]], "not_prop_p() (in module eta.lf)": [[117, "eta.lf.not_prop_p"], [138, "eta.lf.not_prop_p"]], "or_prop_p() (in module eta.lf)": [[117, "eta.lf.or_prop_p"], [139, "eta.lf.or_prop_p"]], "parse_condition() (in module eta.lf)": [[117, "eta.lf.parse_condition"], [140, "eta.lf.parse_condition"]], "parse_eventuality() (in module eta.lf)": [[117, "eta.lf.parse_eventuality"], [141, "eta.lf.parse_eventuality"]], "parse_eventuality_list() (in module eta.lf)": [[117, "eta.lf.parse_eventuality_list"], [142, "eta.lf.parse_eventuality_list"]], "parse_repetition() (in module eta.lf)": [[117, "eta.lf.parse_repetition"], [143, "eta.lf.parse_repetition"]], "prob (condition attribute)": [[117, "eta.lf.Condition.prob"], [118, "eta.lf.Condition.prob"]], "prob (eventuality attribute)": [[117, "eta.lf.Eventuality.prob"], [121, "eta.lf.Eventuality.prob"]], "prob (repetition attribute)": [[117, "eta.lf.Repetition.prob"], [126, "eta.lf.Repetition.prob"]], "remove_type() (in module eta.lf)": [[117, "eta.lf.remove_type"], [144, "eta.lf.remove_type"]], "replacevar() (condition method)": [[117, "eta.lf.Condition.replacevar"], [118, "eta.lf.Condition.replacevar"]], "replacevar() (eventuality method)": [[117, "eta.lf.Eventuality.replacevar"], [121, "eta.lf.Eventuality.replacevar"]], "replacevar() (lf method)": [[117, "eta.lf.LF.replacevar"], [125, "eta.lf.LF.replacevar"]], "replacevar() (repetition method)": [[117, "eta.lf.Repetition.replacevar"], [126, "eta.lf.Repetition.replacevar"]], "set_elf() (eventuality method)": [[117, "eta.lf.Eventuality.set_elf"], [121, "eta.lf.Eventuality.set_elf"]], "set_ep() (eventuality method)": [[117, "eta.lf.Eventuality.set_ep"], [121, "eta.lf.Eventuality.set_ep"]], "set_prob() (eventuality method)": [[117, "eta.lf.Eventuality.set_prob"], [121, "eta.lf.Eventuality.set_prob"]], "set_ulf() (eventuality method)": [[117, "eta.lf.Eventuality.set_ulf"], [121, "eta.lf.Eventuality.set_ulf"]], "set_union() (in module eta.lf)": [[117, "eta.lf.set_union"], [145, "eta.lf.set_union"]], "to_nl() (lf method)": [[117, "eta.lf.LF.to_nl"], [125, "eta.lf.LF.to_nl"]], "ulf (condition attribute)": [[117, "eta.lf.Condition.ulf"], [118, "eta.lf.Condition.ulf"]], "ulf (eventuality attribute)": [[117, "eta.lf.Eventuality.ulf"], [121, "eta.lf.Eventuality.ulf"]], "ulf (repetition attribute)": [[117, "eta.lf.Repetition.ulf"], [126, "eta.lf.Repetition.ulf"]], "unbind() (condition method)": [[117, "eta.lf.Condition.unbind"], [118, "eta.lf.Condition.unbind"]], "unbind() (eventuality method)": [[117, "eta.lf.Eventuality.unbind"], [121, "eta.lf.Eventuality.unbind"]], "unbind() (lf method)": [[117, "eta.lf.LF.unbind"], [125, "eta.lf.LF.unbind"]], "unbind() (repetition method)": [[117, "eta.lf.Repetition.unbind"], [126, "eta.lf.Repetition.unbind"]], "unbind() (var method)": [[117, "eta.lf.Var.unbind"], [128, "eta.lf.Var.unbind"]], "val (var attribute)": [[117, "eta.lf.Var.val"], [128, "eta.lf.Var.val"]], "var (var attribute)": [[117, "eta.lf.Var.var"], [128, "eta.lf.Var.var"]], "__eq__() (condition method)": [[118, "eta.lf.Condition.__eq__"]], "__hash__() (condition method)": [[118, "eta.lf.Condition.__hash__"]], "__str__() (condition method)": [[118, "eta.lf.Condition.__str__"]], "embed() (condition method)": [[118, "eta.lf.Condition.embed"]], "format() (condition method)": [[118, "eta.lf.Condition.format"]], "get_elf() (condition method)": [[118, "eta.lf.Condition.get_elf"]], "get_ep() (condition method)": [[118, "eta.lf.Condition.get_ep"]], "get_nl() (condition method)": [[118, "eta.lf.Condition.get_nl"]], "get_ulf() (condition method)": [[118, "eta.lf.Condition.get_ulf"]], "get_wff() (condition method)": [[118, "eta.lf.Condition.get_wff"]], "set_elf() (condition method)": [[118, "eta.lf.Condition.set_elf"]], "set_ep() (condition method)": [[118, "eta.lf.Condition.set_ep"]], "set_prob() (condition method)": [[118, "eta.lf.Condition.set_prob"]], "set_ulf() (condition method)": [[118, "eta.lf.Condition.set_ulf"]], "__str__() (elf method)": [[120, "eta.lf.ELF.__str__"]], "bind() (elf method)": [[120, "eta.lf.ELF.bind"]], "get_formula() (elf method)": [[120, "eta.lf.ELF.get_formula"]], "replacevar() (elf method)": [[120, "eta.lf.ELF.replacevar"]], "to_nl() (elf method)": [[120, "eta.lf.ELF.to_nl"]], "unbind() (elf method)": [[120, "eta.lf.ELF.unbind"]], "__eq__() (eventuality method)": [[121, "eta.lf.Eventuality.__eq__"]], "__hash__() (eventuality method)": [[121, "eta.lf.Eventuality.__hash__"]], "__str__() (eventuality method)": [[121, "eta.lf.Eventuality.__str__"]], "__str__() (individual method)": [[122, "eta.lf.Individual.__str__"]], "__str__() (lf method)": [[125, "eta.lf.LF.__str__"]], "__eq__() (repetition method)": [[126, "eta.lf.Repetition.__eq__"]], "__hash__() (repetition method)": [[126, "eta.lf.Repetition.__hash__"]], "__str__() (repetition method)": [[126, "eta.lf.Repetition.__str__"]], "embed() (repetition method)": [[126, "eta.lf.Repetition.embed"]], "format() (repetition method)": [[126, "eta.lf.Repetition.format"]], "get_elf() (repetition method)": [[126, "eta.lf.Repetition.get_elf"]], "get_ep() (repetition method)": [[126, "eta.lf.Repetition.get_ep"]], "get_nl() (repetition method)": [[126, "eta.lf.Repetition.get_nl"]], "get_ulf() (repetition method)": [[126, "eta.lf.Repetition.get_ulf"]], "get_wff() (repetition method)": [[126, "eta.lf.Repetition.get_wff"]], "set_elf() (repetition method)": [[126, "eta.lf.Repetition.set_elf"]], "set_ep() (repetition method)": [[126, "eta.lf.Repetition.set_ep"]], "set_prob() (repetition method)": [[126, "eta.lf.Repetition.set_prob"]], "set_ulf() (repetition method)": [[126, "eta.lf.Repetition.set_ulf"]], "__str__() (ulf method)": [[127, "eta.lf.ULF.__str__"]], "bind() (ulf method)": [[127, "eta.lf.ULF.bind"]], "get_formula() (ulf method)": [[127, "eta.lf.ULF.get_formula"]], "replacevar() (ulf method)": [[127, "eta.lf.ULF.replacevar"]], "to_nl() (ulf method)": [[127, "eta.lf.ULF.to_nl"]], "unbind() (ulf method)": [[127, "eta.lf.ULF.unbind"]], "__str__() (var method)": [[128, "eta.lf.Var.__str__"]], "memory (class in eta.memory)": [[146, "eta.memory.Memory"], [147, "eta.memory.Memory"]], "memorystorage (class in eta.memory)": [[146, "eta.memory.MemoryStorage"], [148, "eta.memory.MemoryStorage"]], "access() (memorystorage method)": [[146, "eta.memory.MemoryStorage.access"], [148, "eta.memory.MemoryStorage.access"]], "context (memorystorage attribute)": [[146, "eta.memory.MemoryStorage.context"], [148, "eta.memory.MemoryStorage.context"]], "does_characterize_episode() (memorystorage method)": [[146, "eta.memory.MemoryStorage.does_characterize_episode"], [148, "eta.memory.MemoryStorage.does_characterize_episode"]], "embedder (memorystorage attribute)": [[146, "eta.memory.MemoryStorage.embedder"], [148, "eta.memory.MemoryStorage.embedder"]], "end() (memory method)": [[146, "eta.memory.Memory.end"], [147, "eta.memory.Memory.end"]], "end_time (memory attribute)": [[146, "eta.memory.Memory.end_time"], [147, "eta.memory.Memory.end_time"]], "ep_ht (memorystorage attribute)": [[146, "eta.memory.MemoryStorage.ep_ht"], [148, "eta.memory.MemoryStorage.ep_ht"]], "eta.memory": [[146, "module-eta.memory"]], "event (memory attribute)": [[146, "eta.memory.Memory.event"], [147, "eta.memory.Memory.event"]], "flush_context() (memorystorage method)": [[146, "eta.memory.MemoryStorage.flush_context"], [148, "eta.memory.MemoryStorage.flush_context"]], "forget() (memorystorage method)": [[146, "eta.memory.MemoryStorage.forget"], [148, "eta.memory.MemoryStorage.forget"]], "get_characterizing_episode() (memorystorage method)": [[146, "eta.memory.MemoryStorage.get_characterizing_episode"], [148, "eta.memory.MemoryStorage.get_characterizing_episode"]], "get_ep() (memory method)": [[146, "eta.memory.Memory.get_ep"], [147, "eta.memory.Memory.get_ep"]], "get_episode() (memorystorage method)": [[146, "eta.memory.MemoryStorage.get_episode"], [148, "eta.memory.MemoryStorage.get_episode"]], "get_from_context() (memorystorage method)": [[146, "eta.memory.MemoryStorage.get_from_context"], [148, "eta.memory.MemoryStorage.get_from_context"]], "get_matching() (memorystorage method)": [[146, "eta.memory.MemoryStorage.get_matching"], [148, "eta.memory.MemoryStorage.get_matching"]], "get_time_wffs() (memory method)": [[146, "eta.memory.Memory.get_time_wffs"], [147, "eta.memory.Memory.get_time_wffs"]], "get_wff() (memory method)": [[146, "eta.memory.Memory.get_wff"], [147, "eta.memory.Memory.get_wff"]], "importance (memory attribute)": [[146, "eta.memory.Memory.importance"], [147, "eta.memory.Memory.importance"]], "instantiate() (memorystorage method)": [[146, "eta.memory.MemoryStorage.instantiate"], [148, "eta.memory.MemoryStorage.instantiate"]], "is_telic() (memory method)": [[146, "eta.memory.Memory.is_telic"], [147, "eta.memory.Memory.is_telic"]], "last_access (memory attribute)": [[146, "eta.memory.Memory.last_access"], [147, "eta.memory.Memory.last_access"]], "memories (memorystorage attribute)": [[146, "eta.memory.MemoryStorage.memories"], [148, "eta.memory.MemoryStorage.memories"]], "remove() (memorystorage method)": [[146, "eta.memory.MemoryStorage.remove"], [148, "eta.memory.MemoryStorage.remove"]], "remove_episode() (memorystorage method)": [[146, "eta.memory.MemoryStorage.remove_episode"], [148, "eta.memory.MemoryStorage.remove_episode"]], "remove_episode_from_context() (memorystorage method)": [[146, "eta.memory.MemoryStorage.remove_episode_from_context"], [148, "eta.memory.MemoryStorage.remove_episode_from_context"]], "remove_from_context() (memorystorage method)": [[146, "eta.memory.MemoryStorage.remove_from_context"], [148, "eta.memory.MemoryStorage.remove_from_context"]], "remove_matching() (memorystorage method)": [[146, "eta.memory.MemoryStorage.remove_matching"], [148, "eta.memory.MemoryStorage.remove_matching"]], "remove_matching_from_context() (memorystorage method)": [[146, "eta.memory.MemoryStorage.remove_matching_from_context"], [148, "eta.memory.MemoryStorage.remove_matching_from_context"]], "retrieve() (memorystorage method)": [[146, "eta.memory.MemoryStorage.retrieve"], [148, "eta.memory.MemoryStorage.retrieve"]], "start_time (memory attribute)": [[146, "eta.memory.Memory.start_time"], [147, "eta.memory.Memory.start_time"]], "store() (memorystorage method)": [[146, "eta.memory.MemoryStorage.store"], [148, "eta.memory.MemoryStorage.store"]], "update_last_access() (memory method)": [[146, "eta.memory.Memory.update_last_access"], [147, "eta.memory.Memory.update_last_access"]], "wff_ht (memorystorage attribute)": [[146, "eta.memory.MemoryStorage.wff_ht"], [148, "eta.memory.MemoryStorage.wff_ht"]], "__eq__() (memory method)": [[147, "eta.memory.Memory.__eq__"]], "__hash__() (memory method)": [[147, "eta.memory.Memory.__hash__"]], "__str__() (memory method)": [[147, "eta.memory.Memory.__str__"]], "__str__() (memorystorage method)": [[148, "eta.memory.MemoryStorage.__str__"]], "plannode (class in eta.plan)": [[149, "eta.plan.PlanNode"], [150, "eta.plan.PlanNode"]], "planstep (class in eta.plan)": [[149, "eta.plan.PlanStep"], [151, "eta.plan.PlanStep"]], "add_schema_to_subplan() (plannode method)": [[149, "eta.plan.PlanNode.add_schema_to_subplan"], [150, "eta.plan.PlanNode.add_schema_to_subplan"]], "add_superstep() (planstep method)": [[149, "eta.plan.PlanStep.add_superstep"], [151, "eta.plan.PlanStep.add_superstep"]], "add_superstep_to_subplan() (plannode method)": [[149, "eta.plan.PlanNode.add_superstep_to_subplan"], [150, "eta.plan.PlanNode.add_superstep_to_subplan"]], "add_supersteps() (plannode method)": [[149, "eta.plan.PlanNode.add_supersteps"], [150, "eta.plan.PlanNode.add_supersteps"]], "bind() (plannode method)": [[149, "eta.plan.PlanNode.bind"], [150, "eta.plan.PlanNode.bind"]], "bind() (planstep method)": [[149, "eta.plan.PlanStep.bind"], [151, "eta.plan.PlanStep.bind"]], "eta.plan": [[149, "module-eta.plan"]], "event (planstep attribute)": [[149, "eta.plan.PlanStep.event"], [151, "eta.plan.PlanStep.event"]], "expand_plan_node() (in module eta.plan)": [[149, "eta.plan.expand_plan_node"], [152, "eta.plan.expand_plan_node"]], "format() (planstep method)": [[149, "eta.plan.PlanStep.format"], [151, "eta.plan.PlanStep.format"]], "get_all_roots() (plannode method)": [[149, "eta.plan.PlanNode.get_all_roots"], [150, "eta.plan.PlanNode.get_all_roots"]], "get_first_plan_node() (in module eta.plan)": [[149, "eta.plan.get_first_plan_node"], [153, "eta.plan.get_first_plan_node"]], "get_last_plan_node() (in module eta.plan)": [[149, "eta.plan.get_last_plan_node"], [154, "eta.plan.get_last_plan_node"]], "get_obligations() (planstep method)": [[149, "eta.plan.PlanStep.get_obligations"], [151, "eta.plan.PlanStep.get_obligations"]], "id (planstep attribute)": [[149, "eta.plan.PlanStep.id"], [151, "eta.plan.PlanStep.id"]], "init_plan_from_eventualities() (in module eta.plan)": [[149, "eta.plan.init_plan_from_eventualities"], [155, "eta.plan.init_plan_from_eventualities"]], "insert_before_plan_node() (in module eta.plan)": [[149, "eta.plan.insert_before_plan_node"], [156, "eta.plan.insert_before_plan_node"]], "merge_plan_nodes() (in module eta.plan)": [[149, "eta.plan.merge_plan_nodes"], [157, "eta.plan.merge_plan_nodes"]], "next (plannode attribute)": [[149, "eta.plan.PlanNode.next"], [150, "eta.plan.PlanNode.next"]], "obligations (planstep attribute)": [[149, "eta.plan.PlanStep.obligations"], [151, "eta.plan.PlanStep.obligations"]], "prev (plannode attribute)": [[149, "eta.plan.PlanNode.prev"], [150, "eta.plan.PlanNode.prev"]], "schemas (planstep attribute)": [[149, "eta.plan.PlanStep.schemas"], [151, "eta.plan.PlanStep.schemas"]], "serialize() (planstep method)": [[149, "eta.plan.PlanStep.serialize"], [151, "eta.plan.PlanStep.serialize"]], "serialize_from_roots() (plannode method)": [[149, "eta.plan.PlanNode.serialize_from_roots"], [150, "eta.plan.PlanNode.serialize_from_roots"]], "serialize_subtree() (plannode method)": [[149, "eta.plan.PlanNode.serialize_subtree"], [150, "eta.plan.PlanNode.serialize_subtree"]], "status() (plannode method)": [[149, "eta.plan.PlanNode.status"], [150, "eta.plan.PlanNode.status"]], "step (plannode attribute)": [[149, "eta.plan.PlanNode.step"], [150, "eta.plan.PlanNode.step"]], "substeps (planstep attribute)": [[149, "eta.plan.PlanStep.substeps"], [151, "eta.plan.PlanStep.substeps"]], "supersteps (planstep attribute)": [[149, "eta.plan.PlanStep.supersteps"], [151, "eta.plan.PlanStep.supersteps"]], "to_graph() (plannode method)": [[149, "eta.plan.PlanNode.to_graph"], [150, "eta.plan.PlanNode.to_graph"]], "unbind() (plannode method)": [[149, "eta.plan.PlanNode.unbind"], [150, "eta.plan.PlanNode.unbind"]], "unbind() (planstep method)": [[149, "eta.plan.PlanStep.unbind"], [151, "eta.plan.PlanStep.unbind"]], "visualize_plan() (in module eta.plan)": [[149, "eta.plan.visualize_plan"], [158, "eta.plan.visualize_plan"]], "__str__() (plannode method)": [[150, "eta.plan.PlanNode.__str__"]], "__str__() (planstep method)": [[151, "eta.plan.PlanStep.__str__"]], "dialschema (class in eta.schema)": [[159, "eta.schema.DialSchema"], [160, "eta.schema.DialSchema"]], "epischema (class in eta.schema)": [[159, "eta.schema.EpiSchema"], [161, "eta.schema.EpiSchema"]], "objschema (class in eta.schema)": [[159, "eta.schema.ObjSchema"], [162, "eta.schema.ObjSchema"]], "schema (class in eta.schema)": [[159, "eta.schema.Schema"], [163, "eta.schema.Schema"]], "schemalibrary (class in eta.schema)": [[159, "eta.schema.SchemaLibrary"], [164, "eta.schema.SchemaLibrary"]], "add() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.add"], [164, "eta.schema.SchemaLibrary.add"]], "bind() (schema method)": [[159, "eta.schema.Schema.bind"], [163, "eta.schema.Schema.bind"]], "bind_args() (schema method)": [[159, "eta.schema.Schema.bind_args"], [163, "eta.schema.Schema.bind_args"]], "bindings (schema attribute)": [[159, "eta.schema.Schema.bindings"], [163, "eta.schema.Schema.bindings"]], "contents (schema attribute)": [[159, "eta.schema.Schema.contents"], [163, "eta.schema.Schema.contents"]], "create() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.create"], [164, "eta.schema.SchemaLibrary.create"]], "dial (schemalibrary attribute)": [[159, "eta.schema.SchemaLibrary.dial"], [164, "eta.schema.SchemaLibrary.dial"]], "duplicate_variables() (schema method)": [[159, "eta.schema.Schema.duplicate_variables"], [163, "eta.schema.Schema.duplicate_variables"]], "embed() (schema method)": [[159, "eta.schema.Schema.embed"], [163, "eta.schema.Schema.embed"]], "embedder (schemalibrary attribute)": [[159, "eta.schema.SchemaLibrary.embedder"], [164, "eta.schema.SchemaLibrary.embedder"]], "embedding (schema attribute)": [[159, "eta.schema.Schema.embedding"], [163, "eta.schema.Schema.embedding"]], "epi (schemalibrary attribute)": [[159, "eta.schema.SchemaLibrary.epi"], [164, "eta.schema.SchemaLibrary.epi"]], "eta.schema": [[159, "module-eta.schema"]], "format() (schema method)": [[159, "eta.schema.Schema.format"], [163, "eta.schema.Schema.format"]], "from_lisp_dirs() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.from_lisp_dirs"], [164, "eta.schema.SchemaLibrary.from_lisp_dirs"]], "from_lisp_file() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.from_lisp_file"], [164, "eta.schema.SchemaLibrary.from_lisp_file"]], "get_contents() (schema method)": [[159, "eta.schema.Schema.get_contents"], [163, "eta.schema.Schema.get_contents"]], "get_obligations_of_ep() (dialschema method)": [[159, "eta.schema.DialSchema.get_obligations_of_ep"], [160, "eta.schema.DialSchema.get_obligations_of_ep"]], "get_participants() (schema method)": [[159, "eta.schema.Schema.get_participants"], [163, "eta.schema.Schema.get_participants"]], "get_schemas() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.get_schemas"], [164, "eta.schema.SchemaLibrary.get_schemas"]], "get_section() (schema method)": [[159, "eta.schema.Schema.get_section"], [163, "eta.schema.Schema.get_section"]], "get_section_eps() (schema method)": [[159, "eta.schema.Schema.get_section_eps"], [163, "eta.schema.Schema.get_section_eps"]], "get_section_wffs() (schema method)": [[159, "eta.schema.Schema.get_section_wffs"], [163, "eta.schema.Schema.get_section_wffs"]], "header (schema attribute)": [[159, "eta.schema.Schema.header"], [163, "eta.schema.Schema.header"]], "id (schema attribute)": [[159, "eta.schema.Schema.id"], [163, "eta.schema.Schema.id"]], "instantiate() (schema method)": [[159, "eta.schema.Schema.instantiate"], [163, "eta.schema.Schema.instantiate"]], "is_schema() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.is_schema"], [164, "eta.schema.SchemaLibrary.is_schema"]], "obj (schemalibrary attribute)": [[159, "eta.schema.SchemaLibrary.obj"], [164, "eta.schema.SchemaLibrary.obj"]], "participants (schema attribute)": [[159, "eta.schema.Schema.participants"], [163, "eta.schema.Schema.participants"]], "predicate (schema attribute)": [[159, "eta.schema.Schema.predicate"], [163, "eta.schema.Schema.predicate"]], "read_param_dict() (dialschema method)": [[159, "eta.schema.DialSchema.read_param_dict"], [160, "eta.schema.DialSchema.read_param_dict"]], "read_param_dict() (epischema method)": [[159, "eta.schema.EpiSchema.read_param_dict"], [161, "eta.schema.EpiSchema.read_param_dict"]], "read_param_dict() (objschema method)": [[159, "eta.schema.ObjSchema.read_param_dict"], [162, "eta.schema.ObjSchema.read_param_dict"]], "read_param_dict() (schema method)": [[159, "eta.schema.Schema.read_param_dict"], [163, "eta.schema.Schema.read_param_dict"]], "retrieve() (schema method)": [[159, "eta.schema.Schema.retrieve"], [163, "eta.schema.Schema.retrieve"]], "retrieve() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.retrieve"], [164, "eta.schema.SchemaLibrary.retrieve"]], "retrieve_knowledge() (schemalibrary method)": [[159, "eta.schema.SchemaLibrary.retrieve_knowledge"], [164, "eta.schema.SchemaLibrary.retrieve_knowledge"]], "sections (schema attribute)": [[159, "eta.schema.Schema.sections"], [163, "eta.schema.Schema.sections"]], "subst_mappings() (schema method)": [[159, "eta.schema.Schema.subst_mappings"], [163, "eta.schema.Schema.subst_mappings"]], "to_probability_dict() (schema method)": [[159, "eta.schema.Schema.to_probability_dict"], [163, "eta.schema.Schema.to_probability_dict"]], "unbind() (schema method)": [[159, "eta.schema.Schema.unbind"], [163, "eta.schema.Schema.unbind"]], "vars (schema attribute)": [[159, "eta.schema.Schema.vars"], [163, "eta.schema.Schema.vars"]], "__str__() (dialschema method)": [[160, "eta.schema.DialSchema.__str__"]], "bind() (dialschema method)": [[160, "eta.schema.DialSchema.bind"]], "bind_args() (dialschema method)": [[160, "eta.schema.DialSchema.bind_args"]], "duplicate_variables() (dialschema method)": [[160, "eta.schema.DialSchema.duplicate_variables"]], "embed() (dialschema method)": [[160, "eta.schema.DialSchema.embed"]], "format() (dialschema method)": [[160, "eta.schema.DialSchema.format"]], "get_contents() (dialschema method)": [[160, "eta.schema.DialSchema.get_contents"]], "get_participants() (dialschema method)": [[160, "eta.schema.DialSchema.get_participants"]], "get_section() (dialschema method)": [[160, "eta.schema.DialSchema.get_section"]], "get_section_eps() (dialschema method)": [[160, "eta.schema.DialSchema.get_section_eps"]], "get_section_wffs() (dialschema method)": [[160, "eta.schema.DialSchema.get_section_wffs"]], "instantiate() (dialschema method)": [[160, "eta.schema.DialSchema.instantiate"]], "retrieve() (dialschema method)": [[160, "eta.schema.DialSchema.retrieve"]], "subst_mappings() (dialschema method)": [[160, "eta.schema.DialSchema.subst_mappings"]], "to_probability_dict() (dialschema method)": [[160, "eta.schema.DialSchema.to_probability_dict"]], "unbind() (dialschema method)": [[160, "eta.schema.DialSchema.unbind"]], "__str__() (epischema method)": [[161, "eta.schema.EpiSchema.__str__"]], "bind() (epischema method)": [[161, "eta.schema.EpiSchema.bind"]], "bind_args() (epischema method)": [[161, "eta.schema.EpiSchema.bind_args"]], "duplicate_variables() (epischema method)": [[161, "eta.schema.EpiSchema.duplicate_variables"]], "embed() (epischema method)": [[161, "eta.schema.EpiSchema.embed"]], "format() (epischema method)": [[161, "eta.schema.EpiSchema.format"]], "get_contents() (epischema method)": [[161, "eta.schema.EpiSchema.get_contents"]], "get_participants() (epischema method)": [[161, "eta.schema.EpiSchema.get_participants"]], "get_section() (epischema method)": [[161, "eta.schema.EpiSchema.get_section"]], "get_section_eps() (epischema method)": [[161, "eta.schema.EpiSchema.get_section_eps"]], "get_section_wffs() (epischema method)": [[161, "eta.schema.EpiSchema.get_section_wffs"]], "instantiate() (epischema method)": [[161, "eta.schema.EpiSchema.instantiate"]], "retrieve() (epischema method)": [[161, "eta.schema.EpiSchema.retrieve"]], "subst_mappings() (epischema method)": [[161, "eta.schema.EpiSchema.subst_mappings"]], "to_probability_dict() (epischema method)": [[161, "eta.schema.EpiSchema.to_probability_dict"]], "unbind() (epischema method)": [[161, "eta.schema.EpiSchema.unbind"]], "__str__() (objschema method)": [[162, "eta.schema.ObjSchema.__str__"]], "bind() (objschema method)": [[162, "eta.schema.ObjSchema.bind"]], "bind_args() (objschema method)": [[162, "eta.schema.ObjSchema.bind_args"]], "duplicate_variables() (objschema method)": [[162, "eta.schema.ObjSchema.duplicate_variables"]], "embed() (objschema method)": [[162, "eta.schema.ObjSchema.embed"]], "format() (objschema method)": [[162, "eta.schema.ObjSchema.format"]], "get_contents() (objschema method)": [[162, "eta.schema.ObjSchema.get_contents"]], "get_participants() (objschema method)": [[162, "eta.schema.ObjSchema.get_participants"]], "get_section() (objschema method)": [[162, "eta.schema.ObjSchema.get_section"]], "get_section_eps() (objschema method)": [[162, "eta.schema.ObjSchema.get_section_eps"]], "get_section_wffs() (objschema method)": [[162, "eta.schema.ObjSchema.get_section_wffs"]], "instantiate() (objschema method)": [[162, "eta.schema.ObjSchema.instantiate"]], "retrieve() (objschema method)": [[162, "eta.schema.ObjSchema.retrieve"]], "subst_mappings() (objschema method)": [[162, "eta.schema.ObjSchema.subst_mappings"]], "to_probability_dict() (objschema method)": [[162, "eta.schema.ObjSchema.to_probability_dict"]], "unbind() (objschema method)": [[162, "eta.schema.ObjSchema.unbind"]], "__str__() (schema method)": [[163, "eta.schema.Schema.__str__"]], "__str__() (schemalibrary method)": [[164, "eta.schema.SchemaLibrary.__str__"]], "eta.transducers": [[165, "module-eta.transducers"]], "affecttransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.AffectTransducer"], [167, "eta.transducers.base.AffectTransducer"]], "answertransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.AnswerTransducer"], [168, "eta.transducers.base.AnswerTransducer"]], "asktransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.AskTransducer"], [169, "eta.transducers.base.AskTransducer"]], "gisttransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.GistTransducer"], [170, "eta.transducers.base.GistTransducer"]], "paraphrasetransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.ParaphraseTransducer"], [171, "eta.transducers.base.ParaphraseTransducer"]], "pragmatictransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.PragmaticTransducer"], [172, "eta.transducers.base.PragmaticTransducer"]], "reactiontransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.ReactionTransducer"], [173, "eta.transducers.base.ReactionTransducer"]], "reasonbottomuptransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.ReasonBottomUpTransducer"], [174, "eta.transducers.base.ReasonBottomUpTransducer"]], "reasontopdowntransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.ReasonTopDownTransducer"], [175, "eta.transducers.base.ReasonTopDownTransducer"]], "responsetransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.ResponseTransducer"], [176, "eta.transducers.base.ResponseTransducer"]], "semantictransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.SemanticTransducer"], [177, "eta.transducers.base.SemanticTransducer"]], "subplantransducer (class in eta.transducers.base)": [[166, "eta.transducers.base.SubplanTransducer"], [178, "eta.transducers.base.SubplanTransducer"]], "transducer (class in eta.transducers.base)": [[166, "eta.transducers.base.Transducer"], [179, "eta.transducers.base.Transducer"]], "cost() (transducer method)": [[166, "eta.transducers.base.Transducer.cost"], [179, "eta.transducers.base.Transducer.cost"]], "eta.transducers.base": [[166, "module-eta.transducers.base"]], "__call__() (affecttransducer method)": [[167, "eta.transducers.base.AffectTransducer.__call__"]], "cost() (affecttransducer method)": [[167, "eta.transducers.base.AffectTransducer.cost"]], "__call__() (answertransducer method)": [[168, "eta.transducers.base.AnswerTransducer.__call__"]], "cost() (answertransducer method)": [[168, "eta.transducers.base.AnswerTransducer.cost"]], "__call__() (asktransducer method)": [[169, "eta.transducers.base.AskTransducer.__call__"]], "cost() (asktransducer method)": [[169, "eta.transducers.base.AskTransducer.cost"]], "__call__() (gisttransducer method)": [[170, "eta.transducers.base.GistTransducer.__call__"]], "cost() (gisttransducer method)": [[170, "eta.transducers.base.GistTransducer.cost"]], "__call__() (paraphrasetransducer method)": [[171, "eta.transducers.base.ParaphraseTransducer.__call__"]], "cost() (paraphrasetransducer method)": [[171, "eta.transducers.base.ParaphraseTransducer.cost"]], "__call__() (pragmatictransducer method)": [[172, "eta.transducers.base.PragmaticTransducer.__call__"]], "cost() (pragmatictransducer method)": [[172, "eta.transducers.base.PragmaticTransducer.cost"]], "__call__() (reactiontransducer method)": [[173, "eta.transducers.base.ReactionTransducer.__call__"]], "cost() (reactiontransducer method)": [[173, "eta.transducers.base.ReactionTransducer.cost"]], "__call__() (reasonbottomuptransducer method)": [[174, "eta.transducers.base.ReasonBottomUpTransducer.__call__"]], "cost() (reasonbottomuptransducer method)": [[174, "eta.transducers.base.ReasonBottomUpTransducer.cost"]], "__call__() (reasontopdowntransducer method)": [[175, "eta.transducers.base.ReasonTopDownTransducer.__call__"]], "cost() (reasontopdowntransducer method)": [[175, "eta.transducers.base.ReasonTopDownTransducer.cost"]], "__call__() (responsetransducer method)": [[176, "eta.transducers.base.ResponseTransducer.__call__"]], "cost() (responsetransducer method)": [[176, "eta.transducers.base.ResponseTransducer.cost"]], "__call__() (semantictransducer method)": [[177, "eta.transducers.base.SemanticTransducer.__call__"]], "cost() (semantictransducer method)": [[177, "eta.transducers.base.SemanticTransducer.cost"]], "__call__() (subplantransducer method)": [[178, "eta.transducers.base.SubplanTransducer.__call__"]], "cost() (subplantransducer method)": [[178, "eta.transducers.base.SubplanTransducer.cost"]], "__call__() (transducer method)": [[179, "eta.transducers.base.Transducer.__call__"]], "gptaffecttransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTAffectTransducer"], [181, "eta.transducers.gpt.GPTAffectTransducer"]], "gptanswertransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTAnswerTransducer"], [182, "eta.transducers.gpt.GPTAnswerTransducer"]], "gptasktransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTAskTransducer"], [183, "eta.transducers.gpt.GPTAskTransducer"]], "gptgisttransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTGistTransducer"], [184, "eta.transducers.gpt.GPTGistTransducer"]], "gptparaphrasetransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTParaphraseTransducer"], [185, "eta.transducers.gpt.GPTParaphraseTransducer"]], "gptpragmatictransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTPragmaticTransducer"], [186, "eta.transducers.gpt.GPTPragmaticTransducer"]], "gptreactiontransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTReactionTransducer"], [187, "eta.transducers.gpt.GPTReactionTransducer"]], "gptreasonbottomuptransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTReasonBottomUpTransducer"], [188, "eta.transducers.gpt.GPTReasonBottomUpTransducer"]], "gptreasontopdowntransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTReasonTopDownTransducer"], [189, "eta.transducers.gpt.GPTReasonTopDownTransducer"]], "gptresponsetransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTResponseTransducer"], [190, "eta.transducers.gpt.GPTResponseTransducer"]], "gptsemantictransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTSemanticTransducer"], [191, "eta.transducers.gpt.GPTSemanticTransducer"]], "gptsubplantransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTSubplanTransducer"], [192, "eta.transducers.gpt.GPTSubplanTransducer"]], "gpttransducer (class in eta.transducers.gpt)": [[180, "eta.transducers.gpt.GPTTransducer"], [193, "eta.transducers.gpt.GPTTransducer"]], "prompts (in module eta.transducers.gpt)": [[180, "eta.transducers.gpt.PROMPTS"], [194, "eta.transducers.gpt.PROMPTS"]], "validators (in module eta.transducers.gpt)": [[180, "eta.transducers.gpt.VALIDATORS"], [195, "eta.transducers.gpt.VALIDATORS"]], "_cost (gpttransducer attribute)": [[180, "eta.transducers.gpt.GPTTransducer._cost"], [193, "eta.transducers.gpt.GPTTransducer._cost"]], "cost() (gpttransducer method)": [[180, "eta.transducers.gpt.GPTTransducer.cost"], [193, "eta.transducers.gpt.GPTTransducer.cost"]], "eta.transducers.gpt": [[180, "module-eta.transducers.gpt"]], "prompt (gpttransducer attribute)": [[180, "eta.transducers.gpt.GPTTransducer.prompt"], [193, "eta.transducers.gpt.GPTTransducer.prompt"]], "validators (gpttransducer attribute)": [[180, "eta.transducers.gpt.GPTTransducer.validators"], [193, "eta.transducers.gpt.GPTTransducer.validators"]], "__call__() (gptaffecttransducer method)": [[181, "eta.transducers.gpt.GPTAffectTransducer.__call__"]], "cost() (gptaffecttransducer method)": [[181, "eta.transducers.gpt.GPTAffectTransducer.cost"]], "__call__() (gptanswertransducer method)": [[182, "eta.transducers.gpt.GPTAnswerTransducer.__call__"]], "cost() (gptanswertransducer method)": [[182, "eta.transducers.gpt.GPTAnswerTransducer.cost"]], "__call__() (gptasktransducer method)": [[183, "eta.transducers.gpt.GPTAskTransducer.__call__"]], "cost() (gptasktransducer method)": [[183, "eta.transducers.gpt.GPTAskTransducer.cost"]], "__call__() (gptgisttransducer method)": [[184, "eta.transducers.gpt.GPTGistTransducer.__call__"]], "cost() (gptgisttransducer method)": [[184, "eta.transducers.gpt.GPTGistTransducer.cost"]], "__call__() (gptparaphrasetransducer method)": [[185, "eta.transducers.gpt.GPTParaphraseTransducer.__call__"]], "cost() (gptparaphrasetransducer method)": [[185, "eta.transducers.gpt.GPTParaphraseTransducer.cost"]], "__call__() (gptpragmatictransducer method)": [[186, "eta.transducers.gpt.GPTPragmaticTransducer.__call__"]], "cost() (gptpragmatictransducer method)": [[186, "eta.transducers.gpt.GPTPragmaticTransducer.cost"]], "__call__() (gptreactiontransducer method)": [[187, "eta.transducers.gpt.GPTReactionTransducer.__call__"]], "cost() (gptreactiontransducer method)": [[187, "eta.transducers.gpt.GPTReactionTransducer.cost"]], "__call__() (gptreasonbottomuptransducer method)": [[188, "eta.transducers.gpt.GPTReasonBottomUpTransducer.__call__"]], "cost() (gptreasonbottomuptransducer method)": [[188, "eta.transducers.gpt.GPTReasonBottomUpTransducer.cost"]], "__call__() (gptreasontopdowntransducer method)": [[189, "eta.transducers.gpt.GPTReasonTopDownTransducer.__call__"]], "cost() (gptreasontopdowntransducer method)": [[189, "eta.transducers.gpt.GPTReasonTopDownTransducer.cost"]], "__call__() (gptresponsetransducer method)": [[190, "eta.transducers.gpt.GPTResponseTransducer.__call__"]], "cost() (gptresponsetransducer method)": [[190, "eta.transducers.gpt.GPTResponseTransducer.cost"]], "__call__() (gptsemantictransducer method)": [[191, "eta.transducers.gpt.GPTSemanticTransducer.__call__"]], "cost() (gptsemantictransducer method)": [[191, "eta.transducers.gpt.GPTSemanticTransducer.cost"]], "__call__() (gptsubplantransducer method)": [[192, "eta.transducers.gpt.GPTSubplanTransducer.__call__"]], "cost() (gptsubplantransducer method)": [[192, "eta.transducers.gpt.GPTSubplanTransducer.cost"]], "__call__() (gpttransducer method)": [[193, "eta.transducers.gpt.GPTTransducer.__call__"]], "ttaffecttransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTAffectTransducer"], [197, "eta.transducers.tt.TTAffectTransducer"]], "ttanswertransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTAnswerTransducer"], [198, "eta.transducers.tt.TTAnswerTransducer"]], "ttasktransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTAskTransducer"], [199, "eta.transducers.tt.TTAskTransducer"]], "ttgisttransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTGistTransducer"], [200, "eta.transducers.tt.TTGistTransducer"]], "ttparaphrasetransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTParaphraseTransducer"], [201, "eta.transducers.tt.TTParaphraseTransducer"]], "ttpragmatictransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTPragmaticTransducer"], [202, "eta.transducers.tt.TTPragmaticTransducer"]], "ttreactiontransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTReactionTransducer"], [203, "eta.transducers.tt.TTReactionTransducer"]], "ttreasonbottomuptransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTReasonBottomUpTransducer"], [204, "eta.transducers.tt.TTReasonBottomUpTransducer"]], "ttreasontopdowntransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTReasonTopDownTransducer"], [205, "eta.transducers.tt.TTReasonTopDownTransducer"]], "ttresponsetransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTResponseTransducer"], [206, "eta.transducers.tt.TTResponseTransducer"]], "ttsemantictransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTSemanticTransducer"], [207, "eta.transducers.tt.TTSemanticTransducer"]], "ttsubplantransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTSubplanTransducer"], [208, "eta.transducers.tt.TTSubplanTransducer"]], "tttransducer (class in eta.transducers.tt)": [[196, "eta.transducers.tt.TTTransducer"], [209, "eta.transducers.tt.TTTransducer"]], "cost() (tttransducer method)": [[196, "eta.transducers.tt.TTTransducer.cost"], [209, "eta.transducers.tt.TTTransducer.cost"]], "eta.transducers.tt": [[196, "module-eta.transducers.tt"]], "feats (tttransducer attribute)": [[196, "eta.transducers.tt.TTTransducer.feats"], [209, "eta.transducers.tt.TTTransducer.feats"]], "roots (tttransducer attribute)": [[196, "eta.transducers.tt.TTTransducer.roots"], [209, "eta.transducers.tt.TTTransducer.roots"]], "trees (tttransducer attribute)": [[196, "eta.transducers.tt.TTTransducer.trees"], [209, "eta.transducers.tt.TTTransducer.trees"]], "__call__() (ttaffecttransducer method)": [[197, "eta.transducers.tt.TTAffectTransducer.__call__"]], "cost() (ttaffecttransducer method)": [[197, "eta.transducers.tt.TTAffectTransducer.cost"]], "__call__() (ttanswertransducer method)": [[198, "eta.transducers.tt.TTAnswerTransducer.__call__"]], "cost() (ttanswertransducer method)": [[198, "eta.transducers.tt.TTAnswerTransducer.cost"]], "__call__() (ttasktransducer method)": [[199, "eta.transducers.tt.TTAskTransducer.__call__"]], "cost() (ttasktransducer method)": [[199, "eta.transducers.tt.TTAskTransducer.cost"]], "__call__() (ttgisttransducer method)": [[200, "eta.transducers.tt.TTGistTransducer.__call__"]], "cost() (ttgisttransducer method)": [[200, "eta.transducers.tt.TTGistTransducer.cost"]], "__call__() (ttparaphrasetransducer method)": [[201, "eta.transducers.tt.TTParaphraseTransducer.__call__"]], "cost() (ttparaphrasetransducer method)": [[201, "eta.transducers.tt.TTParaphraseTransducer.cost"]], "__call__() (ttpragmatictransducer method)": [[202, "eta.transducers.tt.TTPragmaticTransducer.__call__"]], "cost() (ttpragmatictransducer method)": [[202, "eta.transducers.tt.TTPragmaticTransducer.cost"]], "__call__() (ttreactiontransducer method)": [[203, "eta.transducers.tt.TTReactionTransducer.__call__"]], "cost() (ttreactiontransducer method)": [[203, "eta.transducers.tt.TTReactionTransducer.cost"]], "__call__() (ttreasonbottomuptransducer method)": [[204, "eta.transducers.tt.TTReasonBottomUpTransducer.__call__"]], "cost() (ttreasonbottomuptransducer method)": [[204, "eta.transducers.tt.TTReasonBottomUpTransducer.cost"]], "__call__() (ttreasontopdowntransducer method)": [[205, "eta.transducers.tt.TTReasonTopDownTransducer.__call__"]], "cost() (ttreasontopdowntransducer method)": [[205, "eta.transducers.tt.TTReasonTopDownTransducer.cost"]], "__call__() (ttresponsetransducer method)": [[206, "eta.transducers.tt.TTResponseTransducer.__call__"]], "cost() (ttresponsetransducer method)": [[206, "eta.transducers.tt.TTResponseTransducer.cost"]], "__call__() (ttsemantictransducer method)": [[207, "eta.transducers.tt.TTSemanticTransducer.__call__"]], "cost() (ttsemantictransducer method)": [[207, "eta.transducers.tt.TTSemanticTransducer.cost"]], "__call__() (ttsubplantransducer method)": [[208, "eta.transducers.tt.TTSubplanTransducer.__call__"]], "cost() (ttsubplantransducer method)": [[208, "eta.transducers.tt.TTSubplanTransducer.cost"]], "__call__() (tttransducer method)": [[209, "eta.transducers.tt.TTTransducer.__call__"]], "eta.util": [[210, "module-eta.util"]], "clear() (in module eta.util.buffer)": [[211, "eta.util.buffer.clear"], [212, "eta.util.buffer.clear"]], "enqueue() (in module eta.util.buffer)": [[211, "eta.util.buffer.enqueue"], [213, "eta.util.buffer.enqueue"]], "enqueue_ordered() (in module eta.util.buffer)": [[211, "eta.util.buffer.enqueue_ordered"], [214, "eta.util.buffer.enqueue_ordered"]], "eta.util.buffer": [[211, "module-eta.util.buffer"]], "get_item() (in module eta.util.buffer)": [[211, "eta.util.buffer.get_item"], [215, "eta.util.buffer.get_item"]], "is_empty() (in module eta.util.buffer)": [[211, "eta.util.buffer.is_empty"], [216, "eta.util.buffer.is_empty"]], "iterate() (in module eta.util.buffer)": [[211, "eta.util.buffer.iterate"], [217, "eta.util.buffer.iterate"]], "max_importance() (in module eta.util.buffer)": [[211, "eta.util.buffer.max_importance"], [218, "eta.util.buffer.max_importance"]], "pop_all() (in module eta.util.buffer)": [[211, "eta.util.buffer.pop_all"], [219, "eta.util.buffer.pop_all"]], "pop_item() (in module eta.util.buffer)": [[211, "eta.util.buffer.pop_item"], [220, "eta.util.buffer.pop_item"]], "append_file() (in module eta.util.file)": [[221, "eta.util.file.append_file"], [222, "eta.util.file.append_file"]], "clear() (in module eta.util.file)": [[221, "eta.util.file.clear"], [223, "eta.util.file.clear"]], "ensure_dir_exists() (in module eta.util.file)": [[221, "eta.util.file.ensure_dir_exists"], [224, "eta.util.file.ensure_dir_exists"]], "ensure_file_exists() (in module eta.util.file)": [[221, "eta.util.file.ensure_file_exists"], [225, "eta.util.file.ensure_file_exists"]], "eta.util.file": [[221, "module-eta.util.file"]], "exists() (in module eta.util.file)": [[221, "eta.util.file.exists"], [226, "eta.util.file.exists"]], "load_json() (in module eta.util.file)": [[221, "eta.util.file.load_json"], [227, "eta.util.file.load_json"]], "read_file() (in module eta.util.file)": [[221, "eta.util.file.read_file"], [228, "eta.util.file.read_file"]], "read_lines() (in module eta.util.file)": [[221, "eta.util.file.read_lines"], [229, "eta.util.file.read_lines"]], "remove() (in module eta.util.file)": [[221, "eta.util.file.remove"], [230, "eta.util.file.remove"]], "write_file() (in module eta.util.file)": [[221, "eta.util.file.write_file"], [231, "eta.util.file.write_file"]], "write_json() (in module eta.util.file)": [[221, "eta.util.file.write_json"], [232, "eta.util.file.write_json"]], "append() (in module eta.util.general)": [[233, "eta.util.general.append"], [234, "eta.util.general.append"]], "argmax() (in module eta.util.general)": [[233, "eta.util.general.argmax"], [235, "eta.util.general.argmax"]], "atom() (in module eta.util.general)": [[233, "eta.util.general.atom"], [236, "eta.util.general.atom"]], "clear_symtab() (in module eta.util.general)": [[233, "eta.util.general.clear_symtab"], [237, "eta.util.general.clear_symtab"]], "cons() (in module eta.util.general)": [[233, "eta.util.general.cons"], [238, "eta.util.general.cons"]], "cons_dict() (in module eta.util.general)": [[233, "eta.util.general.cons_dict"], [239, "eta.util.general.cons_dict"]], "dict_get() (in module eta.util.general)": [[233, "eta.util.general.dict_get"], [240, "eta.util.general.dict_get"]], "dict_rem() (in module eta.util.general)": [[233, "eta.util.general.dict_rem"], [241, "eta.util.general.dict_rem"]], "dict_rem_val() (in module eta.util.general)": [[233, "eta.util.general.dict_rem_val"], [242, "eta.util.general.dict_rem_val"]], "dict_substall_keys() (in module eta.util.general)": [[233, "eta.util.general.dict_substall_keys"], [243, "eta.util.general.dict_substall_keys"]], "dual_var() (in module eta.util.general)": [[233, "eta.util.general.dual_var"], [244, "eta.util.general.dual_var"]], "duplicate_var() (in module eta.util.general)": [[233, "eta.util.general.duplicate_var"], [245, "eta.util.general.duplicate_var"]], "episode_name() (in module eta.util.general)": [[233, "eta.util.general.episode_name"], [246, "eta.util.general.episode_name"]], "episode_var() (in module eta.util.general)": [[233, "eta.util.general.episode_var"], [247, "eta.util.general.episode_var"]], "escaped_symbol_p() (in module eta.util.general)": [[233, "eta.util.general.escaped_symbol_p"], [248, "eta.util.general.escaped_symbol_p"]], "eta.util.general": [[233, "module-eta.util.general"]], "flatten() (in module eta.util.general)": [[233, "eta.util.general.flatten"], [249, "eta.util.general.flatten"]], "gentemp() (in module eta.util.general)": [[233, "eta.util.general.gentemp"], [250, "eta.util.general.gentemp"]], "get_keyword_contents() (in module eta.util.general)": [[233, "eta.util.general.get_keyword_contents"], [251, "eta.util.general.get_keyword_contents"]], "indent() (in module eta.util.general)": [[233, "eta.util.general.indent"], [252, "eta.util.general.indent"]], "isquote() (in module eta.util.general)": [[233, "eta.util.general.isquote"], [253, "eta.util.general.isquote"]], "linsum() (in module eta.util.general)": [[233, "eta.util.general.linsum"], [254, "eta.util.general.linsum"]], "listp() (in module eta.util.general)": [[233, "eta.util.general.listp"], [255, "eta.util.general.listp"]], "normalize() (in module eta.util.general)": [[233, "eta.util.general.normalize"], [256, "eta.util.general.normalize"]], "push() (in module eta.util.general)": [[233, "eta.util.general.push"], [257, "eta.util.general.push"]], "random_element() (in module eta.util.general)": [[233, "eta.util.general.random_element"], [258, "eta.util.general.random_element"]], "rec_remove() (in module eta.util.general)": [[233, "eta.util.general.rec_remove"], [259, "eta.util.general.rec_remove"]], "rec_replace() (in module eta.util.general)": [[233, "eta.util.general.rec_replace"], [260, "eta.util.general.rec_replace"]], "remove_duplicates() (in module eta.util.general)": [[233, "eta.util.general.remove_duplicates"], [261, "eta.util.general.remove_duplicates"]], "remove_nil() (in module eta.util.general)": [[233, "eta.util.general.remove_nil"], [262, "eta.util.general.remove_nil"]], "replaceall() (in module eta.util.general)": [[233, "eta.util.general.replaceall"], [263, "eta.util.general.replaceall"]], "squash() (in module eta.util.general)": [[233, "eta.util.general.squash"], [264, "eta.util.general.squash"]], "standardize() (in module eta.util.general)": [[233, "eta.util.general.standardize"], [265, "eta.util.general.standardize"]], "subst() (in module eta.util.general)": [[233, "eta.util.general.subst"], [266, "eta.util.general.subst"]], "substall() (in module eta.util.general)": [[233, "eta.util.general.substall"], [267, "eta.util.general.substall"]], "symbolp() (in module eta.util.general)": [[233, "eta.util.general.symbolp"], [268, "eta.util.general.symbolp"]], "to_key() (in module eta.util.general)": [[233, "eta.util.general.to_key"], [269, "eta.util.general.to_key"]], "variablep() (in module eta.util.general)": [[233, "eta.util.general.variablep"], [270, "eta.util.general.variablep"]], "apply_zip() (in module eta.util.gpt)": [[271, "eta.util.gpt.apply_zip"], [272, "eta.util.gpt.apply_zip"]], "cost_gpt() (in module eta.util.gpt)": [[271, "eta.util.gpt.cost_gpt"], [273, "eta.util.gpt.cost_gpt"]], "cost_tokens() (in module eta.util.gpt)": [[271, "eta.util.gpt.cost_tokens"], [274, "eta.util.gpt.cost_tokens"]], "eta.util.gpt": [[271, "module-eta.util.gpt"]], "generate_gpt() (in module eta.util.gpt)": [[271, "eta.util.gpt.generate_gpt"], [275, "eta.util.gpt.generate_gpt"]], "subst_examples() (in module eta.util.gpt)": [[271, "eta.util.gpt.subst_examples"], [276, "eta.util.gpt.subst_examples"]], "subst_kwargs() (in module eta.util.gpt)": [[271, "eta.util.gpt.subst_kwargs"], [277, "eta.util.gpt.subst_kwargs"]], "balanced_substr() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.balanced_substr"], [279, "eta.util.sexpr.balanced_substr"]], "clean_lisp() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.clean_lisp"], [280, "eta.util.sexpr.clean_lisp"]], "clean_s_expr() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.clean_s_expr"], [281, "eta.util.sexpr.clean_s_expr"]], "convert_quotes() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.convert_quotes"], [282, "eta.util.sexpr.convert_quotes"]], "eta.util.sexpr": [[278, "module-eta.util.sexpr"]], "list_to_s_expr() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.list_to_s_expr"], [283, "eta.util.sexpr.list_to_s_expr"]], "list_to_str() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.list_to_str"], [284, "eta.util.sexpr.list_to_str"]], "parse_s_expr() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.parse_s_expr"], [285, "eta.util.sexpr.parse_s_expr"]], "read_lisp() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.read_lisp"], [286, "eta.util.sexpr.read_lisp"]], "standardize_symbols() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.standardize_symbols"], [287, "eta.util.sexpr.standardize_symbols"]], "write_lisp() (in module eta.util.sexpr)": [[278, "eta.util.sexpr.write_lisp"], [288, "eta.util.sexpr.write_lisp"]], "timepoint (class in eta.util.time)": [[289, "eta.util.time.TimePoint"], [290, "eta.util.time.TimePoint"]], "certainty_to_period() (in module eta.util.time)": [[289, "eta.util.time.certainty_to_period"], [291, "eta.util.time.certainty_to_period"]], "eta.util.time": [[289, "module-eta.util.time"]], "format() (timepoint method)": [[289, "eta.util.time.TimePoint.format"], [290, "eta.util.time.TimePoint.format"]], "has_elapsed_certainty_period() (in module eta.util.time)": [[289, "eta.util.time.has_elapsed_certainty_period"], [292, "eta.util.time.has_elapsed_certainty_period"]], "now() (in module eta.util.time)": [[289, "eta.util.time.now"], [293, "eta.util.time.now"]], "time (timepoint attribute)": [[289, "eta.util.time.TimePoint.time"], [290, "eta.util.time.TimePoint.time"]], "to_num() (timepoint method)": [[289, "eta.util.time.TimePoint.to_num"], [290, "eta.util.time.TimePoint.to_num"]], "to_ulf() (timepoint method)": [[289, "eta.util.time.TimePoint.to_ulf"], [290, "eta.util.time.TimePoint.to_ulf"]], "update() (timepoint method)": [[289, "eta.util.time.TimePoint.update"], [290, "eta.util.time.TimePoint.update"]], "__str__() (timepoint method)": [[290, "eta.util.time.TimePoint.__str__"]], "eta.util.tt": [[294, "module-eta.util.tt"]], "choose_result_for() (in module eta.util.tt.choice)": [[295, "eta.util.tt.choice.choose_result_for"], [296, "eta.util.tt.choice.choose_result_for"]], "eta.util.tt.choice": [[295, "module-eta.util.tt.choice"]], "is_tree_root() (in module eta.util.tt.choice)": [[297, "eta.util.tt.choice.is_tree_root"]], "is_tree_root_clause() (in module eta.util.tt.choice)": [[298, "eta.util.tt.choice.is_tree_root_clause"]], "is_tree_root_list() (in module eta.util.tt.choice)": [[299, "eta.util.tt.choice.is_tree_root_list"]], "check_position_index_syntax() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.check_position_index_syntax"], [301, "eta.util.tt.match.check_position_index_syntax"]], "eta.util.tt.match": [[300, "module-eta.util.tt.match"]], "fill_template() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.fill_template"], [305, "eta.util.tt.match.fill_template"]], "flatten_sequences() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.flatten_sequences"], [306, "eta.util.tt.match.flatten_sequences"]], "indexed_element_of() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.indexed_element_of"], [308, "eta.util.tt.match.indexed_element_of"]], "isa() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.isa"], [309, "eta.util.tt.match.isa"]], "match() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.match"], [310, "eta.util.tt.match.match"]], "position_index() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.position_index"], [315, "eta.util.tt.match.position_index"]], "s_variant_of_p_var() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.s_variant_of_p_var"], [319, "eta.util.tt.match.s_variant_of_p_var"]], "spec_function() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.spec_function"], [322, "eta.util.tt.match.spec_function"]], "val() (in module eta.util.tt.match)": [[300, "eta.util.tt.match.val"], [324, "eta.util.tt.match.val"]], "dec_num_var() (in module eta.util.tt.match)": [[302, "eta.util.tt.match.dec_num_var"]], "dot_atom() (in module eta.util.tt.match)": [[303, "eta.util.tt.match.dot_atom"]], "e_var() (in module eta.util.tt.match)": [[304, "eta.util.tt.match.e_var"]], "hard_atom() (in module eta.util.tt.match)": [[307, "eta.util.tt.match.hard_atom"]], "match_var() (in module eta.util.tt.match)": [[311, "eta.util.tt.match.match_var"]], "num_var() (in module eta.util.tt.match)": [[312, "eta.util.tt.match.num_var"]], "ok() (in module eta.util.tt.match)": [[313, "eta.util.tt.match.ok"]], "p_var() (in module eta.util.tt.match)": [[314, "eta.util.tt.match.p_var"]], "pred_var_any() (in module eta.util.tt.match)": [[316, "eta.util.tt.match.pred_var_any"]], "q_var() (in module eta.util.tt.match)": [[317, "eta.util.tt.match.q_var"]], "s_var() (in module eta.util.tt.match)": [[318, "eta.util.tt.match.s_var"]], "seq_var() (in module eta.util.tt.match)": [[320, "eta.util.tt.match.seq_var"]], "soft_var() (in module eta.util.tt.match)": [[321, "eta.util.tt.match.soft_var"]], "underlying_feat() (in module eta.util.tt.match)": [[323, "eta.util.tt.match.underlying_feat"]], "attachfeat() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.attachfeat"], [326, "eta.util.tt.parse.attachfeat"]], "eta.util.tt.parse": [[325, "module-eta.util.tt.parse"]], "from_lisp_dirs() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.from_lisp_dirs"], [327, "eta.util.tt.parse.from_lisp_dirs"]], "from_lisp_file() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.from_lisp_file"], [328, "eta.util.tt.parse.from_lisp_file"]], "init_node() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.init_node"], [329, "eta.util.tt.parse.init_node"]], "merge_feats() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.merge_feats"], [330, "eta.util.tt.parse.merge_feats"]], "merge_trees() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.merge_trees"], [331, "eta.util.tt.parse.merge_trees"]], "readrules() (in module eta.util.tt.parse)": [[325, "eta.util.tt.parse.readrules"], [332, "eta.util.tt.parse.readrules"]], "affirm_adv() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.affirm_adv"], [334, "eta.util.tt.preds.affirm_adv"]], "atom() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.atom"], [335, "eta.util.tt.preds.atom"]], "comma() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.comma"], [336, "eta.util.tt.preds.comma"]], "eta.util.tt.preds": [[333, "module-eta.util.tt.preds"]], "expr() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.expr"], [337, "eta.util.tt.preds.expr"]], "lex_ulf() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.lex_ulf"], [338, "eta.util.tt.preds.lex_ulf"]], "lst() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.lst"], [339, "eta.util.tt.preds.lst"]], "modal() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.modal"], [340, "eta.util.tt.preds.modal"]], "non_neg() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.non_neg"], [341, "eta.util.tt.preds.non_neg"]], "non_neg_mod() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.non_neg_mod"], [342, "eta.util.tt.preds.non_neg_mod"]], "not_medicine_gen() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.not_medicine_gen"], [343, "eta.util.tt.preds.not_medicine_gen"]], "not_non_alcoholic() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.not_non_alcoholic"], [344, "eta.util.tt.preds.not_non_alcoholic"]], "prefix_each() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.prefix_each"], [345, "eta.util.tt.preds.prefix_each"]], "quote_to_list() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.quote_to_list"], [346, "eta.util.tt.preds.quote_to_list"]], "split_sentences() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.split_sentences"], [347, "eta.util.tt.preds.split_sentences"]], "test() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.test"], [348, "eta.util.tt.preds.test"]], "zero() (in module eta.util.tt.preds)": [[333, "eta.util.tt.preds.zero"], [349, "eta.util.tt.preds.zero"]], "eta.util.ulf": [[350, "module-eta.util.ulf"]], "eta.util.ulf.lex": [[351, "module-eta.util.ulf.lex"]], "stem_superlative() (in module eta.util.ulf.lex)": [[351, "eta.util.ulf.lex.stem_superlative"], [352, "eta.util.ulf.lex.stem_superlative"]], "to_ulf() (in module eta.util.ulf.lex)": [[351, "eta.util.ulf.lex.to_ulf"], [353, "eta.util.ulf.lex.to_ulf"]]}})